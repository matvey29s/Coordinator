
stm32_eth_rmii.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012598  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d04  08012798  08012798  00022798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.exidx    00000008  0801549c  0801549c  0002549c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000090  20000000  080154a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000bd08  20000090  08015534  00030090  2**2
                  ALLOC
  6 ._user_heap_stack 00000600  2000bd98  08015534  0003bd98  2**0
                  ALLOC
  7 .lwip_sec     000143a8  2000c398  2000c398  0003c398  2**2
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002656d  00000000  00000000  000300be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00005b06  00000000  00000000  0005662b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001b00  00000000  00000000  0005c138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001a30  00000000  00000000  0005dc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00034e4f  00000000  00000000  0005f668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002bed2  00000000  00000000  000944b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00113dbf  00000000  00000000  000c0389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001d4148  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007a10  00000000  00000000  001d4198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005a8:	f3bf 8f4f 	dsb	sy
}
 80005ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ae:	f3bf 8f6f 	isb	sy
}
 80005b2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005b4:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <SCB_EnableICache+0x48>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005bc:	f3bf 8f4f 	dsb	sy
}
 80005c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005c2:	f3bf 8f6f 	isb	sy
}
 80005c6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <SCB_EnableICache+0x48>)
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	4a07      	ldr	r2, [pc, #28]	; (80005ec <SCB_EnableICache+0x48>)
 80005ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005d4:	f3bf 8f4f 	dsb	sy
}
 80005d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005da:	f3bf 8f6f 	isb	sy
}
 80005de:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	e000ed00 	.word	0xe000ed00

080005f0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80005f6:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <SCB_EnableDCache+0x84>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005fe:	f3bf 8f4f 	dsb	sy
}
 8000602:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <SCB_EnableDCache+0x84>)
 8000606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800060a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	0b5b      	lsrs	r3, r3, #13
 8000610:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000614:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	08db      	lsrs	r3, r3, #3
 800061a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800061e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	015a      	lsls	r2, r3, #5
 8000624:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000628:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800062e:	4911      	ldr	r1, [pc, #68]	; (8000674 <SCB_EnableDCache+0x84>)
 8000630:	4313      	orrs	r3, r2
 8000632:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	1e5a      	subs	r2, r3, #1
 800063a:	60ba      	str	r2, [r7, #8]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1ef      	bne.n	8000620 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	1e5a      	subs	r2, r3, #1
 8000644:	60fa      	str	r2, [r7, #12]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d1e5      	bne.n	8000616 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800064a:	f3bf 8f4f 	dsb	sy
}
 800064e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000650:	4b08      	ldr	r3, [pc, #32]	; (8000674 <SCB_EnableDCache+0x84>)
 8000652:	695b      	ldr	r3, [r3, #20]
 8000654:	4a07      	ldr	r2, [pc, #28]	; (8000674 <SCB_EnableDCache+0x84>)
 8000656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800065a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800065c:	f3bf 8f4f 	dsb	sy
}
 8000660:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000662:	f3bf 8f6f 	isb	sy
}
 8000666:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800067c:	f000 f99a 	bl	80009b4 <MPU_Config>

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000680:	f7ff ff90 	bl	80005a4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000684:	f7ff ffb4 	bl	80005f0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000688:	f001 f8e0 	bl	800184c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068c:	f000 f820 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000690:	f000 f912 	bl	80008b8 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000694:	f006 f814 	bl	80066c0 <MX_LWIP_Init>
  MX_TIM1_Init();
 8000698:	f000 f88a 	bl	80007b0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800069c:	f000 f8dc 	bl	8000858 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
 HAL_TIM_Base_Start_IT(&htim1);
 80006a0:	4808      	ldr	r0, [pc, #32]	; (80006c4 <main+0x4c>)
 80006a2:	f004 f8d7 	bl	8004854 <HAL_TIM_Base_Start_IT>
 //HAL_SPI_Receive_IT(&hspi1,result_data,SIZE*5);
  HAL_UART_Receive_IT(&huart1,result_data,SIZE*5);
 80006a6:	f241 727f 	movw	r2, #6015	; 0x177f
 80006aa:	4907      	ldr	r1, [pc, #28]	; (80006c8 <main+0x50>)
 80006ac:	4807      	ldr	r0, [pc, #28]	; (80006cc <main+0x54>)
 80006ae:	f004 fd83 	bl	80051b8 <HAL_UART_Receive_IT>
  //HAL_UART_Receive_IT (&huart2,data_buffer, sizeof(data_buffer));
  udpClient_connect();
 80006b2:	f000 fb99 	bl	8000de8 <udpClient_connect>
  while (1)
  {
    /* USER CODE END WHILE */
	  //ethernetif_input(&gnetif);
	  	  //sys_check_timeouts();
	  	  	HAL_UART_Receive_IT (&huart1,result_data, SIZE*5);
 80006b6:	f241 727f 	movw	r2, #6015	; 0x177f
 80006ba:	4903      	ldr	r1, [pc, #12]	; (80006c8 <main+0x50>)
 80006bc:	4803      	ldr	r0, [pc, #12]	; (80006cc <main+0x54>)
 80006be:	f004 fd7b 	bl	80051b8 <HAL_UART_Receive_IT>
 80006c2:	e7f8      	b.n	80006b6 <main+0x3e>
 80006c4:	20001810 	.word	0x20001810
 80006c8:	20000090 	.word	0x20000090
 80006cc:	2000185c 	.word	0x2000185c

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	; 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	2234      	movs	r2, #52	; 0x34
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f010 fe42 	bl	8011368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	4b2c      	ldr	r3, [pc, #176]	; (80007a8 <SystemClock_Config+0xd8>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	4a2b      	ldr	r2, [pc, #172]	; (80007a8 <SystemClock_Config+0xd8>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000700:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <SystemClock_Config+0xd8>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	4b27      	ldr	r3, [pc, #156]	; (80007ac <SystemClock_Config+0xdc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a26      	ldr	r2, [pc, #152]	; (80007ac <SystemClock_Config+0xdc>)
 8000712:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b24      	ldr	r3, [pc, #144]	; (80007ac <SystemClock_Config+0xdc>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000724:	2301      	movs	r3, #1
 8000726:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000728:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800072c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072e:	2302      	movs	r3, #2
 8000730:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000732:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000736:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000738:	2319      	movs	r3, #25
 800073a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 800073c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000740:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000742:	2302      	movs	r3, #2
 8000744:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000746:	2302      	movs	r3, #2
 8000748:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800074a:	2302      	movs	r3, #2
 800074c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4618      	mov	r0, r3
 8000754:	f002 ff6a 	bl	800362c <HAL_RCC_OscConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800075e:	f000 f957 	bl	8000a10 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000762:	f002 ff13 	bl	800358c <HAL_PWREx_EnableOverDrive>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800076c:	f000 f950 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	2302      	movs	r3, #2
 8000776:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800077c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000780:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000786:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000788:	f107 0308 	add.w	r3, r7, #8
 800078c:	2107      	movs	r1, #7
 800078e:	4618      	mov	r0, r3
 8000790:	f003 f9fa 	bl	8003b88 <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800079a:	f000 f939 	bl	8000a10 <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3750      	adds	r7, #80	; 0x50
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b6:	f107 0310 	add.w	r3, r7, #16
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007ce:	4b20      	ldr	r3, [pc, #128]	; (8000850 <MX_TIM1_Init+0xa0>)
 80007d0:	4a20      	ldr	r2, [pc, #128]	; (8000854 <MX_TIM1_Init+0xa4>)
 80007d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10800-1;
 80007d4:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <MX_TIM1_Init+0xa0>)
 80007d6:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80007da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007dc:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <MX_TIM1_Init+0xa0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80007e2:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_TIM1_Init+0xa0>)
 80007e4:	f242 720f 	movw	r2, #9999	; 0x270f
 80007e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ea:	4b19      	ldr	r3, [pc, #100]	; (8000850 <MX_TIM1_Init+0xa0>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_TIM1_Init+0xa0>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <MX_TIM1_Init+0xa0>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007fc:	4814      	ldr	r0, [pc, #80]	; (8000850 <MX_TIM1_Init+0xa0>)
 80007fe:	f003 ffd1 	bl	80047a4 <HAL_TIM_Base_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000808:	f000 f902 	bl	8000a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800080c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000810:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000812:	f107 0310 	add.w	r3, r7, #16
 8000816:	4619      	mov	r1, r3
 8000818:	480d      	ldr	r0, [pc, #52]	; (8000850 <MX_TIM1_Init+0xa0>)
 800081a:	f004 f99b 	bl	8004b54 <HAL_TIM_ConfigClockSource>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000824:	f000 f8f4 	bl	8000a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000828:	2300      	movs	r3, #0
 800082a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800082c:	2300      	movs	r3, #0
 800082e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	4619      	mov	r1, r3
 8000838:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_TIM1_Init+0xa0>)
 800083a:	f004 fbc3 	bl	8004fc4 <HAL_TIMEx_MasterConfigSynchronization>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000844:	f000 f8e4 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	3720      	adds	r7, #32
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20001810 	.word	0x20001810
 8000854:	40010000 	.word	0x40010000

08000858 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800085c:	4b13      	ldr	r3, [pc, #76]	; (80008ac <MX_USART1_UART_Init+0x54>)
 800085e:	4a14      	ldr	r2, [pc, #80]	; (80008b0 <MX_USART1_UART_Init+0x58>)
 8000860:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2764800;
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_USART1_UART_Init+0x54>)
 8000864:	4a13      	ldr	r2, [pc, #76]	; (80008b4 <MX_USART1_UART_Init+0x5c>)
 8000866:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000868:	4b10      	ldr	r3, [pc, #64]	; (80008ac <MX_USART1_UART_Init+0x54>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_USART1_UART_Init+0x54>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000874:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <MX_USART1_UART_Init+0x54>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_USART1_UART_Init+0x54>)
 800087c:	220c      	movs	r2, #12
 800087e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <MX_USART1_UART_Init+0x54>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_USART1_UART_Init+0x54>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <MX_USART1_UART_Init+0x54>)
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_USART1_UART_Init+0x54>)
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_USART1_UART_Init+0x54>)
 800089a:	f004 fc3f 	bl	800511c <HAL_UART_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 80008a4:	f000 f8b4 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	2000185c 	.word	0x2000185c
 80008b0:	40011000 	.word	0x40011000
 80008b4:	002a3000 	.word	0x002a3000

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08c      	sub	sp, #48	; 0x30
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ce:	4b2e      	ldr	r3, [pc, #184]	; (8000988 <MX_GPIO_Init+0xd0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a2d      	ldr	r2, [pc, #180]	; (8000988 <MX_GPIO_Init+0xd0>)
 80008d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b2b      	ldr	r3, [pc, #172]	; (8000988 <MX_GPIO_Init+0xd0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e2:	61bb      	str	r3, [r7, #24]
 80008e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	4b28      	ldr	r3, [pc, #160]	; (8000988 <MX_GPIO_Init+0xd0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a27      	ldr	r2, [pc, #156]	; (8000988 <MX_GPIO_Init+0xd0>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b25      	ldr	r3, [pc, #148]	; (8000988 <MX_GPIO_Init+0xd0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4b22      	ldr	r3, [pc, #136]	; (8000988 <MX_GPIO_Init+0xd0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a21      	ldr	r2, [pc, #132]	; (8000988 <MX_GPIO_Init+0xd0>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <MX_GPIO_Init+0xd0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <MX_GPIO_Init+0xd0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a1b      	ldr	r2, [pc, #108]	; (8000988 <MX_GPIO_Init+0xd0>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b19      	ldr	r3, [pc, #100]	; (8000988 <MX_GPIO_Init+0xd0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092e:	4b16      	ldr	r3, [pc, #88]	; (8000988 <MX_GPIO_Init+0xd0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a15      	ldr	r2, [pc, #84]	; (8000988 <MX_GPIO_Init+0xd0>)
 8000934:	f043 0308 	orr.w	r3, r3, #8
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <MX_GPIO_Init+0xd0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0308 	and.w	r3, r3, #8
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <MX_GPIO_Init+0xd0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a0f      	ldr	r2, [pc, #60]	; (8000988 <MX_GPIO_Init+0xd0>)
 800094c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <MX_GPIO_Init+0xd0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800095e:	2360      	movs	r3, #96	; 0x60
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096a:	2303      	movs	r3, #3
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800096e:	2307      	movs	r3, #7
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4804      	ldr	r0, [pc, #16]	; (800098c <MX_GPIO_Init+0xd4>)
 800097a:	f002 fc5b 	bl	8003234 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097e:	bf00      	nop
 8000980:	3730      	adds	r7, #48	; 0x30
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800
 800098c:	40020c00 	.word	0x40020c00

08000990 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]

	HAL_UART_Receive_IT (&huart1,result_data, SIZE*5);
 8000998:	f241 727f 	movw	r2, #6015	; 0x177f
 800099c:	4903      	ldr	r1, [pc, #12]	; (80009ac <HAL_UART_RxCpltCallback+0x1c>)
 800099e:	4804      	ldr	r0, [pc, #16]	; (80009b0 <HAL_UART_RxCpltCallback+0x20>)
 80009a0:	f004 fc0a 	bl	80051b8 <HAL_UART_Receive_IT>
			memcpy(result_data+4*SIZE,data_buffer,SIZE);
		}
*/
	//if(data_buffer[])

}
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000090 	.word	0x20000090
 80009b0:	2000185c 	.word	0x2000185c

080009b4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009ba:	463b      	mov	r3, r7
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80009c6:	f001 f8dd 	bl	8001b84 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009ca:	2301      	movs	r3, #1
 80009cc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20020000;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <MPU_Config+0x58>)
 80009d4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80009d6:	230e      	movs	r3, #14
 80009d8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80009da:	2300      	movs	r3, #0
 80009dc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80009de:	2301      	movs	r3, #1
 80009e0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80009e2:	2303      	movs	r3, #3
 80009e4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80009e6:	2301      	movs	r3, #1
 80009e8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80009ea:	2301      	movs	r3, #1
 80009ec:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009f6:	463b      	mov	r3, r7
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 f8fb 	bl	8001bf4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80009fe:	2004      	movs	r0, #4
 8000a00:	f001 f8d8 	bl	8001bb4 <HAL_MPU_Enable>

}
 8000a04:	bf00      	nop
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20020000 	.word	0x20020000

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <Error_Handler+0x8>
	...

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <HAL_MspInit+0x44>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <HAL_MspInit+0x44>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <HAL_MspInit+0x44>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <HAL_MspInit+0x44>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	4a08      	ldr	r2, [pc, #32]	; (8000a60 <HAL_MspInit+0x44>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a44:	6453      	str	r3, [r2, #68]	; 0x44
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_MspInit+0x44>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800

08000a64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0d      	ldr	r2, [pc, #52]	; (8000aa8 <HAL_TIM_Base_MspInit+0x44>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d113      	bne.n	8000a9e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <HAL_TIM_Base_MspInit+0x48>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a0c      	ldr	r2, [pc, #48]	; (8000aac <HAL_TIM_Base_MspInit+0x48>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <HAL_TIM_Base_MspInit+0x48>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 3, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2103      	movs	r1, #3
 8000a92:	2019      	movs	r0, #25
 8000a94:	f001 f83f 	bl	8001b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a98:	2019      	movs	r0, #25
 8000a9a:	f001 f858 	bl	8001b4e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40010000 	.word	0x40010000
 8000aac:	40023800 	.word	0x40023800

08000ab0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b0ae      	sub	sp, #184	; 0xb8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2290      	movs	r2, #144	; 0x90
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f010 fc49 	bl	8011368 <memset>
  if(huart->Instance==USART1)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a25      	ldr	r2, [pc, #148]	; (8000b70 <HAL_UART_MspInit+0xc0>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d143      	bne.n	8000b68 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ae0:	2340      	movs	r3, #64	; 0x40
 8000ae2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4618      	mov	r0, r3
 8000aee:	f003 fa31 	bl	8003f54 <HAL_RCCEx_PeriphCLKConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000af8:	f7ff ff8a 	bl	8000a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000afc:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <HAL_UART_MspInit+0xc4>)
 8000afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b00:	4a1c      	ldr	r2, [pc, #112]	; (8000b74 <HAL_UART_MspInit+0xc4>)
 8000b02:	f043 0310 	orr.w	r3, r3, #16
 8000b06:	6453      	str	r3, [r2, #68]	; 0x44
 8000b08:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <HAL_UART_MspInit+0xc4>)
 8000b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0c:	f003 0310 	and.w	r3, r3, #16
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b14:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <HAL_UART_MspInit+0xc4>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b18:	4a16      	ldr	r2, [pc, #88]	; (8000b74 <HAL_UART_MspInit+0xc4>)
 8000b1a:	f043 0302 	orr.w	r3, r3, #2
 8000b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <HAL_UART_MspInit+0xc4>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000b2c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000b46:	2304      	movs	r3, #4
 8000b48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b50:	4619      	mov	r1, r3
 8000b52:	4809      	ldr	r0, [pc, #36]	; (8000b78 <HAL_UART_MspInit+0xc8>)
 8000b54:	f002 fb6e 	bl	8003234 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2025      	movs	r0, #37	; 0x25
 8000b5e:	f000 ffda 	bl	8001b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b62:	2025      	movs	r0, #37	; 0x25
 8000b64:	f000 fff3 	bl	8001b4e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b68:	bf00      	nop
 8000b6a:	37b8      	adds	r7, #184	; 0xb8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40011000 	.word	0x40011000
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020400 	.word	0x40020400

08000b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b80:	e7fe      	b.n	8000b80 <NMI_Handler+0x4>

08000b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <MemManage_Handler+0x4>

08000b8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <BusFault_Handler+0x4>

08000b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <UsageFault_Handler+0x4>

08000b9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc8:	f000 fe86 	bl	80018d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bd6:	f003 feb5 	bl	8004944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20001810 	.word	0x20001810

08000be4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <USART1_IRQHandler+0x10>)
 8000bea:	f004 fb29 	bl	8005240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	2000185c 	.word	0x2000185c

08000bf8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <ETH_IRQHandler+0x10>)
 8000bfe:	f001 fc2d 	bl	800245c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200063f4 	.word	0x200063f4

08000c0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return 1;
 8000c10:	2301      	movs	r3, #1
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <_kill>:

int _kill(int pid, int sig)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c26:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <_kill+0x20>)
 8000c28:	2216      	movs	r2, #22
 8000c2a:	601a      	str	r2, [r3, #0]
  return -1;
 8000c2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	2000bd88 	.word	0x2000bd88

08000c40 <_exit>:

void _exit (int status)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c48:	f04f 31ff 	mov.w	r1, #4294967295
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff ffe5 	bl	8000c1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c52:	e7fe      	b.n	8000c52 <_exit+0x12>

08000c54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	e00a      	b.n	8000c7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c66:	f3af 8000 	nop.w
 8000c6a:	4601      	mov	r1, r0
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	1c5a      	adds	r2, r3, #1
 8000c70:	60ba      	str	r2, [r7, #8]
 8000c72:	b2ca      	uxtb	r2, r1
 8000c74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	dbf0      	blt.n	8000c66 <_read+0x12>
  }

  return len;
 8000c84:	687b      	ldr	r3, [r7, #4]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b086      	sub	sp, #24
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	60f8      	str	r0, [r7, #12]
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	e009      	b.n	8000cb4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	1c5a      	adds	r2, r3, #1
 8000ca4:	60ba      	str	r2, [r7, #8]
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dbf1      	blt.n	8000ca0 <_write+0x12>
  }
  return len;
 8000cbc:	687b      	ldr	r3, [r7, #4]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <_close>:

int _close(int file)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cee:	605a      	str	r2, [r3, #4]
  return 0;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <_isatty>:

int _isatty(int file)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b087      	sub	sp, #28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d38:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <_sbrk+0x5c>)
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <_sbrk+0x60>)
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <_sbrk+0x64>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <_sbrk+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d205      	bcs.n	8000d6c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d60:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <_sbrk+0x6c>)
 8000d62:	220c      	movs	r2, #12
 8000d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6a:	e009      	b.n	8000d80 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <_sbrk+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <_sbrk+0x64>)
 8000d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	371c      	adds	r7, #28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	20080000 	.word	0x20080000
 8000d90:	00000400 	.word	0x00000400
 8000d94:	200018e4 	.word	0x200018e4
 8000d98:	2000bd98 	.word	0x2000bd98
 8000d9c:	2000bd88 	.word	0x2000bd88

08000da0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <SystemInit+0x20>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <SystemInit+0x20>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <HAL_TIM_PeriodElapsedCallback>:
//uint8_t count=0;
extern TIM_HandleTypeDef htim1;
extern UART_HandleTypeDef huart2;
extern struct netif gnetif;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	ethernetif_input(&gnetif);
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dce:	f005 ff0f 	bl	8006bf0 <ethernetif_input>
	udpClient_send();
 8000dd2:	f000 f839 	bl	8000e48 <udpClient_send>
	sys_check_timeouts();
 8000dd6:	f00d fa79 	bl	800e2cc <sys_check_timeouts>
	count++;
	if(count>5) {
		count=0;
		memcpy(result_data,dublicate,6015);
	}*/
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20001a1c 	.word	0x20001a1c

08000de8 <udpClient_connect>:



void udpClient_connect(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
	err_t err;

	/* 1. Create a new UDP control block  */
	upcb = udp_new();
 8000dee:	f00d ff51 	bl	800ec94 <udp_new>
 8000df2:	4603      	mov	r3, r0
 8000df4:	4a11      	ldr	r2, [pc, #68]	; (8000e3c <udpClient_connect+0x54>)
 8000df6:	6013      	str	r3, [r2, #0]

	/* Bind the block to module's IP and port */
	ip_addr_t myIPaddr;
	IP_ADDR4(&myIPaddr, 192, 168, 1, 123);
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <udpClient_connect+0x58>)
 8000dfa:	60bb      	str	r3, [r7, #8]
	//udp_bind(upcb, &myIPaddr, 8);
	udp_bind(upcb, &myIPaddr, 1027);
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <udpClient_connect+0x54>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f107 0108 	add.w	r1, r7, #8
 8000e04:	f240 4203 	movw	r2, #1027	; 0x403
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f00d fe4d 	bl	800eaa8 <udp_bind>


	/* configure destination IP address and port */
	ip_addr_t DestIPaddr;
	IP_ADDR4(&DestIPaddr, 192, 168, 1, 104);
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <udpClient_connect+0x5c>)
 8000e10:	607b      	str	r3, [r7, #4]
	//err= udp_connect(upcb, &DestIPaddr, 7);
	err= udp_connect(upcb, &DestIPaddr, 1024);
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <udpClient_connect+0x54>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	1d39      	adds	r1, r7, #4
 8000e18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f00d fecb 	bl	800ebb8 <udp_connect>
 8000e22:	4603      	mov	r3, r0
 8000e24:	73fb      	strb	r3, [r7, #15]
	if (err == ERR_OK)
 8000e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d101      	bne.n	8000e32 <udpClient_connect+0x4a>
	{
		/* 2. Send message to server */
		udpClient_send ();
 8000e2e:	f000 f80b 	bl	8000e48 <udpClient_send>

		/* 3. Set a receive callback for the upcb */
	}
}
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200018e8 	.word	0x200018e8
 8000e40:	7b01a8c0 	.word	0x7b01a8c0
 8000e44:	6801a8c0 	.word	0x6801a8c0

08000e48 <udpClient_send>:

static void udpClient_send(void)
{
 8000e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e4a:	b0f3      	sub	sp, #460	; 0x1cc
 8000e4c:	af3a      	add	r7, sp, #232	; 0xe8
  struct pbuf *txBuf;


  //int i=0;
	  //int len = sprintf(data,"* %u %u %u %u %u %u %u %u %u %u %u %u %u ! * %u %u %u %u %u %u %u %u %u %u %u %u %u ! * %u %u %u %u %u %u %u %u %u %u %u %u %u ! * %u %u %u %u %u %u %u %u %u %u %u %u %u ! * %u %u %u %u %u %u %u %u %u %u %u %u %u ! ",result_data[1],result_data[2+12*i],result_data[3+12*i],result_data[4+12*i],result_data[5+12*i],result_data[6+12*i],result_data[7+12*i],result_data[8+12*i],result_data[9+12*i],result_data[10+12*i],result_data[11+12*i],result_data[12+12*i],result_data[13+12*i],result_data[1204],result_data[1205+12*i],result_data[1206+12*i],result_data[1207+12*i],result_data[1208+12*i],result_data[1209+12*i],result_data[1210+12*i],result_data[1211+12*i],result_data[1212+12*i],result_data[1213+12*i],result_data[1214+12*i],result_data[1215+12*i],result_data[1216+12*i],result_data[2407],result_data[2408+12*i],result_data[2409+12*i],result_data[2410+12*i],result_data[2411+12*i],result_data[2412+12*i],result_data[2413+12*i],result_data[2414+12*i],result_data[2415+12*i],result_data[2416+12*i],result_data[2417+12*i],result_data[2418+12*i],result_data[2419+12*i],result_data[3610],result_data[3611+12*i],result_data[3612+12*i],result_data[3613+12*i],result_data[3614+12*i],result_data[3615+12*i],result_data[3616+12*i],result_data[3617+12*i],result_data[3618+12*i],result_data[3619+12*i],result_data[3620+12*i],result_data[3621+12*i],result_data[3622+12*i],result_data[4813],result_data[4814+12*i],result_data[4815+12*i],result_data[4816+12*i],result_data[4817+12*i],result_data[4818+12*i],result_data[4819+12*i],result_data[4820+12*i],result_data[4821+12*i],result_data[4822+12*i],result_data[4823+12*i],result_data[4824+12*i],result_data[4825+12*i]);
  for(int i=0;i<100;i++) {
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000e54:	e360      	b.n	8001518 <udpClient_send+0x6d0>

	 int len = sprintf(data,"* 1 %u %u %u %u %u %u %u %u %u %u %u %u ! * 2 %u %u %u %u %u %u %u %u %u %u %u %u ! * 3 %u %u %u %u %u %u %u %u %u %u %u %u ! * 4 %u %u %u %u %u %u %u %u %u %u %u %u ! * 5 %u %u %u %u %u %u %u %u %u %u %u %u !",result_data[2+12*i],result_data[3+12*i],result_data[4+12*i],result_data[5+12*i],result_data[6+12*i],result_data[7+12*i],result_data[8+12*i],result_data[9+12*i],result_data[10+12*i],result_data[11+12*i],result_data[12+12*i],result_data[13+12*i],result_data[1205+12*i],result_data[1206+12*i],result_data[1207+12*i],result_data[1208+12*i],result_data[1209+12*i],result_data[1210+12*i],result_data[1211+12*i],result_data[1212+12*i],result_data[1213+12*i],result_data[1214+12*i],result_data[1215+12*i],result_data[1216+12*i],result_data[2408+12*i],result_data[2409+12*i],result_data[2410+12*i],result_data[2411+12*i],result_data[2412+12*i],result_data[2413+12*i],result_data[2414+12*i],result_data[2415+12*i],result_data[2416+12*i],result_data[2417+12*i],result_data[2418+12*i],result_data[2419+12*i],result_data[3611+12*i],result_data[3612+12*i],result_data[3613+12*i],result_data[3614+12*i],result_data[3615+12*i] ,result_data[3616+12*i],result_data[3617+12*i],result_data[3618+12*i],result_data[3619+12*i],result_data[3620+12*i],result_data[3621+12*i],result_data[3622+12*i],result_data[4814+12*i],result_data[4815+12*i],result_data[4816+12*i],result_data[4817+12*i],result_data[4818+12*i],result_data[4819+12*i],result_data[4820+12*i],result_data[4821+12*i],result_data[4822+12*i],result_data[4823+12*i],result_data[4824+12*i],result_data[4825+12*i]);
 8000e56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	4413      	add	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	3302      	adds	r3, #2
 8000e64:	4ad0      	ldr	r2, [pc, #832]	; (80011a8 <udpClient_send+0x360>)
 8000e66:	5cd3      	ldrb	r3, [r2, r3]
 8000e68:	469c      	mov	ip, r3
 8000e6a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000e6e:	4613      	mov	r3, r2
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	4413      	add	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	3303      	adds	r3, #3
 8000e78:	4acb      	ldr	r2, [pc, #812]	; (80011a8 <udpClient_send+0x360>)
 8000e7a:	5cd3      	ldrb	r3, [r2, r3]
 8000e7c:	469e      	mov	lr, r3
 8000e7e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000e82:	4613      	mov	r3, r2
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	4413      	add	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	4ac6      	ldr	r2, [pc, #792]	; (80011a8 <udpClient_send+0x360>)
 8000e8e:	5cd3      	ldrb	r3, [r2, r3]
 8000e90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000e94:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000e98:	4613      	mov	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	3305      	adds	r3, #5
 8000ea2:	4ac1      	ldr	r2, [pc, #772]	; (80011a8 <udpClient_send+0x360>)
 8000ea4:	5cd3      	ldrb	r3, [r2, r3]
 8000ea6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000eaa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000eae:	4613      	mov	r3, r2
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	4413      	add	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	3306      	adds	r3, #6
 8000eb8:	4abb      	ldr	r2, [pc, #748]	; (80011a8 <udpClient_send+0x360>)
 8000eba:	5cd3      	ldrb	r3, [r2, r3]
 8000ebc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000ec0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	4413      	add	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	3307      	adds	r3, #7
 8000ece:	4ab6      	ldr	r2, [pc, #728]	; (80011a8 <udpClient_send+0x360>)
 8000ed0:	5cd3      	ldrb	r3, [r2, r3]
 8000ed2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000ed6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000eda:	4613      	mov	r3, r2
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	4413      	add	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	3308      	adds	r3, #8
 8000ee4:	4ab0      	ldr	r2, [pc, #704]	; (80011a8 <udpClient_send+0x360>)
 8000ee6:	5cd3      	ldrb	r3, [r2, r3]
 8000ee8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000eec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4413      	add	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	3309      	adds	r3, #9
 8000efa:	4aab      	ldr	r2, [pc, #684]	; (80011a8 <udpClient_send+0x360>)
 8000efc:	5cd3      	ldrb	r3, [r2, r3]
 8000efe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000f02:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000f06:	4613      	mov	r3, r2
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	4413      	add	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	330a      	adds	r3, #10
 8000f10:	4aa5      	ldr	r2, [pc, #660]	; (80011a8 <udpClient_send+0x360>)
 8000f12:	5cd3      	ldrb	r3, [r2, r3]
 8000f14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000f18:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4413      	add	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	330b      	adds	r3, #11
 8000f26:	4aa0      	ldr	r2, [pc, #640]	; (80011a8 <udpClient_send+0x360>)
 8000f28:	5cd3      	ldrb	r3, [r2, r3]
 8000f2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f32:	1c5a      	adds	r2, r3, #1
 8000f34:	4613      	mov	r3, r2
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	4413      	add	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b9a      	ldr	r3, [pc, #616]	; (80011a8 <udpClient_send+0x360>)
 8000f40:	5c9b      	ldrb	r3, [r3, r2]
 8000f42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000f46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4413      	add	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	330d      	adds	r3, #13
 8000f54:	4a94      	ldr	r2, [pc, #592]	; (80011a8 <udpClient_send+0x360>)
 8000f56:	5cd3      	ldrb	r3, [r2, r3]
 8000f58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000f5c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000f60:	4613      	mov	r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4413      	add	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	f203 43b5 	addw	r3, r3, #1205	; 0x4b5
 8000f6c:	4a8e      	ldr	r2, [pc, #568]	; (80011a8 <udpClient_send+0x360>)
 8000f6e:	5cd3      	ldrb	r3, [r2, r3]
 8000f70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000f74:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	f203 42b6 	addw	r2, r3, #1206	; 0x4b6
 8000f84:	4b88      	ldr	r3, [pc, #544]	; (80011a8 <udpClient_send+0x360>)
 8000f86:	5c9b      	ldrb	r3, [r3, r2]
 8000f88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000f8c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000f90:	4613      	mov	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4413      	add	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	f203 42b7 	addw	r2, r3, #1207	; 0x4b7
 8000f9c:	4b82      	ldr	r3, [pc, #520]	; (80011a8 <udpClient_send+0x360>)
 8000f9e:	5c9b      	ldrb	r3, [r3, r2]
 8000fa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000fa4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000fa8:	4613      	mov	r3, r2
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4413      	add	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	f503 6297 	add.w	r2, r3, #1208	; 0x4b8
 8000fb4:	4b7c      	ldr	r3, [pc, #496]	; (80011a8 <udpClient_send+0x360>)
 8000fb6:	5c9b      	ldrb	r3, [r3, r2]
 8000fb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000fbc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4413      	add	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	f203 42b9 	addw	r2, r3, #1209	; 0x4b9
 8000fcc:	4b76      	ldr	r3, [pc, #472]	; (80011a8 <udpClient_send+0x360>)
 8000fce:	5c9b      	ldrb	r3, [r3, r2]
 8000fd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000fd4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	f203 42ba 	addw	r2, r3, #1210	; 0x4ba
 8000fe4:	4b70      	ldr	r3, [pc, #448]	; (80011a8 <udpClient_send+0x360>)
 8000fe6:	5c9b      	ldrb	r3, [r3, r2]
 8000fe8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000fec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	f203 42bb 	addw	r2, r3, #1211	; 0x4bb
 8000ffc:	4b6a      	ldr	r3, [pc, #424]	; (80011a8 <udpClient_send+0x360>)
 8000ffe:	5c9b      	ldrb	r3, [r3, r2]
 8001000:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001004:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001008:	4613      	mov	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4413      	add	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	f203 42bc 	addw	r2, r3, #1212	; 0x4bc
 8001014:	4b64      	ldr	r3, [pc, #400]	; (80011a8 <udpClient_send+0x360>)
 8001016:	5c9b      	ldrb	r3, [r3, r2]
 8001018:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800101c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001020:	4613      	mov	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	4413      	add	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	f203 42bd 	addw	r2, r3, #1213	; 0x4bd
 800102c:	4b5e      	ldr	r3, [pc, #376]	; (80011a8 <udpClient_send+0x360>)
 800102e:	5c9b      	ldrb	r3, [r3, r2]
 8001030:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001034:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001038:	4613      	mov	r3, r2
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	4413      	add	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	f203 42be 	addw	r2, r3, #1214	; 0x4be
 8001044:	4b58      	ldr	r3, [pc, #352]	; (80011a8 <udpClient_send+0x360>)
 8001046:	5c9b      	ldrb	r3, [r3, r2]
 8001048:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800104c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001050:	4613      	mov	r3, r2
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	4413      	add	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	f203 42bf 	addw	r2, r3, #1215	; 0x4bf
 800105c:	4b52      	ldr	r3, [pc, #328]	; (80011a8 <udpClient_send+0x360>)
 800105e:	5c9b      	ldrb	r3, [r3, r2]
 8001060:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001062:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001066:	4613      	mov	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4413      	add	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 8001072:	4b4d      	ldr	r3, [pc, #308]	; (80011a8 <udpClient_send+0x360>)
 8001074:	5c9b      	ldrb	r3, [r3, r2]
 8001076:	67bb      	str	r3, [r7, #120]	; 0x78
 8001078:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800107c:	4613      	mov	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	f603 1268 	addw	r2, r3, #2408	; 0x968
 8001088:	4b47      	ldr	r3, [pc, #284]	; (80011a8 <udpClient_send+0x360>)
 800108a:	5c9b      	ldrb	r3, [r3, r2]
 800108c:	677b      	str	r3, [r7, #116]	; 0x74
 800108e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001092:	4613      	mov	r3, r2
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	4413      	add	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	f603 1269 	addw	r2, r3, #2409	; 0x969
 800109e:	4b42      	ldr	r3, [pc, #264]	; (80011a8 <udpClient_send+0x360>)
 80010a0:	5c9b      	ldrb	r3, [r3, r2]
 80010a2:	673b      	str	r3, [r7, #112]	; 0x70
 80010a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80010a8:	4613      	mov	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4413      	add	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	f603 126a 	addw	r2, r3, #2410	; 0x96a
 80010b4:	4b3c      	ldr	r3, [pc, #240]	; (80011a8 <udpClient_send+0x360>)
 80010b6:	5c9b      	ldrb	r3, [r3, r2]
 80010b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80010ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80010be:	4613      	mov	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	4413      	add	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	f603 126b 	addw	r2, r3, #2411	; 0x96b
 80010ca:	4b37      	ldr	r3, [pc, #220]	; (80011a8 <udpClient_send+0x360>)
 80010cc:	5c9b      	ldrb	r3, [r3, r2]
 80010ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80010d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80010d4:	4613      	mov	r3, r2
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	4413      	add	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	f603 126c 	addw	r2, r3, #2412	; 0x96c
 80010e0:	4b31      	ldr	r3, [pc, #196]	; (80011a8 <udpClient_send+0x360>)
 80010e2:	5c9b      	ldrb	r3, [r3, r2]
 80010e4:	667b      	str	r3, [r7, #100]	; 0x64
 80010e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80010ea:	4613      	mov	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4413      	add	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	f603 126d 	addw	r2, r3, #2413	; 0x96d
 80010f6:	4b2c      	ldr	r3, [pc, #176]	; (80011a8 <udpClient_send+0x360>)
 80010f8:	5c9b      	ldrb	r3, [r3, r2]
 80010fa:	663b      	str	r3, [r7, #96]	; 0x60
 80010fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001100:	4613      	mov	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	f603 126e 	addw	r2, r3, #2414	; 0x96e
 800110c:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <udpClient_send+0x360>)
 800110e:	5c9b      	ldrb	r3, [r3, r2]
 8001110:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001112:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001116:	4613      	mov	r3, r2
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4413      	add	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	f603 126f 	addw	r2, r3, #2415	; 0x96f
 8001122:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <udpClient_send+0x360>)
 8001124:	5c9b      	ldrb	r3, [r3, r2]
 8001126:	65bb      	str	r3, [r7, #88]	; 0x58
 8001128:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	f503 6217 	add.w	r2, r3, #2416	; 0x970
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <udpClient_send+0x360>)
 800113a:	5c9b      	ldrb	r3, [r3, r2]
 800113c:	657b      	str	r3, [r7, #84]	; 0x54
 800113e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001142:	4613      	mov	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4413      	add	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	f603 1271 	addw	r2, r3, #2417	; 0x971
 800114e:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <udpClient_send+0x360>)
 8001150:	5c9b      	ldrb	r3, [r3, r2]
 8001152:	653b      	str	r3, [r7, #80]	; 0x50
 8001154:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	f603 1272 	addw	r2, r3, #2418	; 0x972
 8001164:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <udpClient_send+0x360>)
 8001166:	5c9b      	ldrb	r3, [r3, r2]
 8001168:	64fb      	str	r3, [r7, #76]	; 0x4c
 800116a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800116e:	4613      	mov	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	4413      	add	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	f603 1273 	addw	r2, r3, #2419	; 0x973
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <udpClient_send+0x360>)
 800117c:	5c9b      	ldrb	r3, [r3, r2]
 800117e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001180:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001184:	4613      	mov	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	f603 621b 	addw	r2, r3, #3611	; 0xe1b
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <udpClient_send+0x360>)
 8001192:	5c9b      	ldrb	r3, [r3, r2]
 8001194:	647b      	str	r3, [r7, #68]	; 0x44
 8001196:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800119a:	4613      	mov	r3, r2
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	4413      	add	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	f603 621c 	addw	r2, r3, #3612	; 0xe1c
 80011a6:	e001      	b.n	80011ac <udpClient_send+0x364>
 80011a8:	20000090 	.word	0x20000090
 80011ac:	4bb5      	ldr	r3, [pc, #724]	; (8001484 <udpClient_send+0x63c>)
 80011ae:	5c9b      	ldrb	r3, [r3, r2]
 80011b0:	643b      	str	r3, [r7, #64]	; 0x40
 80011b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80011b6:	4613      	mov	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	f603 621d 	addw	r2, r3, #3613	; 0xe1d
 80011c2:	4bb0      	ldr	r3, [pc, #704]	; (8001484 <udpClient_send+0x63c>)
 80011c4:	5c9b      	ldrb	r3, [r3, r2]
 80011c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011c8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	f603 621e 	addw	r2, r3, #3614	; 0xe1e
 80011d8:	4baa      	ldr	r3, [pc, #680]	; (8001484 <udpClient_send+0x63c>)
 80011da:	5c9b      	ldrb	r3, [r3, r2]
 80011dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80011de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80011e2:	4613      	mov	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	f603 621f 	addw	r2, r3, #3615	; 0xe1f
 80011ee:	4ba5      	ldr	r3, [pc, #660]	; (8001484 <udpClient_send+0x63c>)
 80011f0:	5c9b      	ldrb	r3, [r3, r2]
 80011f2:	637b      	str	r3, [r7, #52]	; 0x34
 80011f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80011f8:	4613      	mov	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4413      	add	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	f503 6262 	add.w	r2, r3, #3616	; 0xe20
 8001204:	4b9f      	ldr	r3, [pc, #636]	; (8001484 <udpClient_send+0x63c>)
 8001206:	5c9b      	ldrb	r3, [r3, r2]
 8001208:	633b      	str	r3, [r7, #48]	; 0x30
 800120a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	f603 6221 	addw	r2, r3, #3617	; 0xe21
 800121a:	4b9a      	ldr	r3, [pc, #616]	; (8001484 <udpClient_send+0x63c>)
 800121c:	5c9b      	ldrb	r3, [r3, r2]
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001220:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001224:	4613      	mov	r3, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4413      	add	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	f603 6222 	addw	r2, r3, #3618	; 0xe22
 8001230:	4b94      	ldr	r3, [pc, #592]	; (8001484 <udpClient_send+0x63c>)
 8001232:	5c9b      	ldrb	r3, [r3, r2]
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
 8001236:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800123a:	4613      	mov	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	f603 6223 	addw	r2, r3, #3619	; 0xe23
 8001246:	4b8f      	ldr	r3, [pc, #572]	; (8001484 <udpClient_send+0x63c>)
 8001248:	5c9b      	ldrb	r3, [r3, r2]
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
 800124c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001250:	4613      	mov	r3, r2
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	4413      	add	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	f603 6224 	addw	r2, r3, #3620	; 0xe24
 800125c:	4b89      	ldr	r3, [pc, #548]	; (8001484 <udpClient_send+0x63c>)
 800125e:	5c9b      	ldrb	r3, [r3, r2]
 8001260:	623b      	str	r3, [r7, #32]
 8001262:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001266:	4613      	mov	r3, r2
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4413      	add	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	f603 6225 	addw	r2, r3, #3621	; 0xe25
 8001272:	4b84      	ldr	r3, [pc, #528]	; (8001484 <udpClient_send+0x63c>)
 8001274:	5c9b      	ldrb	r3, [r3, r2]
 8001276:	61fb      	str	r3, [r7, #28]
 8001278:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800127c:	4613      	mov	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4413      	add	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	f603 6226 	addw	r2, r3, #3622	; 0xe26
 8001288:	4b7e      	ldr	r3, [pc, #504]	; (8001484 <udpClient_send+0x63c>)
 800128a:	5c9b      	ldrb	r3, [r3, r2]
 800128c:	61bb      	str	r3, [r7, #24]
 800128e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001292:	4613      	mov	r3, r2
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	4413      	add	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	f241 22ce 	movw	r2, #4814	; 0x12ce
 800129e:	441a      	add	r2, r3
 80012a0:	4b78      	ldr	r3, [pc, #480]	; (8001484 <udpClient_send+0x63c>)
 80012a2:	5c9b      	ldrb	r3, [r3, r2]
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80012aa:	4613      	mov	r3, r2
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	4413      	add	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	f241 22cf 	movw	r2, #4815	; 0x12cf
 80012b6:	441a      	add	r2, r3
 80012b8:	4b72      	ldr	r3, [pc, #456]	; (8001484 <udpClient_send+0x63c>)
 80012ba:	5c9b      	ldrb	r3, [r3, r2]
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80012c2:	4613      	mov	r3, r2
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	f241 22d0 	movw	r2, #4816	; 0x12d0
 80012ce:	441a      	add	r2, r3
 80012d0:	4b6c      	ldr	r3, [pc, #432]	; (8001484 <udpClient_send+0x63c>)
 80012d2:	5c9b      	ldrb	r3, [r3, r2]
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	f241 22d1 	movw	r2, #4817	; 0x12d1
 80012e6:	441a      	add	r2, r3
 80012e8:	4b66      	ldr	r3, [pc, #408]	; (8001484 <udpClient_send+0x63c>)
 80012ea:	5c9b      	ldrb	r3, [r3, r2]
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80012f2:	4613      	mov	r3, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	4413      	add	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	f241 22d2 	movw	r2, #4818	; 0x12d2
 80012fe:	441a      	add	r2, r3
 8001300:	4b60      	ldr	r3, [pc, #384]	; (8001484 <udpClient_send+0x63c>)
 8001302:	5c9b      	ldrb	r3, [r3, r2]
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800130a:	4613      	mov	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4413      	add	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	f241 22d3 	movw	r2, #4819	; 0x12d3
 8001316:	441a      	add	r2, r3
 8001318:	4b5a      	ldr	r3, [pc, #360]	; (8001484 <udpClient_send+0x63c>)
 800131a:	5c9b      	ldrb	r3, [r3, r2]
 800131c:	603b      	str	r3, [r7, #0]
 800131e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001322:	4613      	mov	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4413      	add	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	f241 22d4 	movw	r2, #4820	; 0x12d4
 800132e:	441a      	add	r2, r3
 8001330:	4b54      	ldr	r3, [pc, #336]	; (8001484 <udpClient_send+0x63c>)
 8001332:	5c9b      	ldrb	r3, [r3, r2]
 8001334:	461e      	mov	r6, r3
 8001336:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800133a:	4613      	mov	r3, r2
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	4413      	add	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	f241 22d5 	movw	r2, #4821	; 0x12d5
 8001346:	441a      	add	r2, r3
 8001348:	4b4e      	ldr	r3, [pc, #312]	; (8001484 <udpClient_send+0x63c>)
 800134a:	5c9b      	ldrb	r3, [r3, r2]
 800134c:	461d      	mov	r5, r3
 800134e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001352:	4613      	mov	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	f241 22d6 	movw	r2, #4822	; 0x12d6
 800135e:	441a      	add	r2, r3
 8001360:	4b48      	ldr	r3, [pc, #288]	; (8001484 <udpClient_send+0x63c>)
 8001362:	5c9b      	ldrb	r3, [r3, r2]
 8001364:	461c      	mov	r4, r3
 8001366:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800136a:	4613      	mov	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	f241 22d7 	movw	r2, #4823	; 0x12d7
 8001376:	441a      	add	r2, r3
 8001378:	4b42      	ldr	r3, [pc, #264]	; (8001484 <udpClient_send+0x63c>)
 800137a:	5c9b      	ldrb	r3, [r3, r2]
 800137c:	4618      	mov	r0, r3
 800137e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001382:	4613      	mov	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4413      	add	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	f241 22d8 	movw	r2, #4824	; 0x12d8
 800138e:	441a      	add	r2, r3
 8001390:	4b3c      	ldr	r3, [pc, #240]	; (8001484 <udpClient_send+0x63c>)
 8001392:	5c9b      	ldrb	r3, [r3, r2]
 8001394:	4619      	mov	r1, r3
 8001396:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800139a:	4613      	mov	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4413      	add	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	f241 22d9 	movw	r2, #4825	; 0x12d9
 80013a6:	441a      	add	r2, r3
 80013a8:	4b36      	ldr	r3, [pc, #216]	; (8001484 <udpClient_send+0x63c>)
 80013aa:	5c9b      	ldrb	r3, [r3, r2]
 80013ac:	9339      	str	r3, [sp, #228]	; 0xe4
 80013ae:	9138      	str	r1, [sp, #224]	; 0xe0
 80013b0:	9037      	str	r0, [sp, #220]	; 0xdc
 80013b2:	9436      	str	r4, [sp, #216]	; 0xd8
 80013b4:	9535      	str	r5, [sp, #212]	; 0xd4
 80013b6:	9634      	str	r6, [sp, #208]	; 0xd0
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	9233      	str	r2, [sp, #204]	; 0xcc
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	9232      	str	r2, [sp, #200]	; 0xc8
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	9231      	str	r2, [sp, #196]	; 0xc4
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	9230      	str	r2, [sp, #192]	; 0xc0
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	922f      	str	r2, [sp, #188]	; 0xbc
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	922e      	str	r2, [sp, #184]	; 0xb8
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	922d      	str	r2, [sp, #180]	; 0xb4
 80013d4:	69fa      	ldr	r2, [r7, #28]
 80013d6:	922c      	str	r2, [sp, #176]	; 0xb0
 80013d8:	6a3a      	ldr	r2, [r7, #32]
 80013da:	922b      	str	r2, [sp, #172]	; 0xac
 80013dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013de:	922a      	str	r2, [sp, #168]	; 0xa8
 80013e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013e2:	9229      	str	r2, [sp, #164]	; 0xa4
 80013e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013e6:	9228      	str	r2, [sp, #160]	; 0xa0
 80013e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013ea:	9227      	str	r2, [sp, #156]	; 0x9c
 80013ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013ee:	9226      	str	r2, [sp, #152]	; 0x98
 80013f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80013f2:	9225      	str	r2, [sp, #148]	; 0x94
 80013f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013f6:	9224      	str	r2, [sp, #144]	; 0x90
 80013f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80013fa:	9223      	str	r2, [sp, #140]	; 0x8c
 80013fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013fe:	9222      	str	r2, [sp, #136]	; 0x88
 8001400:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001402:	9221      	str	r2, [sp, #132]	; 0x84
 8001404:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001406:	9220      	str	r2, [sp, #128]	; 0x80
 8001408:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800140a:	921f      	str	r2, [sp, #124]	; 0x7c
 800140c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800140e:	921e      	str	r2, [sp, #120]	; 0x78
 8001410:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001412:	921d      	str	r2, [sp, #116]	; 0x74
 8001414:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001416:	921c      	str	r2, [sp, #112]	; 0x70
 8001418:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800141a:	921b      	str	r2, [sp, #108]	; 0x6c
 800141c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800141e:	921a      	str	r2, [sp, #104]	; 0x68
 8001420:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001422:	9219      	str	r2, [sp, #100]	; 0x64
 8001424:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001426:	9218      	str	r2, [sp, #96]	; 0x60
 8001428:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800142a:	9217      	str	r2, [sp, #92]	; 0x5c
 800142c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800142e:	9216      	str	r2, [sp, #88]	; 0x58
 8001430:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001432:	9215      	str	r2, [sp, #84]	; 0x54
 8001434:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001436:	9214      	str	r2, [sp, #80]	; 0x50
 8001438:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800143c:	9213      	str	r2, [sp, #76]	; 0x4c
 800143e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001442:	9212      	str	r2, [sp, #72]	; 0x48
 8001444:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001448:	9211      	str	r2, [sp, #68]	; 0x44
 800144a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800144e:	9210      	str	r2, [sp, #64]	; 0x40
 8001450:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001454:	920f      	str	r2, [sp, #60]	; 0x3c
 8001456:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800145a:	920e      	str	r2, [sp, #56]	; 0x38
 800145c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001460:	920d      	str	r2, [sp, #52]	; 0x34
 8001462:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001466:	920c      	str	r2, [sp, #48]	; 0x30
 8001468:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800146c:	920b      	str	r2, [sp, #44]	; 0x2c
 800146e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001472:	920a      	str	r2, [sp, #40]	; 0x28
 8001474:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001478:	9209      	str	r2, [sp, #36]	; 0x24
 800147a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800147e:	9208      	str	r2, [sp, #32]
 8001480:	e002      	b.n	8001488 <udpClient_send+0x640>
 8001482:	bf00      	nop
 8001484:	20000090 	.word	0x20000090
 8001488:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800148c:	9207      	str	r2, [sp, #28]
 800148e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001492:	9206      	str	r2, [sp, #24]
 8001494:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001498:	9205      	str	r2, [sp, #20]
 800149a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800149e:	9204      	str	r2, [sp, #16]
 80014a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80014a4:	9203      	str	r2, [sp, #12]
 80014a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80014aa:	9202      	str	r2, [sp, #8]
 80014ac:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80014b0:	9201      	str	r2, [sp, #4]
 80014b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	4673      	mov	r3, lr
 80014ba:	4662      	mov	r2, ip
 80014bc:	491b      	ldr	r1, [pc, #108]	; (800152c <udpClient_send+0x6e4>)
 80014be:	481c      	ldr	r0, [pc, #112]	; (8001530 <udpClient_send+0x6e8>)
 80014c0:	f00f ffb0 	bl	8011424 <siprintf>
 80014c4:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
	  //int len = sprintf(data,"* %u %u %u %u %u %u %u %u %u %u %u %u %u !",result_data[4813],result_data[4814+12*i],result_data[4815+12*i],result_data[4816+12*i],result_data[4817+12*i],result_data[4818+12*i],result_data[4819+12*i],result_data[4820+12*i],result_data[4821+12*i],result_data[4822+12*i],result_data[4823+12*i],result_data[4824+12*i],result_data[4825+12*i]);
	  txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 80014c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80014d2:	4619      	mov	r1, r3
 80014d4:	2036      	movs	r0, #54	; 0x36
 80014d6:	f006 fe81 	bl	80081dc <pbuf_alloc>
 80014da:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	  if (txBuf != NULL)
 80014de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d013      	beq.n	800150e <udpClient_send+0x6c6>
	  	 {
		  /* copy data to pbuf */
		  pbuf_take(txBuf, data,len);
 80014e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	461a      	mov	r2, r3
 80014ee:	4910      	ldr	r1, [pc, #64]	; (8001530 <udpClient_send+0x6e8>)
 80014f0:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80014f4:	f007 fbc2 	bl	8008c7c <pbuf_take>

		  /* send udp data */
		  udp_send(upcb, txBuf);
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <udpClient_send+0x6ec>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8001500:	4618      	mov	r0, r3
 8001502:	f00d f8e7 	bl	800e6d4 <udp_send>

		  /* free pbuf */
		 pbuf_free(txBuf);
 8001506:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800150a:	f007 f94b 	bl	80087a4 <pbuf_free>
  for(int i=0;i<100;i++) {
 800150e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001512:	3301      	adds	r3, #1
 8001514:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800151c:	2b63      	cmp	r3, #99	; 0x63
 800151e:	f77f ac9a 	ble.w	8000e56 <udpClient_send+0xe>
	  	  }
  }


}
 8001522:	bf00      	nop
 8001524:	bf00      	nop
 8001526:	37e4      	adds	r7, #228	; 0xe4
 8001528:	46bd      	mov	sp, r7
 800152a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800152c:	08012798 	.word	0x08012798
 8001530:	200018ec 	.word	0x200018ec
 8001534:	200018e8 	.word	0x200018e8

08001538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001538:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001570 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800153c:	480d      	ldr	r0, [pc, #52]	; (8001574 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800153e:	490e      	ldr	r1, [pc, #56]	; (8001578 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001540:	4a0e      	ldr	r2, [pc, #56]	; (800157c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001544:	e002      	b.n	800154c <LoopCopyDataInit>

08001546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154a:	3304      	adds	r3, #4

0800154c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800154c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001550:	d3f9      	bcc.n	8001546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001552:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001554:	4c0b      	ldr	r4, [pc, #44]	; (8001584 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001558:	e001      	b.n	800155e <LoopFillZerobss>

0800155a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800155c:	3204      	adds	r2, #4

0800155e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001560:	d3fb      	bcc.n	800155a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001562:	f7ff fc1d 	bl	8000da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001566:	f00f fea3 	bl	80112b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800156a:	f7ff f885 	bl	8000678 <main>
  bx  lr    
 800156e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001570:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001578:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800157c:	080154a4 	.word	0x080154a4
  ldr r2, =_sbss
 8001580:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001584:	2000bd98 	.word	0x2000bd98

08001588 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001588:	e7fe      	b.n	8001588 <ADC_IRQHandler>

0800158a <LAN8742_RegisterBusIO>:
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
  {
    return LAN8742_STATUS_ERROR;
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]
  }
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00b      	beq.n	80015b2 <LAN8742_RegisterBusIO+0x28>
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d007      	beq.n	80015b2 <LAN8742_RegisterBusIO+0x28>
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <LAN8742_RegisterBusIO+0x28>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <LAN8742_RegisterBusIO+0x2e>

  pObj->IO.Init = ioctx->Init;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	e014      	b.n	80015e2 <LAN8742_RegisterBusIO+0x58>
  pObj->IO.DeInit = ioctx->DeInit;
  pObj->IO.ReadReg = ioctx->ReadReg;
  pObj->IO.WriteReg = ioctx->WriteReg;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	609a      	str	r2, [r3, #8]
  pObj->IO.GetTick = ioctx->GetTick;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	60da      	str	r2, [r3, #12]

 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	615a      	str	r2, [r3, #20]
  return LAN8742_STATUS_OK;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	611a      	str	r2, [r3, #16]
}
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	691a      	ldr	r2, [r3, #16]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	619a      	str	r2, [r3, #24]

/**
 80015e0:	2300      	movs	r3, #0
  * @brief  Initialize the lan8742 and configure the needed hardware resources
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <LAN8742_Init>:
 {
   uint32_t regvalue = 0, addr = 0;
   int32_t status = LAN8742_STATUS_OK;

   if(pObj->Is_Initialized == 0)
   {
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
     if(pObj->IO.Init != 0)
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
     {
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d17c      	bne.n	8001708 <LAN8742_Init+0x11a>
     }

 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d002      	beq.n	800161c <LAN8742_Init+0x2e>
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;

 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	4798      	blx	r3
     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2220      	movs	r2, #32
 8001620:	601a      	str	r2, [r3, #0]
       {
         status = LAN8742_STATUS_READ_ERROR;
         /* Can't read from this device address
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	e01c      	b.n	8001662 <LAN8742_Init+0x74>
            continue with next address */
         continue;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	695b      	ldr	r3, [r3, #20]
 800162c:	f107 0208 	add.w	r2, r7, #8
 8001630:	2112      	movs	r1, #18
 8001632:	6978      	ldr	r0, [r7, #20]
 8001634:	4798      	blx	r3
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	da03      	bge.n	8001644 <LAN8742_Init+0x56>
       }

 800163c:	f06f 0304 	mvn.w	r3, #4
 8001640:	613b      	str	r3, [r7, #16]
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
       {
         pObj->DevAddr = addr;
 8001642:	e00b      	b.n	800165c <LAN8742_Init+0x6e>
         status = LAN8742_STATUS_OK;
         break;
       }
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	f003 031f 	and.w	r3, r3, #31
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	429a      	cmp	r2, r3
 800164e:	d105      	bne.n	800165c <LAN8742_Init+0x6e>
     }

 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	601a      	str	r2, [r3, #0]
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
     {
 800165a:	e005      	b.n	8001668 <LAN8742_Init+0x7a>
         /* Can't read from this device address
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	3301      	adds	r3, #1
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	2b1f      	cmp	r3, #31
 8001666:	d9df      	bls.n	8001628 <LAN8742_Init+0x3a>
       status = LAN8742_STATUS_ADDRESS_ERROR;
     }

     /* if device address is matched */
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b1f      	cmp	r3, #31
 800166e:	d902      	bls.n	8001676 <LAN8742_Init+0x88>
     if(status == LAN8742_STATUS_OK)
     {
 8001670:	f06f 0302 	mvn.w	r3, #2
 8001674:	613b      	str	r3, [r7, #16]
       pObj->Is_Initialized = 1;
     }
   }

 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d145      	bne.n	8001708 <LAN8742_Init+0x11a>
   return status;
 }

 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6810      	ldr	r0, [r2, #0]
 8001684:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001688:	2100      	movs	r1, #0
 800168a:	4798      	blx	r3
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	db37      	blt.n	8001702 <LAN8742_Init+0x114>
/**
  * @brief  De-Initialize the lan8742 and it's hardware resources
  * @param  pObj: device object LAN8742_Object_t.
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6810      	ldr	r0, [r2, #0]
 800169a:	f107 0208 	add.w	r2, r7, #8
 800169e:	2100      	movs	r1, #0
 80016a0:	4798      	blx	r3
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	db28      	blt.n	80016fa <LAN8742_Init+0x10c>
  * @retval None
  */
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	4798      	blx	r3
 80016ae:	4603      	mov	r3, r0
 80016b0:	60fb      	str	r3, [r7, #12]
int32_t LAN8742_DeInit(lan8742_Object_t *pObj)
{
  if(pObj->Is_Initialized)
 80016b2:	e01c      	b.n	80016ee <LAN8742_Init+0x100>
  {
    if(pObj->IO.DeInit != 0)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	4798      	blx	r3
 80016ba:	4603      	mov	r3, r0
 80016bc:	461a      	mov	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016c6:	d80e      	bhi.n	80016e6 <LAN8742_Init+0xf8>
    {
      if(pObj->IO.DeInit() < 0)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6810      	ldr	r0, [r2, #0]
 80016d0:	f107 0208 	add.w	r2, r7, #8
 80016d4:	2100      	movs	r1, #0
 80016d6:	4798      	blx	r3
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	da07      	bge.n	80016ee <LAN8742_Init+0x100>
      {
        return LAN8742_STATUS_ERROR;
 80016de:	f06f 0304 	mvn.w	r3, #4
 80016e2:	613b      	str	r3, [r7, #16]
      }
 80016e4:	e010      	b.n	8001708 <LAN8742_Init+0x11a>
    }

    pObj->Is_Initialized = 0;
  }

 80016e6:	f06f 0301 	mvn.w	r3, #1
 80016ea:	613b      	str	r3, [r7, #16]
  return LAN8742_STATUS_OK;
 80016ec:	e00c      	b.n	8001708 <LAN8742_Init+0x11a>
  if(pObj->Is_Initialized)
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1dd      	bne.n	80016b4 <LAN8742_Init+0xc6>
 80016f8:	e006      	b.n	8001708 <LAN8742_Init+0x11a>
}

/**
  * @brief  Disable the LAN8742 power down mode.
  * @param  pObj: device object LAN8742_Object_t.
  * @retval LAN8742_STATUS_OK  if OK
 80016fa:	f06f 0304 	mvn.w	r3, #4
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	e002      	b.n	8001708 <LAN8742_Init+0x11a>
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_DisablePowerDownMode(lan8742_Object_t *pObj)
{
 8001702:	f06f 0303 	mvn.w	r3, #3
 8001706:	613b      	str	r3, [r7, #16]
  uint32_t readval = 0;
  int32_t status = LAN8742_STATUS_OK;

  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) >= 0)
  {
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d112      	bne.n	8001734 <LAN8742_Init+0x146>
    readval &= ~LAN8742_BCR_POWER_DOWN;

 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	4798      	blx	r3
 8001714:	4603      	mov	r3, r0
 8001716:	60fb      	str	r3, [r7, #12]
    /* Apply configuration */
    if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, readval) < 0)
    {
 8001718:	bf00      	nop
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	4798      	blx	r3
 8001720:	4603      	mov	r3, r0
 8001722:	461a      	mov	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800172c:	d9f5      	bls.n	800171a <LAN8742_Init+0x12c>
      status =  LAN8742_STATUS_WRITE_ERROR;
    }
  }
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	605a      	str	r2, [r3, #4]
  else
  {
    status = LAN8742_STATUS_READ_ERROR;
 8001734:	693b      	ldr	r3, [r7, #16]
  }
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <LAN8742_GetLinkState>:
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
    {
      return LAN8742_STATUS_READ_ERROR;
 800173e:	b580      	push	{r7, lr}
 8001740:	b084      	sub	sp, #16
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
    }
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6810      	ldr	r0, [r2, #0]
 8001752:	f107 020c 	add.w	r2, r7, #12
 8001756:	2101      	movs	r1, #1
 8001758:	4798      	blx	r3
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	da02      	bge.n	8001766 <LAN8742_GetLinkState+0x28>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001760:	f06f 0304 	mvn.w	r3, #4
 8001764:	e06e      	b.n	8001844 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
    {
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6810      	ldr	r0, [r2, #0]
 800176e:	f107 020c 	add.w	r2, r7, #12
 8001772:	2101      	movs	r1, #1
 8001774:	4798      	blx	r3
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	da02      	bge.n	8001782 <LAN8742_GetLinkState+0x44>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
 800177c:	f06f 0304 	mvn.w	r3, #4
 8001780:	e060      	b.n	8001844 <LAN8742_GetLinkState+0x106>
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <LAN8742_GetLinkState+0x52>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
    {
 800178c:	2301      	movs	r3, #1
 800178e:	e059      	b.n	8001844 <LAN8742_GetLinkState+0x106>
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
    }
    else
    {
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6810      	ldr	r0, [r2, #0]
 8001798:	f107 020c 	add.w	r2, r7, #12
 800179c:	2100      	movs	r1, #0
 800179e:	4798      	blx	r3
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	da02      	bge.n	80017ac <LAN8742_GetLinkState+0x6e>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }
 80017a6:	f06f 0304 	mvn.w	r3, #4
 80017aa:	e04b      	b.n	8001844 <LAN8742_GetLinkState+0x106>
  }
}

 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d11b      	bne.n	80017ee <LAN8742_GetLinkState+0xb0>
/**
  * @brief  Set the link state of LAN8742 device.
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d006      	beq.n	80017ce <LAN8742_GetLinkState+0x90>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <LAN8742_GetLinkState+0x90>
  * @param  pObj: Pointer to device object.
  * @param  pLinkState: link state can be one of the following
 80017ca:	2302      	movs	r3, #2
 80017cc:	e03a      	b.n	8001844 <LAN8742_GetLinkState+0x106>
  *         LAN8742_STATUS_100MBITS_FULLDUPLEX if 100Mb/s FD
  *         LAN8742_STATUS_100MBITS_HALFDUPLEX if 100Mb/s HD
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <LAN8742_GetLinkState+0x9e>
  *         LAN8742_STATUS_10MBITS_FULLDUPLEX  if 10Mb/s FD
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
 80017d8:	2303      	movs	r3, #3
 80017da:	e033      	b.n	8001844 <LAN8742_GetLinkState+0x106>
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR  if parameter error
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <LAN8742_GetLinkState+0xac>
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
 80017e6:	2304      	movs	r3, #4
 80017e8:	e02c      	b.n	8001844 <LAN8742_GetLinkState+0x106>
  */
int32_t LAN8742_SetLinkState(lan8742_Object_t *pObj, uint32_t LinkState)
{
  uint32_t bcrvalue = 0;
 80017ea:	2305      	movs	r3, #5
 80017ec:	e02a      	b.n	8001844 <LAN8742_GetLinkState+0x106>
  int32_t status = LAN8742_STATUS_OK;

  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &bcrvalue) >= 0)
  {
    /* Disable link config (Auto nego, speed and duplex) */
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6810      	ldr	r0, [r2, #0]
 80017f6:	f107 020c 	add.w	r2, r7, #12
 80017fa:	211f      	movs	r1, #31
 80017fc:	4798      	blx	r3
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	da02      	bge.n	800180a <LAN8742_GetLinkState+0xcc>
    bcrvalue &= ~(LAN8742_BCR_AUTONEGO_EN | LAN8742_BCR_SPEED_SELECT | LAN8742_BCR_DUPLEX_MODE);

 8001804:	f06f 0304 	mvn.w	r3, #4
 8001808:	e01c      	b.n	8001844 <LAN8742_GetLinkState+0x106>
    if(LinkState == LAN8742_STATUS_100MBITS_FULLDUPLEX)
    {
      bcrvalue |= (LAN8742_BCR_SPEED_SELECT | LAN8742_BCR_DUPLEX_MODE);
    }
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <LAN8742_GetLinkState+0xda>
    else if (LinkState == LAN8742_STATUS_100MBITS_HALFDUPLEX)
    {
 8001814:	2306      	movs	r3, #6
 8001816:	e015      	b.n	8001844 <LAN8742_GetLinkState+0x106>
      bcrvalue |= LAN8742_BCR_SPEED_SELECT;
    }
    else if (LinkState == LAN8742_STATUS_10MBITS_FULLDUPLEX)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 031c 	and.w	r3, r3, #28
 800181e:	2b18      	cmp	r3, #24
 8001820:	d101      	bne.n	8001826 <LAN8742_GetLinkState+0xe8>
    {
      bcrvalue |= LAN8742_BCR_DUPLEX_MODE;
 8001822:	2302      	movs	r3, #2
 8001824:	e00e      	b.n	8001844 <LAN8742_GetLinkState+0x106>
    }
    else
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f003 031c 	and.w	r3, r3, #28
 800182c:	2b08      	cmp	r3, #8
 800182e:	d101      	bne.n	8001834 <LAN8742_GetLinkState+0xf6>
    {
      /* Wrong link status parameter */
 8001830:	2303      	movs	r3, #3
 8001832:	e007      	b.n	8001844 <LAN8742_GetLinkState+0x106>
      status = LAN8742_STATUS_ERROR;
    }
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 031c 	and.w	r3, r3, #28
 800183a:	2b14      	cmp	r3, #20
 800183c:	d101      	bne.n	8001842 <LAN8742_GetLinkState+0x104>
  }
  else
 800183e:	2304      	movs	r3, #4
 8001840:	e000      	b.n	8001844 <LAN8742_GetLinkState+0x106>
  {
    status = LAN8742_STATUS_READ_ERROR;
  }

 8001842:	2305      	movs	r3, #5
  if(status == LAN8742_STATUS_OK)
  {
    /* Apply configuration */
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <HAL_Init+0x28>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a07      	ldr	r2, [pc, #28]	; (8001874 <HAL_Init+0x28>)
 8001856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800185c:	2003      	movs	r0, #3
 800185e:	f000 f94f 	bl	8001b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001862:	200f      	movs	r0, #15
 8001864:	f000 f808 	bl	8001878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001868:	f7ff f8d8 	bl	8000a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023c00 	.word	0x40023c00

08001878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_InitTick+0x54>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_InitTick+0x58>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4619      	mov	r1, r3
 800188a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001892:	fbb2 f3f3 	udiv	r3, r2, r3
 8001896:	4618      	mov	r0, r3
 8001898:	f000 f967 	bl	8001b6a <HAL_SYSTICK_Config>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e00e      	b.n	80018c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b0f      	cmp	r3, #15
 80018aa:	d80a      	bhi.n	80018c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ac:	2200      	movs	r2, #0
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	f000 f92f 	bl	8001b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b8:	4a06      	ldr	r2, [pc, #24]	; (80018d4 <HAL_InitTick+0x5c>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	e000      	b.n	80018c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000000 	.word	0x20000000
 80018d0:	20000008 	.word	0x20000008
 80018d4:	20000004 	.word	0x20000004

080018d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_IncTick+0x20>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_IncTick+0x24>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	4a04      	ldr	r2, [pc, #16]	; (80018fc <HAL_IncTick+0x24>)
 80018ea:	6013      	str	r3, [r2, #0]
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000008 	.word	0x20000008
 80018fc:	20001a18 	.word	0x20001a18

08001900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return uwTick;
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <HAL_GetTick+0x14>)
 8001906:	681b      	ldr	r3, [r3, #0]
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	20001a18 	.word	0x20001a18

08001918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001920:	f7ff ffee 	bl	8001900 <HAL_GetTick>
 8001924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001930:	d005      	beq.n	800193e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <HAL_Delay+0x44>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4413      	add	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800193e:	bf00      	nop
 8001940:	f7ff ffde 	bl	8001900 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	429a      	cmp	r2, r3
 800194e:	d8f7      	bhi.n	8001940 <HAL_Delay+0x28>
  {
  }
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000008 	.word	0x20000008

08001960 <__NVIC_SetPriorityGrouping>:
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800197c:	4013      	ands	r3, r2
 800197e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 800198a:	4313      	orrs	r3, r2
 800198c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198e:	4a04      	ldr	r2, [pc, #16]	; (80019a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	60d3      	str	r3, [r2, #12]
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00
 80019a4:	05fa0000 	.word	0x05fa0000

080019a8 <__NVIC_GetPriorityGrouping>:
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ac:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <__NVIC_GetPriorityGrouping+0x18>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	0a1b      	lsrs	r3, r3, #8
 80019b2:	f003 0307 	and.w	r3, r3, #7
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_EnableIRQ>:
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	db0b      	blt.n	80019ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	f003 021f 	and.w	r2, r3, #31
 80019dc:	4907      	ldr	r1, [pc, #28]	; (80019fc <__NVIC_EnableIRQ+0x38>)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	095b      	lsrs	r3, r3, #5
 80019e4:	2001      	movs	r0, #1
 80019e6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000e100 	.word	0xe000e100

08001a00 <__NVIC_SetPriority>:
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	6039      	str	r1, [r7, #0]
 8001a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	db0a      	blt.n	8001a2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	490c      	ldr	r1, [pc, #48]	; (8001a4c <__NVIC_SetPriority+0x4c>)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	0112      	lsls	r2, r2, #4
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	440b      	add	r3, r1
 8001a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a28:	e00a      	b.n	8001a40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4908      	ldr	r1, [pc, #32]	; (8001a50 <__NVIC_SetPriority+0x50>)
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	3b04      	subs	r3, #4
 8001a38:	0112      	lsls	r2, r2, #4
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	761a      	strb	r2, [r3, #24]
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000e100 	.word	0xe000e100
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <NVIC_EncodePriority>:
{
 8001a54:	b480      	push	{r7}
 8001a56:	b089      	sub	sp, #36	; 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f1c3 0307 	rsb	r3, r3, #7
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	bf28      	it	cs
 8001a72:	2304      	movcs	r3, #4
 8001a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	2b06      	cmp	r3, #6
 8001a7c:	d902      	bls.n	8001a84 <NVIC_EncodePriority+0x30>
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3b03      	subs	r3, #3
 8001a82:	e000      	b.n	8001a86 <NVIC_EncodePriority+0x32>
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	f04f 32ff 	mov.w	r2, #4294967295
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43da      	mvns	r2, r3
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	401a      	ands	r2, r3
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	43d9      	mvns	r1, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	4313      	orrs	r3, r2
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3724      	adds	r7, #36	; 0x24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001acc:	d301      	bcc.n	8001ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e00f      	b.n	8001af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <SysTick_Config+0x40>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ada:	210f      	movs	r1, #15
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae0:	f7ff ff8e 	bl	8001a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <SysTick_Config+0x40>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aea:	4b04      	ldr	r3, [pc, #16]	; (8001afc <SysTick_Config+0x40>)
 8001aec:	2207      	movs	r2, #7
 8001aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	e000e010 	.word	0xe000e010

08001b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ff29 	bl	8001960 <__NVIC_SetPriorityGrouping>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b086      	sub	sp, #24
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b28:	f7ff ff3e 	bl	80019a8 <__NVIC_GetPriorityGrouping>
 8001b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	6978      	ldr	r0, [r7, #20]
 8001b34:	f7ff ff8e 	bl	8001a54 <NVIC_EncodePriority>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3e:	4611      	mov	r1, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff5d 	bl	8001a00 <__NVIC_SetPriority>
}
 8001b46:	bf00      	nop
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff31 	bl	80019c4 <__NVIC_EnableIRQ>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ffa2 	bl	8001abc <SysTick_Config>
 8001b78:	4603      	mov	r3, r0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001b88:	f3bf 8f5f 	dmb	sy
}
 8001b8c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <HAL_MPU_Disable+0x28>)
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	4a06      	ldr	r2, [pc, #24]	; (8001bac <HAL_MPU_Disable+0x28>)
 8001b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b98:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001b9a:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <HAL_MPU_Disable+0x2c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	605a      	str	r2, [r3, #4]
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000ed00 	.word	0xe000ed00
 8001bb0:	e000ed90 	.word	0xe000ed90

08001bb4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001bbc:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <HAL_MPU_Enable+0x38>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <HAL_MPU_Enable+0x3c>)
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	4a09      	ldr	r2, [pc, #36]	; (8001bf0 <HAL_MPU_Enable+0x3c>)
 8001bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001bd2:	f3bf 8f4f 	dsb	sy
}
 8001bd6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bd8:	f3bf 8f6f 	isb	sy
}
 8001bdc:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000ed90 	.word	0xe000ed90
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	785a      	ldrb	r2, [r3, #1]
 8001c00:	4b1b      	ldr	r3, [pc, #108]	; (8001c70 <HAL_MPU_ConfigRegion+0x7c>)
 8001c02:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001c04:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <HAL_MPU_ConfigRegion+0x7c>)
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	4a19      	ldr	r2, [pc, #100]	; (8001c70 <HAL_MPU_ConfigRegion+0x7c>)
 8001c0a:	f023 0301 	bic.w	r3, r3, #1
 8001c0e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001c10:	4a17      	ldr	r2, [pc, #92]	; (8001c70 <HAL_MPU_ConfigRegion+0x7c>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	7b1b      	ldrb	r3, [r3, #12]
 8001c1c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	7adb      	ldrb	r3, [r3, #11]
 8001c22:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	7a9b      	ldrb	r3, [r3, #10]
 8001c2a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	7b5b      	ldrb	r3, [r3, #13]
 8001c32:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	7b9b      	ldrb	r3, [r3, #14]
 8001c3a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	7bdb      	ldrb	r3, [r3, #15]
 8001c42:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	7a5b      	ldrb	r3, [r3, #9]
 8001c4a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	7a1b      	ldrb	r3, [r3, #8]
 8001c52:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001c54:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	7812      	ldrb	r2, [r2, #0]
 8001c5a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c5c:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c5e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c60:	6113      	str	r3, [r2, #16]
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000ed90 	.word	0xe000ed90

08001c74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c80:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c82:	f7ff fe3d 	bl	8001900 <HAL_GetTick>
 8001c86:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d008      	beq.n	8001ca6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2280      	movs	r2, #128	; 0x80
 8001c98:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e052      	b.n	8001d4c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0216 	bic.w	r2, r2, #22
 8001cb4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695a      	ldr	r2, [r3, #20]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cc4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d103      	bne.n	8001cd6 <HAL_DMA_Abort+0x62>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d007      	beq.n	8001ce6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0208 	bic.w	r2, r2, #8
 8001ce4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0201 	bic.w	r2, r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cf6:	e013      	b.n	8001d20 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cf8:	f7ff fe02 	bl	8001900 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b05      	cmp	r3, #5
 8001d04:	d90c      	bls.n	8001d20 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2220      	movs	r2, #32
 8001d0a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2203      	movs	r2, #3
 8001d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e015      	b.n	8001d4c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1e4      	bne.n	8001cf8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d32:	223f      	movs	r2, #63	; 0x3f
 8001d34:	409a      	lsls	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d004      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2280      	movs	r2, #128	; 0x80
 8001d6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e00c      	b.n	8001d8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2205      	movs	r2, #5
 8001d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0201 	bic.w	r2, r2, #1
 8001d88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e086      	b.n	8001eb8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d106      	bne.n	8001dc2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2223      	movs	r2, #35	; 0x23
 8001db8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f004 ff87 	bl	8006cd0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc2:	4b3f      	ldr	r3, [pc, #252]	; (8001ec0 <HAL_ETH_Init+0x128>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	4a3e      	ldr	r2, [pc, #248]	; (8001ec0 <HAL_ETH_Init+0x128>)
 8001dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dce:	4b3c      	ldr	r3, [pc, #240]	; (8001ec0 <HAL_ETH_Init+0x128>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001dda:	4b3a      	ldr	r3, [pc, #232]	; (8001ec4 <HAL_ETH_Init+0x12c>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4a39      	ldr	r2, [pc, #228]	; (8001ec4 <HAL_ETH_Init+0x12c>)
 8001de0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001de4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001de6:	4b37      	ldr	r3, [pc, #220]	; (8001ec4 <HAL_ETH_Init+0x12c>)
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	4935      	ldr	r1, [pc, #212]	; (8001ec4 <HAL_ETH_Init+0x12c>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001df4:	4b33      	ldr	r3, [pc, #204]	; (8001ec4 <HAL_ETH_Init+0x12c>)
 8001df6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e0e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e10:	f7ff fd76 	bl	8001900 <HAL_GetTick>
 8001e14:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e16:	e011      	b.n	8001e3c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001e18:	f7ff fd72 	bl	8001900 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e26:	d909      	bls.n	8001e3c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	22e0      	movs	r2, #224	; 0xe0
 8001e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e03d      	b.n	8001eb8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1e4      	bne.n	8001e18 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 ff34 	bl	8002cbc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 ffdf 	bl	8002e18 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f001 f835 	bl	8002eca <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	461a      	mov	r2, r3
 8001e66:	2100      	movs	r1, #0
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 ff9d 	bl	8002da8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001e7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <HAL_ETH_Init+0x130>)
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001ea2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2210      	movs	r2, #16
 8001eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40013800 	.word	0x40013800
 8001ec8:	00020060 	.word	0x00020060

08001ecc <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eda:	2b10      	cmp	r3, #16
 8001edc:	d15f      	bne.n	8001f9e <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2223      	movs	r2, #35	; 0x23
 8001ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2204      	movs	r2, #4
 8001ef0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 fa2e 	bl	8002354 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f00:	2001      	movs	r0, #1
 8001f02:	f7ff fd09 	bl	8001918 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f24:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	f043 0302 	orr.w	r3, r3, #2
 8001f38:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f3c:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 fd58 	bl	80029f4 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0208 	orr.w	r2, r2, #8
 8001f52:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	f7ff fcdb 	bl	8001918 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f042 0204 	orr.w	r2, r2, #4
 8001f78:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f82:	69d9      	ldr	r1, [r3, #28]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <HAL_ETH_Start_IT+0xdc>)
 8001f8a:	430b      	orrs	r3, r1
 8001f8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f90:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2223      	movs	r2, #35	; 0x23
 8001f96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	e000      	b.n	8001fa0 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
  }
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	0001a0c1 	.word	0x0001a0c1

08001fac <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fba:	2b23      	cmp	r3, #35	; 0x23
 8001fbc:	d16e      	bne.n	800209c <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2223      	movs	r2, #35	; 0x23
 8001fc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fce:	69d9      	ldr	r1, [r3, #28]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4b34      	ldr	r3, [pc, #208]	; (80020a8 <HAL_ETH_Stop_IT+0xfc>)
 8001fd6:	400b      	ands	r3, r1
 8001fd8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fdc:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ff0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ff4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	f023 0302 	bic.w	r3, r3, #2
 8002008:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800200c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0204 	bic.w	r2, r2, #4
 800201c:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002026:	2001      	movs	r0, #1
 8002028:	f7ff fc76 	bl	8001918 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 fcdd 	bl	80029f4 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0208 	bic.w	r2, r2, #8
 8002048:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002052:	2001      	movs	r0, #1
 8002054:	f7ff fc60 	bl	8001918 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	e00e      	b.n	8002084 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	3212      	adds	r2, #18
 800206c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002070:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	3301      	adds	r3, #1
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	2b03      	cmp	r3, #3
 8002088:	d9ed      	bls.n	8002066 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2210      	movs	r2, #16
 8002094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	e000      	b.n	800209e <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
  }
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	fffe5f3e 	.word	0xfffe5f3e

080020ac <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d109      	bne.n	80020d2 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c4:	f043 0201 	orr.w	r2, r3, #1
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e07c      	b.n	80021cc <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020d8:	2b23      	cmp	r3, #35	; 0x23
 80020da:	d176      	bne.n	80021ca <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80020dc:	2200      	movs	r2, #0
 80020de:	68b9      	ldr	r1, [r7, #8]
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 ff61 	bl	8002fa8 <ETH_Prepare_Tx_Descriptors>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d009      	beq.n	8002100 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f2:	f043 0202 	orr.w	r2, r3, #2
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e065      	b.n	80021cc <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8002100:	f3bf 8f4f 	dsb	sy
}
 8002104:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	3206      	adds	r2, #6
 800210e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002112:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	629a      	str	r2, [r3, #40]	; 0x28
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002122:	2b03      	cmp	r3, #3
 8002124:	d904      	bls.n	8002130 <HAL_ETH_Transmit+0x84>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212a:	1f1a      	subs	r2, r3, #4
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	3106      	adds	r1, #6
 800213c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002140:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002144:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8002146:	f7ff fbdb 	bl	8001900 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800214c:	e037      	b.n	80021be <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d011      	beq.n	8002184 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002166:	f043 0208 	orr.w	r2, r3, #8
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002178:	695a      	ldr	r2, [r3, #20]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e023      	b.n	80021cc <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218a:	d018      	beq.n	80021be <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800218c:	f7ff fbb8 	bl	8001900 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	429a      	cmp	r2, r3
 800219a:	d302      	bcc.n	80021a2 <HAL_ETH_Transmit+0xf6>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10d      	bne.n	80021be <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a8:	f043 0204 	orr.w	r2, r3, #4
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80021b8:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e006      	b.n	80021cc <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	dbc3      	blt.n	800214e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	e000      	b.n	80021cc <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
  }
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b088      	sub	sp, #32
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d109      	bne.n	8002200 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f2:	f043 0201 	orr.w	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0a4      	b.n	800234a <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002206:	2b23      	cmp	r3, #35	; 0x23
 8002208:	d001      	beq.n	800220e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e09d      	b.n	800234a <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002212:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69fa      	ldr	r2, [r7, #28]
 8002218:	3212      	adds	r2, #18
 800221a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800221e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002224:	f1c3 0304 	rsb	r3, r3, #4
 8002228:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800222a:	e066      	b.n	80022fa <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002234:	2b00      	cmp	r3, #0
 8002236:	d007      	beq.n	8002248 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	69da      	ldr	r2, [r3, #28]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	699a      	ldr	r2, [r3, #24]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002250:	2b00      	cmp	r3, #0
 8002252:	d103      	bne.n	800225c <HAL_ETH_ReadData+0x88>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002258:	2b00      	cmp	r3, #0
 800225a:	d03c      	beq.n	80022d6 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	0c1b      	lsrs	r3, r3, #16
 800227a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800227e:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d005      	beq.n	8002298 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002294:	2301      	movs	r3, #1
 8002296:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80022b0:	461a      	mov	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	f004 fed5 	bl	8007064 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	441a      	add	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	2200      	movs	r2, #0
 80022d4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3301      	adds	r3, #1
 80022da:	61fb      	str	r3, [r7, #28]
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d902      	bls.n	80022e8 <HAL_ETH_ReadData+0x114>
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3b04      	subs	r3, #4
 80022e6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69fa      	ldr	r2, [r7, #28]
 80022ec:	3212      	adds	r2, #18
 80022ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	3301      	adds	r3, #1
 80022f8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	db06      	blt.n	8002310 <HAL_ETH_ReadData+0x13c>
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	429a      	cmp	r2, r3
 8002308:	d202      	bcs.n	8002310 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 800230a:	7cfb      	ldrb	r3, [r7, #19]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d08d      	beq.n	800222c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	441a      	add	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 f815 	bl	8002354 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69fa      	ldr	r2, [r7, #28]
 800232e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002330:	7cfb      	ldrb	r3, [r7, #19]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d108      	bne.n	8002348 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	e000      	b.n	800234a <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
}
 800234a:	4618      	mov	r0, r3
 800234c:	3720      	adds	r7, #32
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800235c:	2300      	movs	r3, #0
 800235e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002360:	2301      	movs	r3, #1
 8002362:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002368:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69fa      	ldr	r2, [r7, #28]
 800236e:	3212      	adds	r2, #18
 8002370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002374:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800237a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800237c:	e042      	b.n	8002404 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d112      	bne.n	80023ac <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002386:	f107 0308 	add.w	r3, r7, #8
 800238a:	4618      	mov	r0, r3
 800238c:	f004 fe3a 	bl	8007004 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d102      	bne.n	800239c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002396:	2300      	movs	r3, #0
 8002398:	74fb      	strb	r3, [r7, #19]
 800239a:	e007      	b.n	80023ac <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	461a      	mov	r2, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	461a      	mov	r2, r3
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80023ac:	7cfb      	ldrb	r3, [r7, #19]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d028      	beq.n	8002404 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	4b26      	ldr	r3, [pc, #152]	; (8002458 <ETH_UpdateDescriptor+0x104>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	6053      	str	r3, [r2, #4]
 80023c6:	e005      	b.n	80023d4 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	3301      	adds	r3, #1
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d902      	bls.n	80023f2 <ETH_UpdateDescriptor+0x9e>
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	3b04      	subs	r3, #4
 80023f0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69fa      	ldr	r2, [r7, #28]
 80023f6:	3212      	adds	r2, #18
 80023f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023fc:	617b      	str	r3, [r7, #20]
      desccount--;
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	3b01      	subs	r3, #1
 8002402:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <ETH_UpdateDescriptor+0xbc>
 800240a:	7cfb      	ldrb	r3, [r7, #19]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1b6      	bne.n	800237e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	429a      	cmp	r2, r3
 8002418:	d01a      	beq.n	8002450 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3301      	adds	r3, #1
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002424:	f3bf 8f5f 	dmb	sy
}
 8002428:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6919      	ldr	r1, [r3, #16]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	18ca      	adds	r2, r1, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002442:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69fa      	ldr	r2, [r7, #28]
 8002448:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002450:	bf00      	nop
 8002452:	3720      	adds	r7, #32
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	80004000 	.word	0x80004000

0800245c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246a:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002484:	4b4b      	ldr	r3, [pc, #300]	; (80025b4 <HAL_ETH_IRQHandler+0x158>)
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00e      	beq.n	80024b2 <HAL_ETH_IRQHandler+0x56>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249a:	2b00      	cmp	r3, #0
 800249c:	d009      	beq.n	80024b2 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a6:	461a      	mov	r2, r3
 80024a8:	4b43      	ldr	r3, [pc, #268]	; (80025b8 <HAL_ETH_IRQHandler+0x15c>)
 80024aa:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f891 	bl	80025d4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00f      	beq.n	80024dc <HAL_ETH_IRQHandler+0x80>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00a      	beq.n	80024dc <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ce:	461a      	mov	r2, r3
 80024d0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80024d4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f872 	bl	80025c0 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d042      	beq.n	800256c <HAL_ETH_IRQHandler+0x110>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d03d      	beq.n	800256c <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f6:	f043 0208 	orr.w	r2, r3, #8
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d01a      	beq.n	8002540 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002512:	695a      	ldr	r2, [r3, #20]
 8002514:	4b29      	ldr	r3, [pc, #164]	; (80025bc <HAL_ETH_IRQHandler+0x160>)
 8002516:	4013      	ands	r3, r2
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002530:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002534:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	22e0      	movs	r2, #224	; 0xe0
 800253a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800253e:	e012      	b.n	8002566 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	f248 6380 	movw	r3, #34432	; 0x8680
 800254e:	4013      	ands	r3, r2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800255e:	461a      	mov	r2, r3
 8002560:	f248 6380 	movw	r3, #34432	; 0x8680
 8002564:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f83e 	bl	80025e8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00e      	beq.n	8002594 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f838 	bl	80025fc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d006      	beq.n	80025ac <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800259e:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_ETH_IRQHandler+0x158>)
 80025a0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80025a4:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f832 	bl	8002610 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80025ac:	bf00      	nop
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40013c00 	.word	0x40013c00
 80025b8:	00010040 	.word	0x00010040
 80025bc:	007e2000 	.word	0x007e2000

080025c0 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
 8002630:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f003 031c 	and.w	r3, r3, #28
 8002640:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	02db      	lsls	r3, r3, #11
 8002646:	b29b      	uxth	r3, r3
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	4313      	orrs	r3, r2
 800264c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	019b      	lsls	r3, r3, #6
 8002652:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	4313      	orrs	r3, r2
 800265a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f023 0302 	bic.w	r3, r3, #2
 8002662:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002674:	f7ff f944 	bl	8001900 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800267a:	e00d      	b.n	8002698 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800267c:	f7ff f940 	bl	8001900 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800268a:	d301      	bcc.n	8002690 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e010      	b.n	80026b2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1ec      	bne.n	800267c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	461a      	mov	r2, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b086      	sub	sp, #24
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f003 031c 	and.w	r3, r3, #28
 80026d6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	02db      	lsls	r3, r3, #11
 80026dc:	b29b      	uxth	r3, r3
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	019b      	lsls	r3, r3, #6
 80026e8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f043 0302 	orr.w	r3, r3, #2
 80026f8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002714:	f7ff f8f4 	bl	8001900 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800271a:	e00d      	b.n	8002738 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800271c:	f7ff f8f0 	bl	8001900 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800272a:	d301      	bcc.n	8002730 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e009      	b.n	8002744 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1ec      	bne.n	800271c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0e6      	b.n	800292e <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0310 	and.w	r3, r3, #16
 800276a:	2b00      	cmp	r3, #0
 800276c:	bf14      	ite	ne
 800276e:	2301      	movne	r3, #1
 8002770:	2300      	moveq	r3, #0
 8002772:	b2db      	uxtb	r3, r3
 8002774:	461a      	mov	r2, r3
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002794:	2b00      	cmp	r3, #0
 8002796:	bf0c      	ite	eq
 8002798:	2301      	moveq	r3, #1
 800279a:	2300      	movne	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	461a      	mov	r2, r3
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bf14      	ite	ne
 80027b4:	2301      	movne	r3, #1
 80027b6:	2300      	moveq	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	bf0c      	ite	eq
 80027ce:	2301      	moveq	r3, #1
 80027d0:	2300      	movne	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	461a      	mov	r2, r3
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	bf14      	ite	ne
 80027e8:	2301      	movne	r3, #1
 80027ea:	2300      	moveq	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	461a      	mov	r2, r3
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800281a:	2b00      	cmp	r3, #0
 800281c:	bf0c      	ite	eq
 800281e:	2301      	moveq	r3, #1
 8002820:	2300      	movne	r3, #0
 8002822:	b2db      	uxtb	r3, r3
 8002824:	461a      	mov	r2, r3
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284e:	2b00      	cmp	r3, #0
 8002850:	bf14      	ite	ne
 8002852:	2301      	movne	r3, #1
 8002854:	2300      	moveq	r3, #0
 8002856:	b2db      	uxtb	r3, r3
 8002858:	461a      	mov	r2, r3
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002876:	2b00      	cmp	r3, #0
 8002878:	bf14      	ite	ne
 800287a:	2301      	movne	r3, #1
 800287c:	2300      	moveq	r3, #0
 800287e:	b2db      	uxtb	r3, r3
 8002880:	461a      	mov	r2, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	bf14      	ite	ne
 8002894:	2301      	movne	r3, #1
 8002896:	2300      	moveq	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	461a      	mov	r2, r3
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	bf14      	ite	ne
 80028ae:	2301      	movne	r3, #1
 80028b0:	2300      	moveq	r3, #0
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	461a      	mov	r2, r3
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	bf0c      	ite	eq
 80028ca:	2301      	moveq	r3, #1
 80028cc:	2300      	movne	r3, #0
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	461a      	mov	r2, r3
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	0c1b      	lsrs	r3, r3, #16
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	2b00      	cmp	r3, #0
 8002900:	bf14      	ite	ne
 8002902:	2301      	movne	r3, #1
 8002904:	2300      	moveq	r3, #0
 8002906:	b2db      	uxtb	r3, r3
 8002908:	461a      	mov	r2, r3
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800291a:	2b00      	cmp	r3, #0
 800291c:	bf14      	ite	ne
 800291e:	2301      	movne	r3, #1
 8002920:	2300      	moveq	r3, #0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
 8002942:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e00b      	b.n	8002966 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002954:	2b10      	cmp	r3, #16
 8002956:	d105      	bne.n	8002964 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002958:	6839      	ldr	r1, [r7, #0]
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f870 	bl	8002a40 <ETH_SetMACConfig>

    return HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	e000      	b.n	8002966 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
  }
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f023 031c 	bic.w	r3, r3, #28
 8002986:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002988:	f001 fab0 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 800298c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	4a14      	ldr	r2, [pc, #80]	; (80029e4 <HAL_ETH_SetMDIOClockRange+0x74>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d804      	bhi.n	80029a0 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f043 0308 	orr.w	r3, r3, #8
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	e019      	b.n	80029d4 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4a11      	ldr	r2, [pc, #68]	; (80029e8 <HAL_ETH_SetMDIOClockRange+0x78>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d204      	bcs.n	80029b2 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f043 030c 	orr.w	r3, r3, #12
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	e010      	b.n	80029d4 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	4a0d      	ldr	r2, [pc, #52]	; (80029ec <HAL_ETH_SetMDIOClockRange+0x7c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d90c      	bls.n	80029d4 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	4a0c      	ldr	r2, [pc, #48]	; (80029f0 <HAL_ETH_SetMDIOClockRange+0x80>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d804      	bhi.n	80029cc <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f043 0304 	orr.w	r3, r3, #4
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	e003      	b.n	80029d4 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f043 0310 	orr.w	r3, r3, #16
 80029d2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	611a      	str	r2, [r3, #16]
}
 80029dc:	bf00      	nop
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	02160ebf 	.word	0x02160ebf
 80029e8:	03938700 	.word	0x03938700
 80029ec:	05f5e0ff 	.word	0x05f5e0ff
 80029f0:	08f0d17f 	.word	0x08f0d17f

080029f4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6812      	ldr	r2, [r2, #0]
 8002a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a16:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a24:	2001      	movs	r0, #1
 8002a26:	f7fe ff77 	bl	8001918 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a34:	6193      	str	r3, [r2, #24]
}
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4b53      	ldr	r3, [pc, #332]	; (8002ba4 <ETH_SetMACConfig+0x164>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	7b9b      	ldrb	r3, [r3, #14]
 8002a5e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	7c12      	ldrb	r2, [r2, #16]
 8002a64:	2a00      	cmp	r2, #0
 8002a66:	d102      	bne.n	8002a6e <ETH_SetMACConfig+0x2e>
 8002a68:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a6c:	e000      	b.n	8002a70 <ETH_SetMACConfig+0x30>
 8002a6e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002a70:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	7c52      	ldrb	r2, [r2, #17]
 8002a76:	2a00      	cmp	r2, #0
 8002a78:	d102      	bne.n	8002a80 <ETH_SetMACConfig+0x40>
 8002a7a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002a7e:	e000      	b.n	8002a82 <ETH_SetMACConfig+0x42>
 8002a80:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a82:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a88:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	7fdb      	ldrb	r3, [r3, #31]
 8002a8e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002a90:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	7f92      	ldrb	r2, [r2, #30]
 8002a9c:	2a00      	cmp	r2, #0
 8002a9e:	d102      	bne.n	8002aa6 <ETH_SetMACConfig+0x66>
 8002aa0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002aa4:	e000      	b.n	8002aa8 <ETH_SetMACConfig+0x68>
 8002aa6:	2200      	movs	r2, #0
                        macconf->Speed |
 8002aa8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	7f1b      	ldrb	r3, [r3, #28]
 8002aae:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ab0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002ab6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	791b      	ldrb	r3, [r3, #4]
 8002abc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002abe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002ac6:	2a00      	cmp	r2, #0
 8002ac8:	d102      	bne.n	8002ad0 <ETH_SetMACConfig+0x90>
 8002aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ace:	e000      	b.n	8002ad2 <ETH_SetMACConfig+0x92>
 8002ad0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ad2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	7bdb      	ldrb	r3, [r3, #15]
 8002ad8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ada:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ae0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ae8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002aea:	4313      	orrs	r3, r2
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b02:	2001      	movs	r0, #1
 8002b04:	f7fe ff08 	bl	8001918 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002b1e:	4013      	ands	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b26:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002b2e:	2a00      	cmp	r2, #0
 8002b30:	d101      	bne.n	8002b36 <ETH_SetMACConfig+0xf6>
 8002b32:	2280      	movs	r2, #128	; 0x80
 8002b34:	e000      	b.n	8002b38 <ETH_SetMACConfig+0xf8>
 8002b36:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b38:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002b46:	2a01      	cmp	r2, #1
 8002b48:	d101      	bne.n	8002b4e <ETH_SetMACConfig+0x10e>
 8002b4a:	2208      	movs	r2, #8
 8002b4c:	e000      	b.n	8002b50 <ETH_SetMACConfig+0x110>
 8002b4e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002b50:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002b58:	2a01      	cmp	r2, #1
 8002b5a:	d101      	bne.n	8002b60 <ETH_SetMACConfig+0x120>
 8002b5c:	2204      	movs	r2, #4
 8002b5e:	e000      	b.n	8002b62 <ETH_SetMACConfig+0x122>
 8002b60:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002b6a:	2a01      	cmp	r2, #1
 8002b6c:	d101      	bne.n	8002b72 <ETH_SetMACConfig+0x132>
 8002b6e:	2202      	movs	r2, #2
 8002b70:	e000      	b.n	8002b74 <ETH_SetMACConfig+0x134>
 8002b72:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b74:	4313      	orrs	r3, r2
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	f7fe fec3 	bl	8001918 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	619a      	str	r2, [r3, #24]
}
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	fd20810f 	.word	0xfd20810f

08002ba8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4b3d      	ldr	r3, [pc, #244]	; (8002cb8 <ETH_SetDMAConfig+0x110>)
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	7b1b      	ldrb	r3, [r3, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d102      	bne.n	8002bd4 <ETH_SetDMAConfig+0x2c>
 8002bce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002bd2:	e000      	b.n	8002bd6 <ETH_SetDMAConfig+0x2e>
 8002bd4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	7b5b      	ldrb	r3, [r3, #13]
 8002bda:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002bdc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	7f52      	ldrb	r2, [r2, #29]
 8002be2:	2a00      	cmp	r2, #0
 8002be4:	d102      	bne.n	8002bec <ETH_SetDMAConfig+0x44>
 8002be6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002bea:	e000      	b.n	8002bee <ETH_SetDMAConfig+0x46>
 8002bec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002bee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	7b9b      	ldrb	r3, [r3, #14]
 8002bf4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002bf6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002bfc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	7f1b      	ldrb	r3, [r3, #28]
 8002c02:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002c04:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	7f9b      	ldrb	r3, [r3, #30]
 8002c0a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002c0c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002c12:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c1a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c3e:	2001      	movs	r0, #1
 8002c40:	f7fe fe6a 	bl	8001918 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	791b      	ldrb	r3, [r3, #4]
 8002c56:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c5c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002c62:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c68:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c70:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002c72:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c7a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c80:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c8e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	f7fe fe3b 	bl	8001918 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002caa:	461a      	mov	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6013      	str	r3, [r2, #0]
}
 8002cb0:	bf00      	nop
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	f8de3f23 	.word	0xf8de3f23

08002cbc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b0a6      	sub	sp, #152	; 0x98
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002cec:	2301      	movs	r3, #1
 8002cee:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002d12:	2300      	movs	r3, #0
 8002d14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002d24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d28:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002d2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002d30:	2300      	movs	r3, #0
 8002d32:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002d36:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff fe7f 	bl	8002a40 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002d42:	2301      	movs	r3, #1
 8002d44:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002d46:	2301      	movs	r3, #1
 8002d48:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002d50:	2301      	movs	r3, #1
 8002d52:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002d54:	2300      	movs	r3, #0
 8002d56:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002d64:	2300      	movs	r3, #0
 8002d66:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002d72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d76:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d7c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002d7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d82:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002d84:	2301      	movs	r3, #1
 8002d86:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002d92:	f107 0308 	add.w	r3, r7, #8
 8002d96:	4619      	mov	r1, r3
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff ff05 	bl	8002ba8 <ETH_SetDMAConfig>
}
 8002d9e:	bf00      	nop
 8002da0:	3798      	adds	r7, #152	; 0x98
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3305      	adds	r3, #5
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	021b      	lsls	r3, r3, #8
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	3204      	adds	r2, #4
 8002dc0:	7812      	ldrb	r2, [r2, #0]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	4b11      	ldr	r3, [pc, #68]	; (8002e10 <ETH_MACAddressConfig+0x68>)
 8002dca:	4413      	add	r3, r2
 8002dcc:	461a      	mov	r2, r3
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3303      	adds	r3, #3
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	061a      	lsls	r2, r3, #24
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3302      	adds	r3, #2
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	041b      	lsls	r3, r3, #16
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3301      	adds	r3, #1
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	021b      	lsls	r3, r3, #8
 8002dec:	4313      	orrs	r3, r2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	7812      	ldrb	r2, [r2, #0]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <ETH_MACAddressConfig+0x6c>)
 8002dfa:	4413      	add	r3, r2
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	6013      	str	r3, [r2, #0]
}
 8002e02:	bf00      	nop
 8002e04:	371c      	adds	r7, #28
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40028040 	.word	0x40028040
 8002e14:	40028044 	.word	0x40028044

08002e18 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e20:	2300      	movs	r3, #0
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	e03e      	b.n	8002ea4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68d9      	ldr	r1, [r3, #12]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	440b      	add	r3, r1
 8002e36:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2200      	movs	r2, #0
 8002e42:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2200      	movs	r2, #0
 8002e48:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002e50:	68b9      	ldr	r1, [r7, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	3206      	adds	r2, #6
 8002e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d80c      	bhi.n	8002e88 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68d9      	ldr	r1, [r3, #12]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	440b      	add	r3, r1
 8002e80:	461a      	mov	r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	e004      	b.n	8002e92 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b03      	cmp	r3, #3
 8002ea8:	d9bd      	bls.n	8002e26 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ebc:	611a      	str	r2, [r3, #16]
}
 8002ebe:	bf00      	nop
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b085      	sub	sp, #20
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	e048      	b.n	8002f6a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6919      	ldr	r1, [r3, #16]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	440b      	add	r3, r1
 8002ee8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2200      	movs	r2, #0
 8002f00:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2200      	movs	r2, #0
 8002f06:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f14:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002f2e:	68b9      	ldr	r1, [r7, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	3212      	adds	r2, #18
 8002f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d80c      	bhi.n	8002f5a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6919      	ldr	r1, [r3, #16]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	4613      	mov	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	440b      	add	r3, r1
 8002f52:	461a      	mov	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	60da      	str	r2, [r3, #12]
 8002f58:	e004      	b.n	8002f64 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	3301      	adds	r3, #1
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d9b3      	bls.n	8002ed8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f9a:	60da      	str	r2, [r3, #12]
}
 8002f9c:	bf00      	nop
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b091      	sub	sp, #68	; 0x44
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	3318      	adds	r3, #24
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	637b      	str	r3, [r7, #52]	; 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fd2:	633b      	str	r3, [r7, #48]	; 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t           bd_count = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fe6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fea:	d007      	beq.n	8002ffc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e111      	b.n	8003224 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8003000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003002:	3301      	adds	r3, #1
 8003004:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	4b86      	ldr	r3, [pc, #536]	; (8003230 <ETH_Prepare_Tx_Descriptors+0x288>)
 8003016:	4013      	ands	r3, r2
 8003018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800301a:	6852      	ldr	r2, [r2, #4]
 800301c:	431a      	orrs	r2, r3
 800301e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003020:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d008      	beq.n	8003040 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800302e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	431a      	orrs	r2, r3
 800303c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800304c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	431a      	orrs	r2, r3
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800306a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003074:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800307e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003080:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003082:	e082      	b.n	800318a <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800308c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308e:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d006      	beq.n	80030a4 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	e005      	b.n	80030b0 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80030a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80030ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ae:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80030b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b2:	3301      	adds	r3, #1
 80030b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d902      	bls.n	80030c2 <ETH_Prepare_Tx_Descriptors+0x11a>
 80030bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030be:	3b04      	subs	r3, #4
 80030c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ca:	633b      	str	r3, [r7, #48]	; 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80030cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030d8:	d007      	beq.n	80030ea <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80030da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030de:	3304      	adds	r3, #4
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d029      	beq.n	800313e <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	63fb      	str	r3, [r7, #60]	; 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f6:	633b      	str	r3, [r7, #48]	; 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80030f8:	2300      	movs	r3, #0
 80030fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80030fc:	e019      	b.n	8003132 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 80030fe:	f3bf 8f5f 	dmb	sy
}
 8003102:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310e:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003112:	3301      	adds	r3, #1
 8003114:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003118:	2b03      	cmp	r3, #3
 800311a:	d902      	bls.n	8003122 <ETH_Prepare_Tx_Descriptors+0x17a>
 800311c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800311e:	3b04      	subs	r3, #4
 8003120:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800312a:	633b      	str	r3, [r7, #48]	; 0x30
      for (idx = 0; idx < descnbr; idx ++)
 800312c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312e:	3301      	adds	r3, #1
 8003130:	63bb      	str	r3, [r7, #56]	; 0x38
 8003132:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003136:	429a      	cmp	r2, r3
 8003138:	d3e1      	bcc.n	80030fe <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 800313a:	2302      	movs	r3, #2
 800313c:	e072      	b.n	8003224 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003148:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 800314a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314c:	3301      	adds	r3, #1
 800314e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315e:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	4b32      	ldr	r3, [pc, #200]	; (8003230 <ETH_Prepare_Tx_Descriptors+0x288>)
 8003166:	4013      	ands	r3, r2
 8003168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800316a:	6852      	ldr	r2, [r2, #4]
 800316c:	431a      	orrs	r2, r3
 800316e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003170:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003174:	3301      	adds	r3, #1
 8003176:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003178:	f3bf 8f5f 	dmb	sy
}
 800317c:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003188:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800318a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	f47f af78 	bne.w	8003084 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d006      	beq.n	80031a8 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800319a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	e005      	b.n	80031b4 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80031a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80031b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b2:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80031b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80031bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031be:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	6a3a      	ldr	r2, [r7, #32]
 80031c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031c8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80031ca:	f3bf 8f5f 	dmb	sy
}
 80031ce:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80031d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031da:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031e4:	3304      	adds	r3, #4
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031f0:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031f2:	f3ef 8310 	mrs	r3, PRIMASK
 80031f6:	613b      	str	r3, [r7, #16]
  return(result);
 80031f8:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80031fa:	61fb      	str	r3, [r7, #28]
 80031fc:	2301      	movs	r3, #1
 80031fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f383 8810 	msr	PRIMASK, r3
}
 8003206:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800320c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320e:	4413      	add	r3, r2
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	629a      	str	r2, [r3, #40]	; 0x28
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	f383 8810 	msr	PRIMASK, r3
}
 8003220:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3744      	adds	r7, #68	; 0x44
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	ffffe000 	.word	0xffffe000

08003234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003234:	b480      	push	{r7}
 8003236:	b089      	sub	sp, #36	; 0x24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003246:	2300      	movs	r3, #0
 8003248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800324a:	2300      	movs	r3, #0
 800324c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800324e:	2300      	movs	r3, #0
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	e175      	b.n	8003540 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003254:	2201      	movs	r2, #1
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	4013      	ands	r3, r2
 8003266:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	429a      	cmp	r2, r3
 800326e:	f040 8164 	bne.w	800353a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	2b01      	cmp	r3, #1
 800327c:	d005      	beq.n	800328a <HAL_GPIO_Init+0x56>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d130      	bne.n	80032ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	2203      	movs	r2, #3
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43db      	mvns	r3, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4013      	ands	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032c0:	2201      	movs	r2, #1
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	091b      	lsrs	r3, r3, #4
 80032d6:	f003 0201 	and.w	r2, r3, #1
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	2b03      	cmp	r3, #3
 80032f6:	d017      	beq.n	8003328 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	2203      	movs	r2, #3
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	43db      	mvns	r3, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4013      	ands	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 0303 	and.w	r3, r3, #3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d123      	bne.n	800337c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	08da      	lsrs	r2, r3, #3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3208      	adds	r2, #8
 800333c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	220f      	movs	r2, #15
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	4013      	ands	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	08da      	lsrs	r2, r3, #3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3208      	adds	r2, #8
 8003376:	69b9      	ldr	r1, [r7, #24]
 8003378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	2203      	movs	r2, #3
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4013      	ands	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 0203 	and.w	r2, r3, #3
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 80be 	beq.w	800353a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033be:	4b66      	ldr	r3, [pc, #408]	; (8003558 <HAL_GPIO_Init+0x324>)
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	4a65      	ldr	r2, [pc, #404]	; (8003558 <HAL_GPIO_Init+0x324>)
 80033c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033c8:	6453      	str	r3, [r2, #68]	; 0x44
 80033ca:	4b63      	ldr	r3, [pc, #396]	; (8003558 <HAL_GPIO_Init+0x324>)
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80033d6:	4a61      	ldr	r2, [pc, #388]	; (800355c <HAL_GPIO_Init+0x328>)
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	089b      	lsrs	r3, r3, #2
 80033dc:	3302      	adds	r3, #2
 80033de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	220f      	movs	r2, #15
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a58      	ldr	r2, [pc, #352]	; (8003560 <HAL_GPIO_Init+0x32c>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d037      	beq.n	8003472 <HAL_GPIO_Init+0x23e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a57      	ldr	r2, [pc, #348]	; (8003564 <HAL_GPIO_Init+0x330>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d031      	beq.n	800346e <HAL_GPIO_Init+0x23a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a56      	ldr	r2, [pc, #344]	; (8003568 <HAL_GPIO_Init+0x334>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d02b      	beq.n	800346a <HAL_GPIO_Init+0x236>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a55      	ldr	r2, [pc, #340]	; (800356c <HAL_GPIO_Init+0x338>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d025      	beq.n	8003466 <HAL_GPIO_Init+0x232>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a54      	ldr	r2, [pc, #336]	; (8003570 <HAL_GPIO_Init+0x33c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d01f      	beq.n	8003462 <HAL_GPIO_Init+0x22e>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a53      	ldr	r2, [pc, #332]	; (8003574 <HAL_GPIO_Init+0x340>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d019      	beq.n	800345e <HAL_GPIO_Init+0x22a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a52      	ldr	r2, [pc, #328]	; (8003578 <HAL_GPIO_Init+0x344>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d013      	beq.n	800345a <HAL_GPIO_Init+0x226>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a51      	ldr	r2, [pc, #324]	; (800357c <HAL_GPIO_Init+0x348>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d00d      	beq.n	8003456 <HAL_GPIO_Init+0x222>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a50      	ldr	r2, [pc, #320]	; (8003580 <HAL_GPIO_Init+0x34c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d007      	beq.n	8003452 <HAL_GPIO_Init+0x21e>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a4f      	ldr	r2, [pc, #316]	; (8003584 <HAL_GPIO_Init+0x350>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d101      	bne.n	800344e <HAL_GPIO_Init+0x21a>
 800344a:	2309      	movs	r3, #9
 800344c:	e012      	b.n	8003474 <HAL_GPIO_Init+0x240>
 800344e:	230a      	movs	r3, #10
 8003450:	e010      	b.n	8003474 <HAL_GPIO_Init+0x240>
 8003452:	2308      	movs	r3, #8
 8003454:	e00e      	b.n	8003474 <HAL_GPIO_Init+0x240>
 8003456:	2307      	movs	r3, #7
 8003458:	e00c      	b.n	8003474 <HAL_GPIO_Init+0x240>
 800345a:	2306      	movs	r3, #6
 800345c:	e00a      	b.n	8003474 <HAL_GPIO_Init+0x240>
 800345e:	2305      	movs	r3, #5
 8003460:	e008      	b.n	8003474 <HAL_GPIO_Init+0x240>
 8003462:	2304      	movs	r3, #4
 8003464:	e006      	b.n	8003474 <HAL_GPIO_Init+0x240>
 8003466:	2303      	movs	r3, #3
 8003468:	e004      	b.n	8003474 <HAL_GPIO_Init+0x240>
 800346a:	2302      	movs	r3, #2
 800346c:	e002      	b.n	8003474 <HAL_GPIO_Init+0x240>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <HAL_GPIO_Init+0x240>
 8003472:	2300      	movs	r3, #0
 8003474:	69fa      	ldr	r2, [r7, #28]
 8003476:	f002 0203 	and.w	r2, r2, #3
 800347a:	0092      	lsls	r2, r2, #2
 800347c:	4093      	lsls	r3, r2
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003484:	4935      	ldr	r1, [pc, #212]	; (800355c <HAL_GPIO_Init+0x328>)
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	089b      	lsrs	r3, r3, #2
 800348a:	3302      	adds	r3, #2
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003492:	4b3d      	ldr	r3, [pc, #244]	; (8003588 <HAL_GPIO_Init+0x354>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	43db      	mvns	r3, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4013      	ands	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034b6:	4a34      	ldr	r2, [pc, #208]	; (8003588 <HAL_GPIO_Init+0x354>)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034bc:	4b32      	ldr	r3, [pc, #200]	; (8003588 <HAL_GPIO_Init+0x354>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034e0:	4a29      	ldr	r2, [pc, #164]	; (8003588 <HAL_GPIO_Init+0x354>)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034e6:	4b28      	ldr	r3, [pc, #160]	; (8003588 <HAL_GPIO_Init+0x354>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	43db      	mvns	r3, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4013      	ands	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800350a:	4a1f      	ldr	r2, [pc, #124]	; (8003588 <HAL_GPIO_Init+0x354>)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003510:	4b1d      	ldr	r3, [pc, #116]	; (8003588 <HAL_GPIO_Init+0x354>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	43db      	mvns	r3, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4013      	ands	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003534:	4a14      	ldr	r2, [pc, #80]	; (8003588 <HAL_GPIO_Init+0x354>)
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	3301      	adds	r3, #1
 800353e:	61fb      	str	r3, [r7, #28]
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	2b0f      	cmp	r3, #15
 8003544:	f67f ae86 	bls.w	8003254 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003548:	bf00      	nop
 800354a:	bf00      	nop
 800354c:	3724      	adds	r7, #36	; 0x24
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800
 800355c:	40013800 	.word	0x40013800
 8003560:	40020000 	.word	0x40020000
 8003564:	40020400 	.word	0x40020400
 8003568:	40020800 	.word	0x40020800
 800356c:	40020c00 	.word	0x40020c00
 8003570:	40021000 	.word	0x40021000
 8003574:	40021400 	.word	0x40021400
 8003578:	40021800 	.word	0x40021800
 800357c:	40021c00 	.word	0x40021c00
 8003580:	40022000 	.word	0x40022000
 8003584:	40022400 	.word	0x40022400
 8003588:	40013c00 	.word	0x40013c00

0800358c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003592:	2300      	movs	r3, #0
 8003594:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003596:	4b23      	ldr	r3, [pc, #140]	; (8003624 <HAL_PWREx_EnableOverDrive+0x98>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	4a22      	ldr	r2, [pc, #136]	; (8003624 <HAL_PWREx_EnableOverDrive+0x98>)
 800359c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a0:	6413      	str	r3, [r2, #64]	; 0x40
 80035a2:	4b20      	ldr	r3, [pc, #128]	; (8003624 <HAL_PWREx_EnableOverDrive+0x98>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80035ae:	4b1e      	ldr	r3, [pc, #120]	; (8003628 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a1d      	ldr	r2, [pc, #116]	; (8003628 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035ba:	f7fe f9a1 	bl	8001900 <HAL_GetTick>
 80035be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035c0:	e009      	b.n	80035d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035c2:	f7fe f99d 	bl	8001900 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035d0:	d901      	bls.n	80035d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e022      	b.n	800361c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035d6:	4b14      	ldr	r3, [pc, #80]	; (8003628 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e2:	d1ee      	bne.n	80035c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80035e4:	4b10      	ldr	r3, [pc, #64]	; (8003628 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a0f      	ldr	r2, [pc, #60]	; (8003628 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035f0:	f7fe f986 	bl	8001900 <HAL_GetTick>
 80035f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035f6:	e009      	b.n	800360c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035f8:	f7fe f982 	bl	8001900 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003606:	d901      	bls.n	800360c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e007      	b.n	800361c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800360c:	4b06      	ldr	r3, [pc, #24]	; (8003628 <HAL_PWREx_EnableOverDrive+0x9c>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003614:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003618:	d1ee      	bne.n	80035f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40023800 	.word	0x40023800
 8003628:	40007000 	.word	0x40007000

0800362c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003634:	2300      	movs	r3, #0
 8003636:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e29b      	b.n	8003b7a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 8087 	beq.w	800375e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003650:	4b96      	ldr	r3, [pc, #600]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 030c 	and.w	r3, r3, #12
 8003658:	2b04      	cmp	r3, #4
 800365a:	d00c      	beq.n	8003676 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800365c:	4b93      	ldr	r3, [pc, #588]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 030c 	and.w	r3, r3, #12
 8003664:	2b08      	cmp	r3, #8
 8003666:	d112      	bne.n	800368e <HAL_RCC_OscConfig+0x62>
 8003668:	4b90      	ldr	r3, [pc, #576]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003670:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003674:	d10b      	bne.n	800368e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003676:	4b8d      	ldr	r3, [pc, #564]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d06c      	beq.n	800375c <HAL_RCC_OscConfig+0x130>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d168      	bne.n	800375c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e275      	b.n	8003b7a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003696:	d106      	bne.n	80036a6 <HAL_RCC_OscConfig+0x7a>
 8003698:	4b84      	ldr	r3, [pc, #528]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a83      	ldr	r2, [pc, #524]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 800369e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a2:	6013      	str	r3, [r2, #0]
 80036a4:	e02e      	b.n	8003704 <HAL_RCC_OscConfig+0xd8>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10c      	bne.n	80036c8 <HAL_RCC_OscConfig+0x9c>
 80036ae:	4b7f      	ldr	r3, [pc, #508]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a7e      	ldr	r2, [pc, #504]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 80036b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	4b7c      	ldr	r3, [pc, #496]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a7b      	ldr	r2, [pc, #492]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 80036c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	e01d      	b.n	8003704 <HAL_RCC_OscConfig+0xd8>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036d0:	d10c      	bne.n	80036ec <HAL_RCC_OscConfig+0xc0>
 80036d2:	4b76      	ldr	r3, [pc, #472]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a75      	ldr	r2, [pc, #468]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 80036d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	4b73      	ldr	r3, [pc, #460]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a72      	ldr	r2, [pc, #456]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 80036e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	e00b      	b.n	8003704 <HAL_RCC_OscConfig+0xd8>
 80036ec:	4b6f      	ldr	r3, [pc, #444]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a6e      	ldr	r2, [pc, #440]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 80036f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	4b6c      	ldr	r3, [pc, #432]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a6b      	ldr	r2, [pc, #428]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 80036fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d013      	beq.n	8003734 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370c:	f7fe f8f8 	bl	8001900 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003714:	f7fe f8f4 	bl	8001900 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b64      	cmp	r3, #100	; 0x64
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e229      	b.n	8003b7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003726:	4b61      	ldr	r3, [pc, #388]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCC_OscConfig+0xe8>
 8003732:	e014      	b.n	800375e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003734:	f7fe f8e4 	bl	8001900 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800373c:	f7fe f8e0 	bl	8001900 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b64      	cmp	r3, #100	; 0x64
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e215      	b.n	8003b7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374e:	4b57      	ldr	r3, [pc, #348]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x110>
 800375a:	e000      	b.n	800375e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800375c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d069      	beq.n	800383e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800376a:	4b50      	ldr	r3, [pc, #320]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00b      	beq.n	800378e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003776:	4b4d      	ldr	r3, [pc, #308]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 030c 	and.w	r3, r3, #12
 800377e:	2b08      	cmp	r3, #8
 8003780:	d11c      	bne.n	80037bc <HAL_RCC_OscConfig+0x190>
 8003782:	4b4a      	ldr	r3, [pc, #296]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d116      	bne.n	80037bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378e:	4b47      	ldr	r3, [pc, #284]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d005      	beq.n	80037a6 <HAL_RCC_OscConfig+0x17a>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d001      	beq.n	80037a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e1e9      	b.n	8003b7a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a6:	4b41      	ldr	r3, [pc, #260]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	493d      	ldr	r1, [pc, #244]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ba:	e040      	b.n	800383e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d023      	beq.n	800380c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037c4:	4b39      	ldr	r3, [pc, #228]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a38      	ldr	r2, [pc, #224]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 80037ca:	f043 0301 	orr.w	r3, r3, #1
 80037ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d0:	f7fe f896 	bl	8001900 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037d8:	f7fe f892 	bl	8001900 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e1c7      	b.n	8003b7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ea:	4b30      	ldr	r3, [pc, #192]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f6:	4b2d      	ldr	r3, [pc, #180]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4929      	ldr	r1, [pc, #164]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 8003806:	4313      	orrs	r3, r2
 8003808:	600b      	str	r3, [r1, #0]
 800380a:	e018      	b.n	800383e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800380c:	4b27      	ldr	r3, [pc, #156]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a26      	ldr	r2, [pc, #152]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 8003812:	f023 0301 	bic.w	r3, r3, #1
 8003816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003818:	f7fe f872 	bl	8001900 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003820:	f7fe f86e 	bl	8001900 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e1a3      	b.n	8003b7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003832:	4b1e      	ldr	r3, [pc, #120]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f0      	bne.n	8003820 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b00      	cmp	r3, #0
 8003848:	d038      	beq.n	80038bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d019      	beq.n	8003886 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003852:	4b16      	ldr	r3, [pc, #88]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 8003854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003856:	4a15      	ldr	r2, [pc, #84]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385e:	f7fe f84f 	bl	8001900 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003866:	f7fe f84b 	bl	8001900 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e180      	b.n	8003b7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003878:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 800387a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0f0      	beq.n	8003866 <HAL_RCC_OscConfig+0x23a>
 8003884:	e01a      	b.n	80038bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003886:	4b09      	ldr	r3, [pc, #36]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 8003888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800388a:	4a08      	ldr	r2, [pc, #32]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 800388c:	f023 0301 	bic.w	r3, r3, #1
 8003890:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003892:	f7fe f835 	bl	8001900 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003898:	e00a      	b.n	80038b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800389a:	f7fe f831 	bl	8001900 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d903      	bls.n	80038b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e166      	b.n	8003b7a <HAL_RCC_OscConfig+0x54e>
 80038ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b0:	4b92      	ldr	r3, [pc, #584]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 80038b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1ee      	bne.n	800389a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 80a4 	beq.w	8003a12 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ca:	4b8c      	ldr	r3, [pc, #560]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10d      	bne.n	80038f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d6:	4b89      	ldr	r3, [pc, #548]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	4a88      	ldr	r2, [pc, #544]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 80038dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e0:	6413      	str	r3, [r2, #64]	; 0x40
 80038e2:	4b86      	ldr	r3, [pc, #536]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ea:	60bb      	str	r3, [r7, #8]
 80038ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ee:	2301      	movs	r3, #1
 80038f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038f2:	4b83      	ldr	r3, [pc, #524]	; (8003b00 <HAL_RCC_OscConfig+0x4d4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d118      	bne.n	8003930 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80038fe:	4b80      	ldr	r3, [pc, #512]	; (8003b00 <HAL_RCC_OscConfig+0x4d4>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a7f      	ldr	r2, [pc, #508]	; (8003b00 <HAL_RCC_OscConfig+0x4d4>)
 8003904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800390a:	f7fd fff9 	bl	8001900 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003912:	f7fd fff5 	bl	8001900 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b64      	cmp	r3, #100	; 0x64
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e12a      	b.n	8003b7a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003924:	4b76      	ldr	r3, [pc, #472]	; (8003b00 <HAL_RCC_OscConfig+0x4d4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0f0      	beq.n	8003912 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d106      	bne.n	8003946 <HAL_RCC_OscConfig+0x31a>
 8003938:	4b70      	ldr	r3, [pc, #448]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 800393a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393c:	4a6f      	ldr	r2, [pc, #444]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	6713      	str	r3, [r2, #112]	; 0x70
 8003944:	e02d      	b.n	80039a2 <HAL_RCC_OscConfig+0x376>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10c      	bne.n	8003968 <HAL_RCC_OscConfig+0x33c>
 800394e:	4b6b      	ldr	r3, [pc, #428]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 8003950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003952:	4a6a      	ldr	r2, [pc, #424]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 8003954:	f023 0301 	bic.w	r3, r3, #1
 8003958:	6713      	str	r3, [r2, #112]	; 0x70
 800395a:	4b68      	ldr	r3, [pc, #416]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 800395c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395e:	4a67      	ldr	r2, [pc, #412]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 8003960:	f023 0304 	bic.w	r3, r3, #4
 8003964:	6713      	str	r3, [r2, #112]	; 0x70
 8003966:	e01c      	b.n	80039a2 <HAL_RCC_OscConfig+0x376>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	2b05      	cmp	r3, #5
 800396e:	d10c      	bne.n	800398a <HAL_RCC_OscConfig+0x35e>
 8003970:	4b62      	ldr	r3, [pc, #392]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 8003972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003974:	4a61      	ldr	r2, [pc, #388]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 8003976:	f043 0304 	orr.w	r3, r3, #4
 800397a:	6713      	str	r3, [r2, #112]	; 0x70
 800397c:	4b5f      	ldr	r3, [pc, #380]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 800397e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003980:	4a5e      	ldr	r2, [pc, #376]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 8003982:	f043 0301 	orr.w	r3, r3, #1
 8003986:	6713      	str	r3, [r2, #112]	; 0x70
 8003988:	e00b      	b.n	80039a2 <HAL_RCC_OscConfig+0x376>
 800398a:	4b5c      	ldr	r3, [pc, #368]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398e:	4a5b      	ldr	r2, [pc, #364]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 8003990:	f023 0301 	bic.w	r3, r3, #1
 8003994:	6713      	str	r3, [r2, #112]	; 0x70
 8003996:	4b59      	ldr	r3, [pc, #356]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 8003998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399a:	4a58      	ldr	r2, [pc, #352]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 800399c:	f023 0304 	bic.w	r3, r3, #4
 80039a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d015      	beq.n	80039d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039aa:	f7fd ffa9 	bl	8001900 <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b0:	e00a      	b.n	80039c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b2:	f7fd ffa5 	bl	8001900 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e0d8      	b.n	8003b7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c8:	4b4c      	ldr	r3, [pc, #304]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 80039ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0ee      	beq.n	80039b2 <HAL_RCC_OscConfig+0x386>
 80039d4:	e014      	b.n	8003a00 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d6:	f7fd ff93 	bl	8001900 <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039dc:	e00a      	b.n	80039f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039de:	f7fd ff8f 	bl	8001900 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e0c2      	b.n	8003b7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039f4:	4b41      	ldr	r3, [pc, #260]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1ee      	bne.n	80039de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a00:	7dfb      	ldrb	r3, [r7, #23]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d105      	bne.n	8003a12 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a06:	4b3d      	ldr	r3, [pc, #244]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	4a3c      	ldr	r2, [pc, #240]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 8003a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 80ae 	beq.w	8003b78 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a1c:	4b37      	ldr	r3, [pc, #220]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 030c 	and.w	r3, r3, #12
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d06d      	beq.n	8003b04 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d14b      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a30:	4b32      	ldr	r3, [pc, #200]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a31      	ldr	r2, [pc, #196]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 8003a36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3c:	f7fd ff60 	bl	8001900 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a44:	f7fd ff5c 	bl	8001900 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e091      	b.n	8003b7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a56:	4b29      	ldr	r3, [pc, #164]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f0      	bne.n	8003a44 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69da      	ldr	r2, [r3, #28]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	019b      	lsls	r3, r3, #6
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	085b      	lsrs	r3, r3, #1
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	041b      	lsls	r3, r3, #16
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	061b      	lsls	r3, r3, #24
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	071b      	lsls	r3, r3, #28
 8003a8e:	491b      	ldr	r1, [pc, #108]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a94:	4b19      	ldr	r3, [pc, #100]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a18      	ldr	r2, [pc, #96]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 8003a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa0:	f7fd ff2e 	bl	8001900 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa8:	f7fd ff2a 	bl	8001900 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e05f      	b.n	8003b7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aba:	4b10      	ldr	r3, [pc, #64]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0f0      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x47c>
 8003ac6:	e057      	b.n	8003b78 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac8:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a0b      	ldr	r2, [pc, #44]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 8003ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad4:	f7fd ff14 	bl	8001900 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003adc:	f7fd ff10 	bl	8001900 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e045      	b.n	8003b7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aee:	4b03      	ldr	r3, [pc, #12]	; (8003afc <HAL_RCC_OscConfig+0x4d0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f0      	bne.n	8003adc <HAL_RCC_OscConfig+0x4b0>
 8003afa:	e03d      	b.n	8003b78 <HAL_RCC_OscConfig+0x54c>
 8003afc:	40023800 	.word	0x40023800
 8003b00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003b04:	4b1f      	ldr	r3, [pc, #124]	; (8003b84 <HAL_RCC_OscConfig+0x558>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d030      	beq.n	8003b74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d129      	bne.n	8003b74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d122      	bne.n	8003b74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b34:	4013      	ands	r3, r2
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b3a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d119      	bne.n	8003b74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4a:	085b      	lsrs	r3, r3, #1
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d10f      	bne.n	8003b74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d107      	bne.n	8003b74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d001      	beq.n	8003b78 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e000      	b.n	8003b7a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40023800 	.word	0x40023800

08003b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e0d0      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba0:	4b6a      	ldr	r3, [pc, #424]	; (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 030f 	and.w	r3, r3, #15
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d910      	bls.n	8003bd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bae:	4b67      	ldr	r3, [pc, #412]	; (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f023 020f 	bic.w	r2, r3, #15
 8003bb6:	4965      	ldr	r1, [pc, #404]	; (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bbe:	4b63      	ldr	r3, [pc, #396]	; (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0b8      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d020      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003be8:	4b59      	ldr	r3, [pc, #356]	; (8003d50 <HAL_RCC_ClockConfig+0x1c8>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	4a58      	ldr	r2, [pc, #352]	; (8003d50 <HAL_RCC_ClockConfig+0x1c8>)
 8003bee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bf2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d005      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c00:	4b53      	ldr	r3, [pc, #332]	; (8003d50 <HAL_RCC_ClockConfig+0x1c8>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	4a52      	ldr	r2, [pc, #328]	; (8003d50 <HAL_RCC_ClockConfig+0x1c8>)
 8003c06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c0c:	4b50      	ldr	r3, [pc, #320]	; (8003d50 <HAL_RCC_ClockConfig+0x1c8>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	494d      	ldr	r1, [pc, #308]	; (8003d50 <HAL_RCC_ClockConfig+0x1c8>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d040      	beq.n	8003cac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d107      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c32:	4b47      	ldr	r3, [pc, #284]	; (8003d50 <HAL_RCC_ClockConfig+0x1c8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d115      	bne.n	8003c6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e07f      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d107      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c4a:	4b41      	ldr	r3, [pc, #260]	; (8003d50 <HAL_RCC_ClockConfig+0x1c8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d109      	bne.n	8003c6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e073      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c5a:	4b3d      	ldr	r3, [pc, #244]	; (8003d50 <HAL_RCC_ClockConfig+0x1c8>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e06b      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c6a:	4b39      	ldr	r3, [pc, #228]	; (8003d50 <HAL_RCC_ClockConfig+0x1c8>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f023 0203 	bic.w	r2, r3, #3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	4936      	ldr	r1, [pc, #216]	; (8003d50 <HAL_RCC_ClockConfig+0x1c8>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c7c:	f7fd fe40 	bl	8001900 <HAL_GetTick>
 8003c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c82:	e00a      	b.n	8003c9a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c84:	f7fd fe3c 	bl	8001900 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e053      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c9a:	4b2d      	ldr	r3, [pc, #180]	; (8003d50 <HAL_RCC_ClockConfig+0x1c8>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 020c 	and.w	r2, r3, #12
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d1eb      	bne.n	8003c84 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cac:	4b27      	ldr	r3, [pc, #156]	; (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 030f 	and.w	r3, r3, #15
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d210      	bcs.n	8003cdc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cba:	4b24      	ldr	r3, [pc, #144]	; (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f023 020f 	bic.w	r2, r3, #15
 8003cc2:	4922      	ldr	r1, [pc, #136]	; (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cca:	4b20      	ldr	r3, [pc, #128]	; (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e032      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d008      	beq.n	8003cfa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce8:	4b19      	ldr	r3, [pc, #100]	; (8003d50 <HAL_RCC_ClockConfig+0x1c8>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	4916      	ldr	r1, [pc, #88]	; (8003d50 <HAL_RCC_ClockConfig+0x1c8>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d009      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d06:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <HAL_RCC_ClockConfig+0x1c8>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	490e      	ldr	r1, [pc, #56]	; (8003d50 <HAL_RCC_ClockConfig+0x1c8>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d1a:	f000 f821 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <HAL_RCC_ClockConfig+0x1c8>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	091b      	lsrs	r3, r3, #4
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	490a      	ldr	r1, [pc, #40]	; (8003d54 <HAL_RCC_ClockConfig+0x1cc>)
 8003d2c:	5ccb      	ldrb	r3, [r1, r3]
 8003d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d32:	4a09      	ldr	r2, [pc, #36]	; (8003d58 <HAL_RCC_ClockConfig+0x1d0>)
 8003d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d36:	4b09      	ldr	r3, [pc, #36]	; (8003d5c <HAL_RCC_ClockConfig+0x1d4>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fd fd9c 	bl	8001878 <HAL_InitTick>

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40023c00 	.word	0x40023c00
 8003d50:	40023800 	.word	0x40023800
 8003d54:	0801524c 	.word	0x0801524c
 8003d58:	20000000 	.word	0x20000000
 8003d5c:	20000004 	.word	0x20000004

08003d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d64:	b090      	sub	sp, #64	; 0x40
 8003d66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d70:	2300      	movs	r3, #0
 8003d72:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003d74:	2300      	movs	r3, #0
 8003d76:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d78:	4b59      	ldr	r3, [pc, #356]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 030c 	and.w	r3, r3, #12
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d00d      	beq.n	8003da0 <HAL_RCC_GetSysClockFreq+0x40>
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	f200 80a1 	bhi.w	8003ecc <HAL_RCC_GetSysClockFreq+0x16c>
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <HAL_RCC_GetSysClockFreq+0x34>
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d003      	beq.n	8003d9a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d92:	e09b      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d94:	4b53      	ldr	r3, [pc, #332]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d96:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d98:	e09b      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d9a:	4b53      	ldr	r3, [pc, #332]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d9e:	e098      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003da0:	4b4f      	ldr	r3, [pc, #316]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003da8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003daa:	4b4d      	ldr	r3, [pc, #308]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d028      	beq.n	8003e08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003db6:	4b4a      	ldr	r3, [pc, #296]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	099b      	lsrs	r3, r3, #6
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	623b      	str	r3, [r7, #32]
 8003dc0:	627a      	str	r2, [r7, #36]	; 0x24
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003dc8:	2100      	movs	r1, #0
 8003dca:	4b47      	ldr	r3, [pc, #284]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dcc:	fb03 f201 	mul.w	r2, r3, r1
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	fb00 f303 	mul.w	r3, r0, r3
 8003dd6:	4413      	add	r3, r2
 8003dd8:	4a43      	ldr	r2, [pc, #268]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dda:	fba0 1202 	umull	r1, r2, r0, r2
 8003dde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003de0:	460a      	mov	r2, r1
 8003de2:	62ba      	str	r2, [r7, #40]	; 0x28
 8003de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003de6:	4413      	add	r3, r2
 8003de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dec:	2200      	movs	r2, #0
 8003dee:	61bb      	str	r3, [r7, #24]
 8003df0:	61fa      	str	r2, [r7, #28]
 8003df2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003df6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003dfa:	f7fc fa51 	bl	80002a0 <__aeabi_uldivmod>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	4613      	mov	r3, r2
 8003e04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e06:	e053      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e08:	4b35      	ldr	r3, [pc, #212]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	099b      	lsrs	r3, r3, #6
 8003e0e:	2200      	movs	r2, #0
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	617a      	str	r2, [r7, #20]
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e1a:	f04f 0b00 	mov.w	fp, #0
 8003e1e:	4652      	mov	r2, sl
 8003e20:	465b      	mov	r3, fp
 8003e22:	f04f 0000 	mov.w	r0, #0
 8003e26:	f04f 0100 	mov.w	r1, #0
 8003e2a:	0159      	lsls	r1, r3, #5
 8003e2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e30:	0150      	lsls	r0, r2, #5
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	ebb2 080a 	subs.w	r8, r2, sl
 8003e3a:	eb63 090b 	sbc.w	r9, r3, fp
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	f04f 0300 	mov.w	r3, #0
 8003e46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e52:	ebb2 0408 	subs.w	r4, r2, r8
 8003e56:	eb63 0509 	sbc.w	r5, r3, r9
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	00eb      	lsls	r3, r5, #3
 8003e64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e68:	00e2      	lsls	r2, r4, #3
 8003e6a:	4614      	mov	r4, r2
 8003e6c:	461d      	mov	r5, r3
 8003e6e:	eb14 030a 	adds.w	r3, r4, sl
 8003e72:	603b      	str	r3, [r7, #0]
 8003e74:	eb45 030b 	adc.w	r3, r5, fp
 8003e78:	607b      	str	r3, [r7, #4]
 8003e7a:	f04f 0200 	mov.w	r2, #0
 8003e7e:	f04f 0300 	mov.w	r3, #0
 8003e82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e86:	4629      	mov	r1, r5
 8003e88:	028b      	lsls	r3, r1, #10
 8003e8a:	4621      	mov	r1, r4
 8003e8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e90:	4621      	mov	r1, r4
 8003e92:	028a      	lsls	r2, r1, #10
 8003e94:	4610      	mov	r0, r2
 8003e96:	4619      	mov	r1, r3
 8003e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	60bb      	str	r3, [r7, #8]
 8003e9e:	60fa      	str	r2, [r7, #12]
 8003ea0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ea4:	f7fc f9fc 	bl	80002a0 <__aeabi_uldivmod>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4613      	mov	r3, r2
 8003eae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	0c1b      	lsrs	r3, r3, #16
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	3301      	adds	r3, #1
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003ec0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003eca:	e002      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ece:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3740      	adds	r7, #64	; 0x40
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ede:	bf00      	nop
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	00f42400 	.word	0x00f42400
 8003ee8:	017d7840 	.word	0x017d7840

08003eec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ef0:	4b03      	ldr	r3, [pc, #12]	; (8003f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	20000000 	.word	0x20000000

08003f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f08:	f7ff fff0 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	0a9b      	lsrs	r3, r3, #10
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	4903      	ldr	r1, [pc, #12]	; (8003f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f1a:	5ccb      	ldrb	r3, [r1, r3]
 8003f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40023800 	.word	0x40023800
 8003f28:	0801525c 	.word	0x0801525c

08003f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f30:	f7ff ffdc 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 8003f34:	4602      	mov	r2, r0
 8003f36:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	0b5b      	lsrs	r3, r3, #13
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	4903      	ldr	r1, [pc, #12]	; (8003f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f42:	5ccb      	ldrb	r3, [r1, r3]
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	0801525c 	.word	0x0801525c

08003f54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003f60:	2300      	movs	r3, #0
 8003f62:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003f64:	2300      	movs	r3, #0
 8003f66:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d012      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f7c:	4b69      	ldr	r3, [pc, #420]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	4a68      	ldr	r2, [pc, #416]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f86:	6093      	str	r3, [r2, #8]
 8003f88:	4b66      	ldr	r3, [pc, #408]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f90:	4964      	ldr	r1, [pc, #400]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d017      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fae:	4b5d      	ldr	r3, [pc, #372]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbc:	4959      	ldr	r1, [pc, #356]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fcc:	d101      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d017      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fea:	4b4e      	ldr	r3, [pc, #312]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ff0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	494a      	ldr	r1, [pc, #296]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004008:	d101      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800400a:	2301      	movs	r3, #1
 800400c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004016:	2301      	movs	r3, #1
 8004018:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004026:	2301      	movs	r3, #1
 8004028:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 808b 	beq.w	800414e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004038:	4b3a      	ldr	r3, [pc, #232]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	4a39      	ldr	r2, [pc, #228]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004042:	6413      	str	r3, [r2, #64]	; 0x40
 8004044:	4b37      	ldr	r3, [pc, #220]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404c:	60bb      	str	r3, [r7, #8]
 800404e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004050:	4b35      	ldr	r3, [pc, #212]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a34      	ldr	r2, [pc, #208]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800405a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800405c:	f7fd fc50 	bl	8001900 <HAL_GetTick>
 8004060:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004064:	f7fd fc4c 	bl	8001900 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b64      	cmp	r3, #100	; 0x64
 8004070:	d901      	bls.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e38f      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004076:	4b2c      	ldr	r3, [pc, #176]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0f0      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004082:	4b28      	ldr	r3, [pc, #160]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800408a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d035      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	429a      	cmp	r2, r3
 800409e:	d02e      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040a0:	4b20      	ldr	r3, [pc, #128]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040aa:	4b1e      	ldr	r3, [pc, #120]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ae:	4a1d      	ldr	r2, [pc, #116]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040b6:	4b1b      	ldr	r3, [pc, #108]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	4a1a      	ldr	r2, [pc, #104]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80040c2:	4a18      	ldr	r2, [pc, #96]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040c8:	4b16      	ldr	r3, [pc, #88]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d114      	bne.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7fd fc14 	bl	8001900 <HAL_GetTick>
 80040d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040da:	e00a      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040dc:	f7fd fc10 	bl	8001900 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e351      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f2:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0ee      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004106:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800410a:	d111      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800410c:	4b05      	ldr	r3, [pc, #20]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004118:	4b04      	ldr	r3, [pc, #16]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800411a:	400b      	ands	r3, r1
 800411c:	4901      	ldr	r1, [pc, #4]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800411e:	4313      	orrs	r3, r2
 8004120:	608b      	str	r3, [r1, #8]
 8004122:	e00b      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004124:	40023800 	.word	0x40023800
 8004128:	40007000 	.word	0x40007000
 800412c:	0ffffcff 	.word	0x0ffffcff
 8004130:	4bac      	ldr	r3, [pc, #688]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	4aab      	ldr	r2, [pc, #684]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004136:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800413a:	6093      	str	r3, [r2, #8]
 800413c:	4ba9      	ldr	r3, [pc, #676]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800413e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004148:	49a6      	ldr	r1, [pc, #664]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800414a:	4313      	orrs	r3, r2
 800414c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0310 	and.w	r3, r3, #16
 8004156:	2b00      	cmp	r3, #0
 8004158:	d010      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800415a:	4ba2      	ldr	r3, [pc, #648]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800415c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004160:	4aa0      	ldr	r2, [pc, #640]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004162:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004166:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800416a:	4b9e      	ldr	r3, [pc, #632]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800416c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004174:	499b      	ldr	r1, [pc, #620]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004176:	4313      	orrs	r3, r2
 8004178:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00a      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004188:	4b96      	ldr	r3, [pc, #600]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800418a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004196:	4993      	ldr	r1, [pc, #588]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041aa:	4b8e      	ldr	r3, [pc, #568]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041b8:	498a      	ldr	r1, [pc, #552]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00a      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041cc:	4b85      	ldr	r3, [pc, #532]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041da:	4982      	ldr	r1, [pc, #520]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00a      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041ee:	4b7d      	ldr	r3, [pc, #500]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fc:	4979      	ldr	r1, [pc, #484]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00a      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004210:	4b74      	ldr	r3, [pc, #464]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004216:	f023 0203 	bic.w	r2, r3, #3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421e:	4971      	ldr	r1, [pc, #452]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004232:	4b6c      	ldr	r3, [pc, #432]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004238:	f023 020c 	bic.w	r2, r3, #12
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004240:	4968      	ldr	r1, [pc, #416]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004242:	4313      	orrs	r3, r2
 8004244:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00a      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004254:	4b63      	ldr	r3, [pc, #396]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004262:	4960      	ldr	r1, [pc, #384]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004264:	4313      	orrs	r3, r2
 8004266:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004276:	4b5b      	ldr	r3, [pc, #364]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004284:	4957      	ldr	r1, [pc, #348]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00a      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004298:	4b52      	ldr	r3, [pc, #328]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800429a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a6:	494f      	ldr	r1, [pc, #316]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80042ba:	4b4a      	ldr	r3, [pc, #296]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c8:	4946      	ldr	r1, [pc, #280]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00a      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80042dc:	4b41      	ldr	r3, [pc, #260]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ea:	493e      	ldr	r1, [pc, #248]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80042fe:	4b39      	ldr	r3, [pc, #228]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004304:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800430c:	4935      	ldr	r1, [pc, #212]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800430e:	4313      	orrs	r3, r2
 8004310:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004320:	4b30      	ldr	r3, [pc, #192]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004326:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800432e:	492d      	ldr	r1, [pc, #180]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d011      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004342:	4b28      	ldr	r3, [pc, #160]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004348:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004350:	4924      	ldr	r1, [pc, #144]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800435c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004360:	d101      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004362:	2301      	movs	r3, #1
 8004364:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004372:	2301      	movs	r3, #1
 8004374:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004382:	4b18      	ldr	r3, [pc, #96]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004388:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004390:	4914      	ldr	r1, [pc, #80]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00b      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043a4:	4b0f      	ldr	r3, [pc, #60]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043b4:	490b      	ldr	r1, [pc, #44]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00f      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80043c8:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043d8:	4902      	ldr	r1, [pc, #8]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80043e0:	e002      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80043e2:	bf00      	nop
 80043e4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00b      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043f4:	4b8a      	ldr	r3, [pc, #552]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004404:	4986      	ldr	r1, [pc, #536]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00b      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004418:	4b81      	ldr	r3, [pc, #516]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800441a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800441e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004428:	497d      	ldr	r1, [pc, #500]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d006      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 80d6 	beq.w	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004444:	4b76      	ldr	r3, [pc, #472]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a75      	ldr	r2, [pc, #468]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800444a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800444e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004450:	f7fd fa56 	bl	8001900 <HAL_GetTick>
 8004454:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004456:	e008      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004458:	f7fd fa52 	bl	8001900 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	; 0x64
 8004464:	d901      	bls.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e195      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800446a:	4b6d      	ldr	r3, [pc, #436]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d021      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004486:	2b00      	cmp	r3, #0
 8004488:	d11d      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800448a:	4b65      	ldr	r3, [pc, #404]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800448c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004490:	0c1b      	lsrs	r3, r3, #16
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004498:	4b61      	ldr	r3, [pc, #388]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800449a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800449e:	0e1b      	lsrs	r3, r3, #24
 80044a0:	f003 030f 	and.w	r3, r3, #15
 80044a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	019a      	lsls	r2, r3, #6
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	041b      	lsls	r3, r3, #16
 80044b0:	431a      	orrs	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	061b      	lsls	r3, r3, #24
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	071b      	lsls	r3, r3, #28
 80044be:	4958      	ldr	r1, [pc, #352]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d004      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044da:	d00a      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d02e      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044f0:	d129      	bne.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80044f2:	4b4b      	ldr	r3, [pc, #300]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044f8:	0c1b      	lsrs	r3, r3, #16
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004500:	4b47      	ldr	r3, [pc, #284]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004506:	0f1b      	lsrs	r3, r3, #28
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	019a      	lsls	r2, r3, #6
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	041b      	lsls	r3, r3, #16
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	061b      	lsls	r3, r3, #24
 8004520:	431a      	orrs	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	071b      	lsls	r3, r3, #28
 8004526:	493e      	ldr	r1, [pc, #248]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800452e:	4b3c      	ldr	r3, [pc, #240]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004534:	f023 021f 	bic.w	r2, r3, #31
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	3b01      	subs	r3, #1
 800453e:	4938      	ldr	r1, [pc, #224]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d01d      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004552:	4b33      	ldr	r3, [pc, #204]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004558:	0e1b      	lsrs	r3, r3, #24
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004560:	4b2f      	ldr	r3, [pc, #188]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004566:	0f1b      	lsrs	r3, r3, #28
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	019a      	lsls	r2, r3, #6
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	041b      	lsls	r3, r3, #16
 800457a:	431a      	orrs	r2, r3
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	061b      	lsls	r3, r3, #24
 8004580:	431a      	orrs	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	071b      	lsls	r3, r3, #28
 8004586:	4926      	ldr	r1, [pc, #152]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d011      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	019a      	lsls	r2, r3, #6
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	041b      	lsls	r3, r3, #16
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	061b      	lsls	r3, r3, #24
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	071b      	lsls	r3, r3, #28
 80045b6:	491a      	ldr	r1, [pc, #104]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045be:	4b18      	ldr	r3, [pc, #96]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a17      	ldr	r2, [pc, #92]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ca:	f7fd f999 	bl	8001900 <HAL_GetTick>
 80045ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045d0:	e008      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80045d2:	f7fd f995 	bl	8001900 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b64      	cmp	r3, #100	; 0x64
 80045de:	d901      	bls.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e0d8      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045e4:	4b0e      	ldr	r3, [pc, #56]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0f0      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	f040 80ce 	bne.w	8004794 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80045f8:	4b09      	ldr	r3, [pc, #36]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a08      	ldr	r2, [pc, #32]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004602:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004604:	f7fd f97c 	bl	8001900 <HAL_GetTick>
 8004608:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800460a:	e00b      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800460c:	f7fd f978 	bl	8001900 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b64      	cmp	r3, #100	; 0x64
 8004618:	d904      	bls.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e0bb      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800461e:	bf00      	nop
 8004620:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004624:	4b5e      	ldr	r3, [pc, #376]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800462c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004630:	d0ec      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004642:	2b00      	cmp	r3, #0
 8004644:	d009      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800464e:	2b00      	cmp	r3, #0
 8004650:	d02e      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	2b00      	cmp	r3, #0
 8004658:	d12a      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800465a:	4b51      	ldr	r3, [pc, #324]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800465c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004660:	0c1b      	lsrs	r3, r3, #16
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004668:	4b4d      	ldr	r3, [pc, #308]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800466a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466e:	0f1b      	lsrs	r3, r3, #28
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	019a      	lsls	r2, r3, #6
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	041b      	lsls	r3, r3, #16
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	061b      	lsls	r3, r3, #24
 8004688:	431a      	orrs	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	071b      	lsls	r3, r3, #28
 800468e:	4944      	ldr	r1, [pc, #272]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004696:	4b42      	ldr	r3, [pc, #264]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800469c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a4:	3b01      	subs	r3, #1
 80046a6:	021b      	lsls	r3, r3, #8
 80046a8:	493d      	ldr	r1, [pc, #244]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d022      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046c4:	d11d      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046c6:	4b36      	ldr	r3, [pc, #216]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046cc:	0e1b      	lsrs	r3, r3, #24
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046d4:	4b32      	ldr	r3, [pc, #200]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046da:	0f1b      	lsrs	r3, r3, #28
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	019a      	lsls	r2, r3, #6
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	041b      	lsls	r3, r3, #16
 80046ee:	431a      	orrs	r2, r3
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	061b      	lsls	r3, r3, #24
 80046f4:	431a      	orrs	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	071b      	lsls	r3, r3, #28
 80046fa:	4929      	ldr	r1, [pc, #164]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d028      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800470e:	4b24      	ldr	r3, [pc, #144]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004714:	0e1b      	lsrs	r3, r3, #24
 8004716:	f003 030f 	and.w	r3, r3, #15
 800471a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800471c:	4b20      	ldr	r3, [pc, #128]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004722:	0c1b      	lsrs	r3, r3, #16
 8004724:	f003 0303 	and.w	r3, r3, #3
 8004728:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	019a      	lsls	r2, r3, #6
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	041b      	lsls	r3, r3, #16
 8004734:	431a      	orrs	r2, r3
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	061b      	lsls	r3, r3, #24
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	071b      	lsls	r3, r3, #28
 8004742:	4917      	ldr	r1, [pc, #92]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800474a:	4b15      	ldr	r3, [pc, #84]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800474c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004750:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	4911      	ldr	r1, [pc, #68]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004760:	4b0f      	ldr	r3, [pc, #60]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a0e      	ldr	r2, [pc, #56]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800476a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800476c:	f7fd f8c8 	bl	8001900 <HAL_GetTick>
 8004770:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004772:	e008      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004774:	f7fd f8c4 	bl	8001900 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b64      	cmp	r3, #100	; 0x64
 8004780:	d901      	bls.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e007      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004786:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800478e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004792:	d1ef      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3720      	adds	r7, #32
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	40023800 	.word	0x40023800

080047a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e049      	b.n	800484a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d106      	bne.n	80047d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7fc f94a 	bl	8000a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3304      	adds	r3, #4
 80047e0:	4619      	mov	r1, r3
 80047e2:	4610      	mov	r0, r2
 80047e4:	f000 faa8 	bl	8004d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
	...

08004854 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b01      	cmp	r3, #1
 8004866:	d001      	beq.n	800486c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e054      	b.n	8004916 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0201 	orr.w	r2, r2, #1
 8004882:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a26      	ldr	r2, [pc, #152]	; (8004924 <HAL_TIM_Base_Start_IT+0xd0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d022      	beq.n	80048d4 <HAL_TIM_Base_Start_IT+0x80>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004896:	d01d      	beq.n	80048d4 <HAL_TIM_Base_Start_IT+0x80>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a22      	ldr	r2, [pc, #136]	; (8004928 <HAL_TIM_Base_Start_IT+0xd4>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d018      	beq.n	80048d4 <HAL_TIM_Base_Start_IT+0x80>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a21      	ldr	r2, [pc, #132]	; (800492c <HAL_TIM_Base_Start_IT+0xd8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d013      	beq.n	80048d4 <HAL_TIM_Base_Start_IT+0x80>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a1f      	ldr	r2, [pc, #124]	; (8004930 <HAL_TIM_Base_Start_IT+0xdc>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00e      	beq.n	80048d4 <HAL_TIM_Base_Start_IT+0x80>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a1e      	ldr	r2, [pc, #120]	; (8004934 <HAL_TIM_Base_Start_IT+0xe0>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d009      	beq.n	80048d4 <HAL_TIM_Base_Start_IT+0x80>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a1c      	ldr	r2, [pc, #112]	; (8004938 <HAL_TIM_Base_Start_IT+0xe4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d004      	beq.n	80048d4 <HAL_TIM_Base_Start_IT+0x80>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a1b      	ldr	r2, [pc, #108]	; (800493c <HAL_TIM_Base_Start_IT+0xe8>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d115      	bne.n	8004900 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	4b19      	ldr	r3, [pc, #100]	; (8004940 <HAL_TIM_Base_Start_IT+0xec>)
 80048dc:	4013      	ands	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b06      	cmp	r3, #6
 80048e4:	d015      	beq.n	8004912 <HAL_TIM_Base_Start_IT+0xbe>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ec:	d011      	beq.n	8004912 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f042 0201 	orr.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fe:	e008      	b.n	8004912 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0201 	orr.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	e000      	b.n	8004914 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004912:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	40010000 	.word	0x40010000
 8004928:	40000400 	.word	0x40000400
 800492c:	40000800 	.word	0x40000800
 8004930:	40000c00 	.word	0x40000c00
 8004934:	40010400 	.word	0x40010400
 8004938:	40014000 	.word	0x40014000
 800493c:	40001800 	.word	0x40001800
 8004940:	00010007 	.word	0x00010007

08004944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d020      	beq.n	80049a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d01b      	beq.n	80049a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f06f 0202 	mvn.w	r2, #2
 8004978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f9b4 	bl	8004cfc <HAL_TIM_IC_CaptureCallback>
 8004994:	e005      	b.n	80049a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f9a6 	bl	8004ce8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f9b7 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d020      	beq.n	80049f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d01b      	beq.n	80049f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0204 	mvn.w	r2, #4
 80049c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2202      	movs	r2, #2
 80049ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f98e 	bl	8004cfc <HAL_TIM_IC_CaptureCallback>
 80049e0:	e005      	b.n	80049ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f980 	bl	8004ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f991 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d020      	beq.n	8004a40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f003 0308 	and.w	r3, r3, #8
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01b      	beq.n	8004a40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f06f 0208 	mvn.w	r2, #8
 8004a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2204      	movs	r2, #4
 8004a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f968 	bl	8004cfc <HAL_TIM_IC_CaptureCallback>
 8004a2c:	e005      	b.n	8004a3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f95a 	bl	8004ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f96b 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d020      	beq.n	8004a8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f003 0310 	and.w	r3, r3, #16
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d01b      	beq.n	8004a8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0210 	mvn.w	r2, #16
 8004a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2208      	movs	r2, #8
 8004a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f942 	bl	8004cfc <HAL_TIM_IC_CaptureCallback>
 8004a78:	e005      	b.n	8004a86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f934 	bl	8004ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f945 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00c      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d007      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0201 	mvn.w	r2, #1
 8004aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fc f98a 	bl	8000dc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d104      	bne.n	8004ac4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00c      	beq.n	8004ade <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d007      	beq.n	8004ade <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 fb0b 	bl	80050f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00c      	beq.n	8004b02 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d007      	beq.n	8004b02 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 fb03 	bl	8005108 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00c      	beq.n	8004b26 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d007      	beq.n	8004b26 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f8ff 	bl	8004d24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f003 0320 	and.w	r3, r3, #32
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00c      	beq.n	8004b4a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f003 0320 	and.w	r3, r3, #32
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d007      	beq.n	8004b4a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f06f 0220 	mvn.w	r2, #32
 8004b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 facb 	bl	80050e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b4a:	bf00      	nop
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d101      	bne.n	8004b70 <HAL_TIM_ConfigClockSource+0x1c>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	e0b4      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x186>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	4b56      	ldr	r3, [pc, #344]	; (8004ce4 <HAL_TIM_ConfigClockSource+0x190>)
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ba8:	d03e      	beq.n	8004c28 <HAL_TIM_ConfigClockSource+0xd4>
 8004baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bae:	f200 8087 	bhi.w	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb6:	f000 8086 	beq.w	8004cc6 <HAL_TIM_ConfigClockSource+0x172>
 8004bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bbe:	d87f      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc0:	2b70      	cmp	r3, #112	; 0x70
 8004bc2:	d01a      	beq.n	8004bfa <HAL_TIM_ConfigClockSource+0xa6>
 8004bc4:	2b70      	cmp	r3, #112	; 0x70
 8004bc6:	d87b      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc8:	2b60      	cmp	r3, #96	; 0x60
 8004bca:	d050      	beq.n	8004c6e <HAL_TIM_ConfigClockSource+0x11a>
 8004bcc:	2b60      	cmp	r3, #96	; 0x60
 8004bce:	d877      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd0:	2b50      	cmp	r3, #80	; 0x50
 8004bd2:	d03c      	beq.n	8004c4e <HAL_TIM_ConfigClockSource+0xfa>
 8004bd4:	2b50      	cmp	r3, #80	; 0x50
 8004bd6:	d873      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd8:	2b40      	cmp	r3, #64	; 0x40
 8004bda:	d058      	beq.n	8004c8e <HAL_TIM_ConfigClockSource+0x13a>
 8004bdc:	2b40      	cmp	r3, #64	; 0x40
 8004bde:	d86f      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004be0:	2b30      	cmp	r3, #48	; 0x30
 8004be2:	d064      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0x15a>
 8004be4:	2b30      	cmp	r3, #48	; 0x30
 8004be6:	d86b      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d060      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0x15a>
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d867      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d05c      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0x15a>
 8004bf4:	2b10      	cmp	r3, #16
 8004bf6:	d05a      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0x15a>
 8004bf8:	e062      	b.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6818      	ldr	r0, [r3, #0]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	6899      	ldr	r1, [r3, #8]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f000 f9bb 	bl	8004f84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	609a      	str	r2, [r3, #8]
      break;
 8004c26:	e04f      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6818      	ldr	r0, [r3, #0]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	6899      	ldr	r1, [r3, #8]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f000 f9a4 	bl	8004f84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c4a:	609a      	str	r2, [r3, #8]
      break;
 8004c4c:	e03c      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6818      	ldr	r0, [r3, #0]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	6859      	ldr	r1, [r3, #4]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f000 f918 	bl	8004e90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2150      	movs	r1, #80	; 0x50
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 f971 	bl	8004f4e <TIM_ITRx_SetConfig>
      break;
 8004c6c:	e02c      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6818      	ldr	r0, [r3, #0]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	6859      	ldr	r1, [r3, #4]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f000 f937 	bl	8004eee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2160      	movs	r1, #96	; 0x60
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 f961 	bl	8004f4e <TIM_ITRx_SetConfig>
      break;
 8004c8c:	e01c      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6818      	ldr	r0, [r3, #0]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	6859      	ldr	r1, [r3, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f000 f8f8 	bl	8004e90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2140      	movs	r1, #64	; 0x40
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 f951 	bl	8004f4e <TIM_ITRx_SetConfig>
      break;
 8004cac:	e00c      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4610      	mov	r0, r2
 8004cba:	f000 f948 	bl	8004f4e <TIM_ITRx_SetConfig>
      break;
 8004cbe:	e003      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cc4:	e000      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	fffeff88 	.word	0xfffeff88

08004ce8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a46      	ldr	r2, [pc, #280]	; (8004e64 <TIM_Base_SetConfig+0x12c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d013      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d56:	d00f      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a43      	ldr	r2, [pc, #268]	; (8004e68 <TIM_Base_SetConfig+0x130>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00b      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a42      	ldr	r2, [pc, #264]	; (8004e6c <TIM_Base_SetConfig+0x134>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d007      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a41      	ldr	r2, [pc, #260]	; (8004e70 <TIM_Base_SetConfig+0x138>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d003      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a40      	ldr	r2, [pc, #256]	; (8004e74 <TIM_Base_SetConfig+0x13c>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d108      	bne.n	8004d8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a35      	ldr	r2, [pc, #212]	; (8004e64 <TIM_Base_SetConfig+0x12c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d02b      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d98:	d027      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a32      	ldr	r2, [pc, #200]	; (8004e68 <TIM_Base_SetConfig+0x130>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d023      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a31      	ldr	r2, [pc, #196]	; (8004e6c <TIM_Base_SetConfig+0x134>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d01f      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a30      	ldr	r2, [pc, #192]	; (8004e70 <TIM_Base_SetConfig+0x138>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d01b      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a2f      	ldr	r2, [pc, #188]	; (8004e74 <TIM_Base_SetConfig+0x13c>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d017      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a2e      	ldr	r2, [pc, #184]	; (8004e78 <TIM_Base_SetConfig+0x140>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d013      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a2d      	ldr	r2, [pc, #180]	; (8004e7c <TIM_Base_SetConfig+0x144>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00f      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a2c      	ldr	r2, [pc, #176]	; (8004e80 <TIM_Base_SetConfig+0x148>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00b      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a2b      	ldr	r2, [pc, #172]	; (8004e84 <TIM_Base_SetConfig+0x14c>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d007      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a2a      	ldr	r2, [pc, #168]	; (8004e88 <TIM_Base_SetConfig+0x150>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d003      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a29      	ldr	r2, [pc, #164]	; (8004e8c <TIM_Base_SetConfig+0x154>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d108      	bne.n	8004dfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a10      	ldr	r2, [pc, #64]	; (8004e64 <TIM_Base_SetConfig+0x12c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d003      	beq.n	8004e30 <TIM_Base_SetConfig+0xf8>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a12      	ldr	r2, [pc, #72]	; (8004e74 <TIM_Base_SetConfig+0x13c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d103      	bne.n	8004e38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d105      	bne.n	8004e56 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f023 0201 	bic.w	r2, r3, #1
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	611a      	str	r2, [r3, #16]
  }
}
 8004e56:	bf00      	nop
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	40010000 	.word	0x40010000
 8004e68:	40000400 	.word	0x40000400
 8004e6c:	40000800 	.word	0x40000800
 8004e70:	40000c00 	.word	0x40000c00
 8004e74:	40010400 	.word	0x40010400
 8004e78:	40014000 	.word	0x40014000
 8004e7c:	40014400 	.word	0x40014400
 8004e80:	40014800 	.word	0x40014800
 8004e84:	40001800 	.word	0x40001800
 8004e88:	40001c00 	.word	0x40001c00
 8004e8c:	40002000 	.word	0x40002000

08004e90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	f023 0201 	bic.w	r2, r3, #1
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	011b      	lsls	r3, r3, #4
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f023 030a 	bic.w	r3, r3, #10
 8004ecc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	621a      	str	r2, [r3, #32]
}
 8004ee2:	bf00      	nop
 8004ee4:	371c      	adds	r7, #28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b087      	sub	sp, #28
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	f023 0210 	bic.w	r2, r3, #16
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	031b      	lsls	r3, r3, #12
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	011b      	lsls	r3, r3, #4
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	621a      	str	r2, [r3, #32]
}
 8004f42:	bf00      	nop
 8004f44:	371c      	adds	r7, #28
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b085      	sub	sp, #20
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f043 0307 	orr.w	r3, r3, #7
 8004f70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	609a      	str	r2, [r3, #8]
}
 8004f78:	bf00      	nop
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
 8004f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	021a      	lsls	r2, r3, #8
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	609a      	str	r2, [r3, #8]
}
 8004fb8:	bf00      	nop
 8004fba:	371c      	adds	r7, #28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e06d      	b.n	80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a30      	ldr	r2, [pc, #192]	; (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d004      	beq.n	8005010 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a2f      	ldr	r2, [pc, #188]	; (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d108      	bne.n	8005022 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005016:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005028:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a20      	ldr	r2, [pc, #128]	; (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d022      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800504e:	d01d      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a1d      	ldr	r2, [pc, #116]	; (80050cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d018      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a1c      	ldr	r2, [pc, #112]	; (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d013      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a1a      	ldr	r2, [pc, #104]	; (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00e      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a15      	ldr	r2, [pc, #84]	; (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d009      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a16      	ldr	r2, [pc, #88]	; (80050d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d004      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a15      	ldr	r2, [pc, #84]	; (80050dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d10c      	bne.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005092:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	4313      	orrs	r3, r2
 800509c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	40010000 	.word	0x40010000
 80050c8:	40010400 	.word	0x40010400
 80050cc:	40000400 	.word	0x40000400
 80050d0:	40000800 	.word	0x40000800
 80050d4:	40000c00 	.word	0x40000c00
 80050d8:	40014000 	.word	0x40014000
 80050dc:	40001800 	.word	0x40001800

080050e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e040      	b.n	80051b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fb fcb6 	bl	8000ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2224      	movs	r2, #36	; 0x24
 8005148:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0201 	bic.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	2b00      	cmp	r3, #0
 8005160:	d002      	beq.n	8005168 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fde2 	bl	8005d2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fb7b 	bl	8005864 <UART_SetConfig>
 800516e:	4603      	mov	r3, r0
 8005170:	2b01      	cmp	r3, #1
 8005172:	d101      	bne.n	8005178 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e01b      	b.n	80051b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005186:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005196:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0201 	orr.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 fe61 	bl	8005e70 <UART_CheckIdleState>
 80051ae:	4603      	mov	r3, r0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08a      	sub	sp, #40	; 0x28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	4613      	mov	r3, r2
 80051c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051cc:	2b20      	cmp	r3, #32
 80051ce:	d132      	bne.n	8005236 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <HAL_UART_Receive_IT+0x24>
 80051d6:	88fb      	ldrh	r3, [r7, #6]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e02b      	b.n	8005238 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d018      	beq.n	8005226 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	e853 3f00 	ldrex	r3, [r3]
 8005200:	613b      	str	r3, [r7, #16]
   return(result);
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	461a      	mov	r2, r3
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	623b      	str	r3, [r7, #32]
 8005214:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005216:	69f9      	ldr	r1, [r7, #28]
 8005218:	6a3a      	ldr	r2, [r7, #32]
 800521a:	e841 2300 	strex	r3, r2, [r1]
 800521e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1e6      	bne.n	80051f4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005226:	88fb      	ldrh	r3, [r7, #6]
 8005228:	461a      	mov	r2, r3
 800522a:	68b9      	ldr	r1, [r7, #8]
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 ff35 	bl	800609c <UART_Start_Receive_IT>
 8005232:	4603      	mov	r3, r0
 8005234:	e000      	b.n	8005238 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005236:	2302      	movs	r3, #2
  }
}
 8005238:	4618      	mov	r0, r3
 800523a:	3728      	adds	r7, #40	; 0x28
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b0ba      	sub	sp, #232	; 0xe8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005266:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800526a:	f640 030f 	movw	r3, #2063	; 0x80f
 800526e:	4013      	ands	r3, r2
 8005270:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005274:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005278:	2b00      	cmp	r3, #0
 800527a:	d115      	bne.n	80052a8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800527c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005280:	f003 0320 	and.w	r3, r3, #32
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00f      	beq.n	80052a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800528c:	f003 0320 	and.w	r3, r3, #32
 8005290:	2b00      	cmp	r3, #0
 8005292:	d009      	beq.n	80052a8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 82ac 	beq.w	80057f6 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	4798      	blx	r3
      }
      return;
 80052a6:	e2a6      	b.n	80057f6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80052a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f000 8117 	beq.w	80054e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80052b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d106      	bne.n	80052cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80052be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80052c2:	4b85      	ldr	r3, [pc, #532]	; (80054d8 <HAL_UART_IRQHandler+0x298>)
 80052c4:	4013      	ands	r3, r2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f000 810a 	beq.w	80054e0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d011      	beq.n	80052fc <HAL_UART_IRQHandler+0xbc>
 80052d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00b      	beq.n	80052fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2201      	movs	r2, #1
 80052ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052f2:	f043 0201 	orr.w	r2, r3, #1
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d011      	beq.n	800532c <HAL_UART_IRQHandler+0xec>
 8005308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00b      	beq.n	800532c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2202      	movs	r2, #2
 800531a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005322:	f043 0204 	orr.w	r2, r3, #4
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800532c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005330:	f003 0304 	and.w	r3, r3, #4
 8005334:	2b00      	cmp	r3, #0
 8005336:	d011      	beq.n	800535c <HAL_UART_IRQHandler+0x11c>
 8005338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00b      	beq.n	800535c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2204      	movs	r2, #4
 800534a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005352:	f043 0202 	orr.w	r2, r3, #2
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800535c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005360:	f003 0308 	and.w	r3, r3, #8
 8005364:	2b00      	cmp	r3, #0
 8005366:	d017      	beq.n	8005398 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b00      	cmp	r3, #0
 8005372:	d105      	bne.n	8005380 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005378:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00b      	beq.n	8005398 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2208      	movs	r2, #8
 8005386:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800538e:	f043 0208 	orr.w	r2, r3, #8
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800539c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d012      	beq.n	80053ca <HAL_UART_IRQHandler+0x18a>
 80053a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00c      	beq.n	80053ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053c0:	f043 0220 	orr.w	r2, r3, #32
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 8212 	beq.w	80057fa <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80053d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053da:	f003 0320 	and.w	r3, r3, #32
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00d      	beq.n	80053fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80053e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e6:	f003 0320 	and.w	r3, r3, #32
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d007      	beq.n	80053fe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005404:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005412:	2b40      	cmp	r3, #64	; 0x40
 8005414:	d005      	beq.n	8005422 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005416:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800541a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800541e:	2b00      	cmp	r3, #0
 8005420:	d04f      	beq.n	80054c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 ff00 	bl	8006228 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005432:	2b40      	cmp	r3, #64	; 0x40
 8005434:	d141      	bne.n	80054ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3308      	adds	r3, #8
 800543c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005440:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800544c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005454:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	3308      	adds	r3, #8
 800545e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005462:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005466:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800546e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005472:	e841 2300 	strex	r3, r2, [r1]
 8005476:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800547a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1d9      	bne.n	8005436 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005486:	2b00      	cmp	r3, #0
 8005488:	d013      	beq.n	80054b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800548e:	4a13      	ldr	r2, [pc, #76]	; (80054dc <HAL_UART_IRQHandler+0x29c>)
 8005490:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005496:	4618      	mov	r0, r3
 8005498:	f7fc fc5c 	bl	8001d54 <HAL_DMA_Abort_IT>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d017      	beq.n	80054d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80054ac:	4610      	mov	r0, r2
 80054ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b0:	e00f      	b.n	80054d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f9b6 	bl	8005824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b8:	e00b      	b.n	80054d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f9b2 	bl	8005824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c0:	e007      	b.n	80054d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f9ae 	bl	8005824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80054d0:	e193      	b.n	80057fa <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d2:	bf00      	nop
    return;
 80054d4:	e191      	b.n	80057fa <HAL_UART_IRQHandler+0x5ba>
 80054d6:	bf00      	nop
 80054d8:	04000120 	.word	0x04000120
 80054dc:	080062f1 	.word	0x080062f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	f040 814c 	bne.w	8005782 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80054ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ee:	f003 0310 	and.w	r3, r3, #16
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 8145 	beq.w	8005782 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80054f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054fc:	f003 0310 	and.w	r3, r3, #16
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 813e 	beq.w	8005782 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2210      	movs	r2, #16
 800550c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005518:	2b40      	cmp	r3, #64	; 0x40
 800551a:	f040 80b6 	bne.w	800568a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800552a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 8165 	beq.w	80057fe <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800553a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800553e:	429a      	cmp	r2, r3
 8005540:	f080 815d 	bcs.w	80057fe <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800554a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005558:	f000 8086 	beq.w	8005668 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005564:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005568:	e853 3f00 	ldrex	r3, [r3]
 800556c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005570:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005578:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	461a      	mov	r2, r3
 8005582:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005586:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800558a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005592:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800559e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1da      	bne.n	800555c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3308      	adds	r3, #8
 80055ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055b0:	e853 3f00 	ldrex	r3, [r3]
 80055b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055b8:	f023 0301 	bic.w	r3, r3, #1
 80055bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3308      	adds	r3, #8
 80055c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80055ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80055d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055d6:	e841 2300 	strex	r3, r2, [r1]
 80055da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1e1      	bne.n	80055a6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3308      	adds	r3, #8
 80055e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055ec:	e853 3f00 	ldrex	r3, [r3]
 80055f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3308      	adds	r3, #8
 8005602:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005606:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005608:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800560c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800560e:	e841 2300 	strex	r3, r2, [r1]
 8005612:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005614:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1e3      	bne.n	80055e2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2220      	movs	r2, #32
 800561e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005638:	f023 0310 	bic.w	r3, r3, #16
 800563c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	461a      	mov	r2, r3
 8005646:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800564a:	65bb      	str	r3, [r7, #88]	; 0x58
 800564c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005650:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005652:	e841 2300 	strex	r3, r2, [r1]
 8005656:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1e4      	bne.n	8005628 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005662:	4618      	mov	r0, r3
 8005664:	f7fc fb06 	bl	8001c74 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800567a:	b29b      	uxth	r3, r3
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	b29b      	uxth	r3, r3
 8005680:	4619      	mov	r1, r3
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f8d8 	bl	8005838 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005688:	e0b9      	b.n	80057fe <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005696:	b29b      	uxth	r3, r3
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 80ab 	beq.w	8005802 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80056ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 80a6 	beq.w	8005802 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056be:	e853 3f00 	ldrex	r3, [r3]
 80056c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80056d8:	647b      	str	r3, [r7, #68]	; 0x44
 80056da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056e0:	e841 2300 	strex	r3, r2, [r1]
 80056e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1e4      	bne.n	80056b6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3308      	adds	r3, #8
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	e853 3f00 	ldrex	r3, [r3]
 80056fa:	623b      	str	r3, [r7, #32]
   return(result);
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	f023 0301 	bic.w	r3, r3, #1
 8005702:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3308      	adds	r3, #8
 800570c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005710:	633a      	str	r2, [r7, #48]	; 0x30
 8005712:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005714:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005718:	e841 2300 	strex	r3, r2, [r1]
 800571c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800571e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1e3      	bne.n	80056ec <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2220      	movs	r2, #32
 8005728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	60fb      	str	r3, [r7, #12]
   return(result);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f023 0310 	bic.w	r3, r3, #16
 800574c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	461a      	mov	r2, r3
 8005756:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800575a:	61fb      	str	r3, [r7, #28]
 800575c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575e:	69b9      	ldr	r1, [r7, #24]
 8005760:	69fa      	ldr	r2, [r7, #28]
 8005762:	e841 2300 	strex	r3, r2, [r1]
 8005766:	617b      	str	r3, [r7, #20]
   return(result);
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1e4      	bne.n	8005738 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2202      	movs	r2, #2
 8005772:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005774:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005778:	4619      	mov	r1, r3
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f85c 	bl	8005838 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005780:	e03f      	b.n	8005802 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00e      	beq.n	80057ac <HAL_UART_IRQHandler+0x56c>
 800578e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d008      	beq.n	80057ac <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80057a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f853 	bl	8005850 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057aa:	e02d      	b.n	8005808 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80057ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00e      	beq.n	80057d6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80057b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d008      	beq.n	80057d6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01c      	beq.n	8005806 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	4798      	blx	r3
    }
    return;
 80057d4:	e017      	b.n	8005806 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80057d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d012      	beq.n	8005808 <HAL_UART_IRQHandler+0x5c8>
 80057e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00c      	beq.n	8005808 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fd94 	bl	800631c <UART_EndTransmit_IT>
    return;
 80057f4:	e008      	b.n	8005808 <HAL_UART_IRQHandler+0x5c8>
      return;
 80057f6:	bf00      	nop
 80057f8:	e006      	b.n	8005808 <HAL_UART_IRQHandler+0x5c8>
    return;
 80057fa:	bf00      	nop
 80057fc:	e004      	b.n	8005808 <HAL_UART_IRQHandler+0x5c8>
      return;
 80057fe:	bf00      	nop
 8005800:	e002      	b.n	8005808 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005802:	bf00      	nop
 8005804:	e000      	b.n	8005808 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005806:	bf00      	nop
  }

}
 8005808:	37e8      	adds	r7, #232	; 0xe8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop

08005810 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	460b      	mov	r3, r1
 8005842:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b088      	sub	sp, #32
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800586c:	2300      	movs	r3, #0
 800586e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	431a      	orrs	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	4313      	orrs	r3, r2
 8005886:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	4ba6      	ldr	r3, [pc, #664]	; (8005b28 <UART_SetConfig+0x2c4>)
 8005890:	4013      	ands	r3, r2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6812      	ldr	r2, [r2, #0]
 8005896:	6979      	ldr	r1, [r7, #20]
 8005898:	430b      	orrs	r3, r1
 800589a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68da      	ldr	r2, [r3, #12]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a94      	ldr	r2, [pc, #592]	; (8005b2c <UART_SetConfig+0x2c8>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d120      	bne.n	8005922 <UART_SetConfig+0xbe>
 80058e0:	4b93      	ldr	r3, [pc, #588]	; (8005b30 <UART_SetConfig+0x2cc>)
 80058e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	2b03      	cmp	r3, #3
 80058ec:	d816      	bhi.n	800591c <UART_SetConfig+0xb8>
 80058ee:	a201      	add	r2, pc, #4	; (adr r2, 80058f4 <UART_SetConfig+0x90>)
 80058f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f4:	08005905 	.word	0x08005905
 80058f8:	08005911 	.word	0x08005911
 80058fc:	0800590b 	.word	0x0800590b
 8005900:	08005917 	.word	0x08005917
 8005904:	2301      	movs	r3, #1
 8005906:	77fb      	strb	r3, [r7, #31]
 8005908:	e150      	b.n	8005bac <UART_SetConfig+0x348>
 800590a:	2302      	movs	r3, #2
 800590c:	77fb      	strb	r3, [r7, #31]
 800590e:	e14d      	b.n	8005bac <UART_SetConfig+0x348>
 8005910:	2304      	movs	r3, #4
 8005912:	77fb      	strb	r3, [r7, #31]
 8005914:	e14a      	b.n	8005bac <UART_SetConfig+0x348>
 8005916:	2308      	movs	r3, #8
 8005918:	77fb      	strb	r3, [r7, #31]
 800591a:	e147      	b.n	8005bac <UART_SetConfig+0x348>
 800591c:	2310      	movs	r3, #16
 800591e:	77fb      	strb	r3, [r7, #31]
 8005920:	e144      	b.n	8005bac <UART_SetConfig+0x348>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a83      	ldr	r2, [pc, #524]	; (8005b34 <UART_SetConfig+0x2d0>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d132      	bne.n	8005992 <UART_SetConfig+0x12e>
 800592c:	4b80      	ldr	r3, [pc, #512]	; (8005b30 <UART_SetConfig+0x2cc>)
 800592e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005932:	f003 030c 	and.w	r3, r3, #12
 8005936:	2b0c      	cmp	r3, #12
 8005938:	d828      	bhi.n	800598c <UART_SetConfig+0x128>
 800593a:	a201      	add	r2, pc, #4	; (adr r2, 8005940 <UART_SetConfig+0xdc>)
 800593c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005940:	08005975 	.word	0x08005975
 8005944:	0800598d 	.word	0x0800598d
 8005948:	0800598d 	.word	0x0800598d
 800594c:	0800598d 	.word	0x0800598d
 8005950:	08005981 	.word	0x08005981
 8005954:	0800598d 	.word	0x0800598d
 8005958:	0800598d 	.word	0x0800598d
 800595c:	0800598d 	.word	0x0800598d
 8005960:	0800597b 	.word	0x0800597b
 8005964:	0800598d 	.word	0x0800598d
 8005968:	0800598d 	.word	0x0800598d
 800596c:	0800598d 	.word	0x0800598d
 8005970:	08005987 	.word	0x08005987
 8005974:	2300      	movs	r3, #0
 8005976:	77fb      	strb	r3, [r7, #31]
 8005978:	e118      	b.n	8005bac <UART_SetConfig+0x348>
 800597a:	2302      	movs	r3, #2
 800597c:	77fb      	strb	r3, [r7, #31]
 800597e:	e115      	b.n	8005bac <UART_SetConfig+0x348>
 8005980:	2304      	movs	r3, #4
 8005982:	77fb      	strb	r3, [r7, #31]
 8005984:	e112      	b.n	8005bac <UART_SetConfig+0x348>
 8005986:	2308      	movs	r3, #8
 8005988:	77fb      	strb	r3, [r7, #31]
 800598a:	e10f      	b.n	8005bac <UART_SetConfig+0x348>
 800598c:	2310      	movs	r3, #16
 800598e:	77fb      	strb	r3, [r7, #31]
 8005990:	e10c      	b.n	8005bac <UART_SetConfig+0x348>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a68      	ldr	r2, [pc, #416]	; (8005b38 <UART_SetConfig+0x2d4>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d120      	bne.n	80059de <UART_SetConfig+0x17a>
 800599c:	4b64      	ldr	r3, [pc, #400]	; (8005b30 <UART_SetConfig+0x2cc>)
 800599e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059a6:	2b30      	cmp	r3, #48	; 0x30
 80059a8:	d013      	beq.n	80059d2 <UART_SetConfig+0x16e>
 80059aa:	2b30      	cmp	r3, #48	; 0x30
 80059ac:	d814      	bhi.n	80059d8 <UART_SetConfig+0x174>
 80059ae:	2b20      	cmp	r3, #32
 80059b0:	d009      	beq.n	80059c6 <UART_SetConfig+0x162>
 80059b2:	2b20      	cmp	r3, #32
 80059b4:	d810      	bhi.n	80059d8 <UART_SetConfig+0x174>
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d002      	beq.n	80059c0 <UART_SetConfig+0x15c>
 80059ba:	2b10      	cmp	r3, #16
 80059bc:	d006      	beq.n	80059cc <UART_SetConfig+0x168>
 80059be:	e00b      	b.n	80059d8 <UART_SetConfig+0x174>
 80059c0:	2300      	movs	r3, #0
 80059c2:	77fb      	strb	r3, [r7, #31]
 80059c4:	e0f2      	b.n	8005bac <UART_SetConfig+0x348>
 80059c6:	2302      	movs	r3, #2
 80059c8:	77fb      	strb	r3, [r7, #31]
 80059ca:	e0ef      	b.n	8005bac <UART_SetConfig+0x348>
 80059cc:	2304      	movs	r3, #4
 80059ce:	77fb      	strb	r3, [r7, #31]
 80059d0:	e0ec      	b.n	8005bac <UART_SetConfig+0x348>
 80059d2:	2308      	movs	r3, #8
 80059d4:	77fb      	strb	r3, [r7, #31]
 80059d6:	e0e9      	b.n	8005bac <UART_SetConfig+0x348>
 80059d8:	2310      	movs	r3, #16
 80059da:	77fb      	strb	r3, [r7, #31]
 80059dc:	e0e6      	b.n	8005bac <UART_SetConfig+0x348>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a56      	ldr	r2, [pc, #344]	; (8005b3c <UART_SetConfig+0x2d8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d120      	bne.n	8005a2a <UART_SetConfig+0x1c6>
 80059e8:	4b51      	ldr	r3, [pc, #324]	; (8005b30 <UART_SetConfig+0x2cc>)
 80059ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80059f2:	2bc0      	cmp	r3, #192	; 0xc0
 80059f4:	d013      	beq.n	8005a1e <UART_SetConfig+0x1ba>
 80059f6:	2bc0      	cmp	r3, #192	; 0xc0
 80059f8:	d814      	bhi.n	8005a24 <UART_SetConfig+0x1c0>
 80059fa:	2b80      	cmp	r3, #128	; 0x80
 80059fc:	d009      	beq.n	8005a12 <UART_SetConfig+0x1ae>
 80059fe:	2b80      	cmp	r3, #128	; 0x80
 8005a00:	d810      	bhi.n	8005a24 <UART_SetConfig+0x1c0>
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <UART_SetConfig+0x1a8>
 8005a06:	2b40      	cmp	r3, #64	; 0x40
 8005a08:	d006      	beq.n	8005a18 <UART_SetConfig+0x1b4>
 8005a0a:	e00b      	b.n	8005a24 <UART_SetConfig+0x1c0>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	77fb      	strb	r3, [r7, #31]
 8005a10:	e0cc      	b.n	8005bac <UART_SetConfig+0x348>
 8005a12:	2302      	movs	r3, #2
 8005a14:	77fb      	strb	r3, [r7, #31]
 8005a16:	e0c9      	b.n	8005bac <UART_SetConfig+0x348>
 8005a18:	2304      	movs	r3, #4
 8005a1a:	77fb      	strb	r3, [r7, #31]
 8005a1c:	e0c6      	b.n	8005bac <UART_SetConfig+0x348>
 8005a1e:	2308      	movs	r3, #8
 8005a20:	77fb      	strb	r3, [r7, #31]
 8005a22:	e0c3      	b.n	8005bac <UART_SetConfig+0x348>
 8005a24:	2310      	movs	r3, #16
 8005a26:	77fb      	strb	r3, [r7, #31]
 8005a28:	e0c0      	b.n	8005bac <UART_SetConfig+0x348>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a44      	ldr	r2, [pc, #272]	; (8005b40 <UART_SetConfig+0x2dc>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d125      	bne.n	8005a80 <UART_SetConfig+0x21c>
 8005a34:	4b3e      	ldr	r3, [pc, #248]	; (8005b30 <UART_SetConfig+0x2cc>)
 8005a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a42:	d017      	beq.n	8005a74 <UART_SetConfig+0x210>
 8005a44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a48:	d817      	bhi.n	8005a7a <UART_SetConfig+0x216>
 8005a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a4e:	d00b      	beq.n	8005a68 <UART_SetConfig+0x204>
 8005a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a54:	d811      	bhi.n	8005a7a <UART_SetConfig+0x216>
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <UART_SetConfig+0x1fe>
 8005a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a5e:	d006      	beq.n	8005a6e <UART_SetConfig+0x20a>
 8005a60:	e00b      	b.n	8005a7a <UART_SetConfig+0x216>
 8005a62:	2300      	movs	r3, #0
 8005a64:	77fb      	strb	r3, [r7, #31]
 8005a66:	e0a1      	b.n	8005bac <UART_SetConfig+0x348>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	77fb      	strb	r3, [r7, #31]
 8005a6c:	e09e      	b.n	8005bac <UART_SetConfig+0x348>
 8005a6e:	2304      	movs	r3, #4
 8005a70:	77fb      	strb	r3, [r7, #31]
 8005a72:	e09b      	b.n	8005bac <UART_SetConfig+0x348>
 8005a74:	2308      	movs	r3, #8
 8005a76:	77fb      	strb	r3, [r7, #31]
 8005a78:	e098      	b.n	8005bac <UART_SetConfig+0x348>
 8005a7a:	2310      	movs	r3, #16
 8005a7c:	77fb      	strb	r3, [r7, #31]
 8005a7e:	e095      	b.n	8005bac <UART_SetConfig+0x348>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a2f      	ldr	r2, [pc, #188]	; (8005b44 <UART_SetConfig+0x2e0>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d125      	bne.n	8005ad6 <UART_SetConfig+0x272>
 8005a8a:	4b29      	ldr	r3, [pc, #164]	; (8005b30 <UART_SetConfig+0x2cc>)
 8005a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a98:	d017      	beq.n	8005aca <UART_SetConfig+0x266>
 8005a9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a9e:	d817      	bhi.n	8005ad0 <UART_SetConfig+0x26c>
 8005aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aa4:	d00b      	beq.n	8005abe <UART_SetConfig+0x25a>
 8005aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aaa:	d811      	bhi.n	8005ad0 <UART_SetConfig+0x26c>
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <UART_SetConfig+0x254>
 8005ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab4:	d006      	beq.n	8005ac4 <UART_SetConfig+0x260>
 8005ab6:	e00b      	b.n	8005ad0 <UART_SetConfig+0x26c>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	77fb      	strb	r3, [r7, #31]
 8005abc:	e076      	b.n	8005bac <UART_SetConfig+0x348>
 8005abe:	2302      	movs	r3, #2
 8005ac0:	77fb      	strb	r3, [r7, #31]
 8005ac2:	e073      	b.n	8005bac <UART_SetConfig+0x348>
 8005ac4:	2304      	movs	r3, #4
 8005ac6:	77fb      	strb	r3, [r7, #31]
 8005ac8:	e070      	b.n	8005bac <UART_SetConfig+0x348>
 8005aca:	2308      	movs	r3, #8
 8005acc:	77fb      	strb	r3, [r7, #31]
 8005ace:	e06d      	b.n	8005bac <UART_SetConfig+0x348>
 8005ad0:	2310      	movs	r3, #16
 8005ad2:	77fb      	strb	r3, [r7, #31]
 8005ad4:	e06a      	b.n	8005bac <UART_SetConfig+0x348>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a1b      	ldr	r2, [pc, #108]	; (8005b48 <UART_SetConfig+0x2e4>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d138      	bne.n	8005b52 <UART_SetConfig+0x2ee>
 8005ae0:	4b13      	ldr	r3, [pc, #76]	; (8005b30 <UART_SetConfig+0x2cc>)
 8005ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005aea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005aee:	d017      	beq.n	8005b20 <UART_SetConfig+0x2bc>
 8005af0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005af4:	d82a      	bhi.n	8005b4c <UART_SetConfig+0x2e8>
 8005af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005afa:	d00b      	beq.n	8005b14 <UART_SetConfig+0x2b0>
 8005afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b00:	d824      	bhi.n	8005b4c <UART_SetConfig+0x2e8>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <UART_SetConfig+0x2aa>
 8005b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b0a:	d006      	beq.n	8005b1a <UART_SetConfig+0x2b6>
 8005b0c:	e01e      	b.n	8005b4c <UART_SetConfig+0x2e8>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	77fb      	strb	r3, [r7, #31]
 8005b12:	e04b      	b.n	8005bac <UART_SetConfig+0x348>
 8005b14:	2302      	movs	r3, #2
 8005b16:	77fb      	strb	r3, [r7, #31]
 8005b18:	e048      	b.n	8005bac <UART_SetConfig+0x348>
 8005b1a:	2304      	movs	r3, #4
 8005b1c:	77fb      	strb	r3, [r7, #31]
 8005b1e:	e045      	b.n	8005bac <UART_SetConfig+0x348>
 8005b20:	2308      	movs	r3, #8
 8005b22:	77fb      	strb	r3, [r7, #31]
 8005b24:	e042      	b.n	8005bac <UART_SetConfig+0x348>
 8005b26:	bf00      	nop
 8005b28:	efff69f3 	.word	0xefff69f3
 8005b2c:	40011000 	.word	0x40011000
 8005b30:	40023800 	.word	0x40023800
 8005b34:	40004400 	.word	0x40004400
 8005b38:	40004800 	.word	0x40004800
 8005b3c:	40004c00 	.word	0x40004c00
 8005b40:	40005000 	.word	0x40005000
 8005b44:	40011400 	.word	0x40011400
 8005b48:	40007800 	.word	0x40007800
 8005b4c:	2310      	movs	r3, #16
 8005b4e:	77fb      	strb	r3, [r7, #31]
 8005b50:	e02c      	b.n	8005bac <UART_SetConfig+0x348>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a72      	ldr	r2, [pc, #456]	; (8005d20 <UART_SetConfig+0x4bc>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d125      	bne.n	8005ba8 <UART_SetConfig+0x344>
 8005b5c:	4b71      	ldr	r3, [pc, #452]	; (8005d24 <UART_SetConfig+0x4c0>)
 8005b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005b66:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b6a:	d017      	beq.n	8005b9c <UART_SetConfig+0x338>
 8005b6c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b70:	d817      	bhi.n	8005ba2 <UART_SetConfig+0x33e>
 8005b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b76:	d00b      	beq.n	8005b90 <UART_SetConfig+0x32c>
 8005b78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b7c:	d811      	bhi.n	8005ba2 <UART_SetConfig+0x33e>
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <UART_SetConfig+0x326>
 8005b82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b86:	d006      	beq.n	8005b96 <UART_SetConfig+0x332>
 8005b88:	e00b      	b.n	8005ba2 <UART_SetConfig+0x33e>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	77fb      	strb	r3, [r7, #31]
 8005b8e:	e00d      	b.n	8005bac <UART_SetConfig+0x348>
 8005b90:	2302      	movs	r3, #2
 8005b92:	77fb      	strb	r3, [r7, #31]
 8005b94:	e00a      	b.n	8005bac <UART_SetConfig+0x348>
 8005b96:	2304      	movs	r3, #4
 8005b98:	77fb      	strb	r3, [r7, #31]
 8005b9a:	e007      	b.n	8005bac <UART_SetConfig+0x348>
 8005b9c:	2308      	movs	r3, #8
 8005b9e:	77fb      	strb	r3, [r7, #31]
 8005ba0:	e004      	b.n	8005bac <UART_SetConfig+0x348>
 8005ba2:	2310      	movs	r3, #16
 8005ba4:	77fb      	strb	r3, [r7, #31]
 8005ba6:	e001      	b.n	8005bac <UART_SetConfig+0x348>
 8005ba8:	2310      	movs	r3, #16
 8005baa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bb4:	d15b      	bne.n	8005c6e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005bb6:	7ffb      	ldrb	r3, [r7, #31]
 8005bb8:	2b08      	cmp	r3, #8
 8005bba:	d828      	bhi.n	8005c0e <UART_SetConfig+0x3aa>
 8005bbc:	a201      	add	r2, pc, #4	; (adr r2, 8005bc4 <UART_SetConfig+0x360>)
 8005bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc2:	bf00      	nop
 8005bc4:	08005be9 	.word	0x08005be9
 8005bc8:	08005bf1 	.word	0x08005bf1
 8005bcc:	08005bf9 	.word	0x08005bf9
 8005bd0:	08005c0f 	.word	0x08005c0f
 8005bd4:	08005bff 	.word	0x08005bff
 8005bd8:	08005c0f 	.word	0x08005c0f
 8005bdc:	08005c0f 	.word	0x08005c0f
 8005be0:	08005c0f 	.word	0x08005c0f
 8005be4:	08005c07 	.word	0x08005c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be8:	f7fe f98c 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 8005bec:	61b8      	str	r0, [r7, #24]
        break;
 8005bee:	e013      	b.n	8005c18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bf0:	f7fe f99c 	bl	8003f2c <HAL_RCC_GetPCLK2Freq>
 8005bf4:	61b8      	str	r0, [r7, #24]
        break;
 8005bf6:	e00f      	b.n	8005c18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bf8:	4b4b      	ldr	r3, [pc, #300]	; (8005d28 <UART_SetConfig+0x4c4>)
 8005bfa:	61bb      	str	r3, [r7, #24]
        break;
 8005bfc:	e00c      	b.n	8005c18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bfe:	f7fe f8af 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8005c02:	61b8      	str	r0, [r7, #24]
        break;
 8005c04:	e008      	b.n	8005c18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c0a:	61bb      	str	r3, [r7, #24]
        break;
 8005c0c:	e004      	b.n	8005c18 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	77bb      	strb	r3, [r7, #30]
        break;
 8005c16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d074      	beq.n	8005d08 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	005a      	lsls	r2, r3, #1
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	085b      	lsrs	r3, r3, #1
 8005c28:	441a      	add	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	2b0f      	cmp	r3, #15
 8005c38:	d916      	bls.n	8005c68 <UART_SetConfig+0x404>
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c40:	d212      	bcs.n	8005c68 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	f023 030f 	bic.w	r3, r3, #15
 8005c4a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	085b      	lsrs	r3, r3, #1
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	89fb      	ldrh	r3, [r7, #14]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	89fa      	ldrh	r2, [r7, #14]
 8005c64:	60da      	str	r2, [r3, #12]
 8005c66:	e04f      	b.n	8005d08 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	77bb      	strb	r3, [r7, #30]
 8005c6c:	e04c      	b.n	8005d08 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c6e:	7ffb      	ldrb	r3, [r7, #31]
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d828      	bhi.n	8005cc6 <UART_SetConfig+0x462>
 8005c74:	a201      	add	r2, pc, #4	; (adr r2, 8005c7c <UART_SetConfig+0x418>)
 8005c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7a:	bf00      	nop
 8005c7c:	08005ca1 	.word	0x08005ca1
 8005c80:	08005ca9 	.word	0x08005ca9
 8005c84:	08005cb1 	.word	0x08005cb1
 8005c88:	08005cc7 	.word	0x08005cc7
 8005c8c:	08005cb7 	.word	0x08005cb7
 8005c90:	08005cc7 	.word	0x08005cc7
 8005c94:	08005cc7 	.word	0x08005cc7
 8005c98:	08005cc7 	.word	0x08005cc7
 8005c9c:	08005cbf 	.word	0x08005cbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ca0:	f7fe f930 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 8005ca4:	61b8      	str	r0, [r7, #24]
        break;
 8005ca6:	e013      	b.n	8005cd0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ca8:	f7fe f940 	bl	8003f2c <HAL_RCC_GetPCLK2Freq>
 8005cac:	61b8      	str	r0, [r7, #24]
        break;
 8005cae:	e00f      	b.n	8005cd0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cb0:	4b1d      	ldr	r3, [pc, #116]	; (8005d28 <UART_SetConfig+0x4c4>)
 8005cb2:	61bb      	str	r3, [r7, #24]
        break;
 8005cb4:	e00c      	b.n	8005cd0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cb6:	f7fe f853 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8005cba:	61b8      	str	r0, [r7, #24]
        break;
 8005cbc:	e008      	b.n	8005cd0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cc2:	61bb      	str	r3, [r7, #24]
        break;
 8005cc4:	e004      	b.n	8005cd0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	77bb      	strb	r3, [r7, #30]
        break;
 8005cce:	bf00      	nop
    }

    if (pclk != 0U)
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d018      	beq.n	8005d08 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	085a      	lsrs	r2, r3, #1
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	441a      	add	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	2b0f      	cmp	r3, #15
 8005cee:	d909      	bls.n	8005d04 <UART_SetConfig+0x4a0>
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf6:	d205      	bcs.n	8005d04 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	60da      	str	r2, [r3, #12]
 8005d02:	e001      	b.n	8005d08 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005d14:	7fbb      	ldrb	r3, [r7, #30]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3720      	adds	r7, #32
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	40007c00 	.word	0x40007c00
 8005d24:	40023800 	.word	0x40023800
 8005d28:	00f42400 	.word	0x00f42400

08005d2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	f003 0308 	and.w	r3, r3, #8
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00a      	beq.n	8005d56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00a      	beq.n	8005d78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00a      	beq.n	8005d9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	f003 0304 	and.w	r3, r3, #4
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00a      	beq.n	8005dbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	f003 0310 	and.w	r3, r3, #16
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00a      	beq.n	8005dde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00a      	beq.n	8005e00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d01a      	beq.n	8005e42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e2a:	d10a      	bne.n	8005e42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00a      	beq.n	8005e64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	430a      	orrs	r2, r1
 8005e62:	605a      	str	r2, [r3, #4]
  }
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b098      	sub	sp, #96	; 0x60
 8005e74:	af02      	add	r7, sp, #8
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e80:	f7fb fd3e 	bl	8001900 <HAL_GetTick>
 8005e84:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0308 	and.w	r3, r3, #8
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d12e      	bne.n	8005ef2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f88c 	bl	8005fc0 <UART_WaitOnFlagUntilTimeout>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d021      	beq.n	8005ef2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb6:	e853 3f00 	ldrex	r3, [r3]
 8005eba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ec2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ecc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ece:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ed2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ed4:	e841 2300 	strex	r3, r2, [r1]
 8005ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1e6      	bne.n	8005eae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e062      	b.n	8005fb8 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0304 	and.w	r3, r3, #4
 8005efc:	2b04      	cmp	r3, #4
 8005efe:	d149      	bne.n	8005f94 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f856 	bl	8005fc0 <UART_WaitOnFlagUntilTimeout>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d03c      	beq.n	8005f94 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	e853 3f00 	ldrex	r3, [r3]
 8005f26:	623b      	str	r3, [r7, #32]
   return(result);
 8005f28:	6a3b      	ldr	r3, [r7, #32]
 8005f2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	461a      	mov	r2, r3
 8005f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f38:	633b      	str	r3, [r7, #48]	; 0x30
 8005f3a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f40:	e841 2300 	strex	r3, r2, [r1]
 8005f44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1e6      	bne.n	8005f1a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3308      	adds	r3, #8
 8005f52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	e853 3f00 	ldrex	r3, [r3]
 8005f5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f023 0301 	bic.w	r3, r3, #1
 8005f62:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3308      	adds	r3, #8
 8005f6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f6c:	61fa      	str	r2, [r7, #28]
 8005f6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f70:	69b9      	ldr	r1, [r7, #24]
 8005f72:	69fa      	ldr	r2, [r7, #28]
 8005f74:	e841 2300 	strex	r3, r2, [r1]
 8005f78:	617b      	str	r3, [r7, #20]
   return(result);
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1e5      	bne.n	8005f4c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e011      	b.n	8005fb8 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2220      	movs	r2, #32
 8005f98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3758      	adds	r7, #88	; 0x58
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	603b      	str	r3, [r7, #0]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fd0:	e04f      	b.n	8006072 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd8:	d04b      	beq.n	8006072 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fda:	f7fb fc91 	bl	8001900 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d302      	bcc.n	8005ff0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d101      	bne.n	8005ff4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e04e      	b.n	8006092 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0304 	and.w	r3, r3, #4
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d037      	beq.n	8006072 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2b80      	cmp	r3, #128	; 0x80
 8006006:	d034      	beq.n	8006072 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2b40      	cmp	r3, #64	; 0x40
 800600c:	d031      	beq.n	8006072 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	f003 0308 	and.w	r3, r3, #8
 8006018:	2b08      	cmp	r3, #8
 800601a:	d110      	bne.n	800603e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2208      	movs	r2, #8
 8006022:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f8ff 	bl	8006228 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2208      	movs	r2, #8
 800602e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e029      	b.n	8006092 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006048:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800604c:	d111      	bne.n	8006072 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006056:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 f8e5 	bl	8006228 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2220      	movs	r2, #32
 8006062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e00f      	b.n	8006092 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69da      	ldr	r2, [r3, #28]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	4013      	ands	r3, r2
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	429a      	cmp	r2, r3
 8006080:	bf0c      	ite	eq
 8006082:	2301      	moveq	r3, #1
 8006084:	2300      	movne	r3, #0
 8006086:	b2db      	uxtb	r3, r3
 8006088:	461a      	mov	r2, r3
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	429a      	cmp	r2, r3
 800608e:	d0a0      	beq.n	8005fd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
	...

0800609c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800609c:	b480      	push	{r7}
 800609e:	b097      	sub	sp, #92	; 0x5c
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	4613      	mov	r3, r2
 80060a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	88fa      	ldrh	r2, [r7, #6]
 80060b4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	88fa      	ldrh	r2, [r7, #6]
 80060bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ce:	d10e      	bne.n	80060ee <UART_Start_Receive_IT+0x52>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d105      	bne.n	80060e4 <UART_Start_Receive_IT+0x48>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80060de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060e2:	e02d      	b.n	8006140 <UART_Start_Receive_IT+0xa4>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	22ff      	movs	r2, #255	; 0xff
 80060e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060ec:	e028      	b.n	8006140 <UART_Start_Receive_IT+0xa4>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10d      	bne.n	8006112 <UART_Start_Receive_IT+0x76>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d104      	bne.n	8006108 <UART_Start_Receive_IT+0x6c>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	22ff      	movs	r2, #255	; 0xff
 8006102:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006106:	e01b      	b.n	8006140 <UART_Start_Receive_IT+0xa4>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	227f      	movs	r2, #127	; 0x7f
 800610c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006110:	e016      	b.n	8006140 <UART_Start_Receive_IT+0xa4>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800611a:	d10d      	bne.n	8006138 <UART_Start_Receive_IT+0x9c>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d104      	bne.n	800612e <UART_Start_Receive_IT+0x92>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	227f      	movs	r2, #127	; 0x7f
 8006128:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800612c:	e008      	b.n	8006140 <UART_Start_Receive_IT+0xa4>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	223f      	movs	r2, #63	; 0x3f
 8006132:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006136:	e003      	b.n	8006140 <UART_Start_Receive_IT+0xa4>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2222      	movs	r2, #34	; 0x22
 800614c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3308      	adds	r3, #8
 8006156:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800615a:	e853 3f00 	ldrex	r3, [r3]
 800615e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006162:	f043 0301 	orr.w	r3, r3, #1
 8006166:	657b      	str	r3, [r7, #84]	; 0x54
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3308      	adds	r3, #8
 800616e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006170:	64ba      	str	r2, [r7, #72]	; 0x48
 8006172:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006174:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006176:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006178:	e841 2300 	strex	r3, r2, [r1]
 800617c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800617e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1e5      	bne.n	8006150 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800618c:	d107      	bne.n	800619e <UART_Start_Receive_IT+0x102>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d103      	bne.n	800619e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	4a21      	ldr	r2, [pc, #132]	; (8006220 <UART_Start_Receive_IT+0x184>)
 800619a:	669a      	str	r2, [r3, #104]	; 0x68
 800619c:	e002      	b.n	80061a4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	4a20      	ldr	r2, [pc, #128]	; (8006224 <UART_Start_Receive_IT+0x188>)
 80061a2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d019      	beq.n	80061e0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b4:	e853 3f00 	ldrex	r3, [r3]
 80061b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80061c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	461a      	mov	r2, r3
 80061c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ca:	637b      	str	r3, [r7, #52]	; 0x34
 80061cc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061d2:	e841 2300 	strex	r3, r2, [r1]
 80061d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1e6      	bne.n	80061ac <UART_Start_Receive_IT+0x110>
 80061de:	e018      	b.n	8006212 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	e853 3f00 	ldrex	r3, [r3]
 80061ec:	613b      	str	r3, [r7, #16]
   return(result);
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f043 0320 	orr.w	r3, r3, #32
 80061f4:	653b      	str	r3, [r7, #80]	; 0x50
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	461a      	mov	r2, r3
 80061fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061fe:	623b      	str	r3, [r7, #32]
 8006200:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006202:	69f9      	ldr	r1, [r7, #28]
 8006204:	6a3a      	ldr	r2, [r7, #32]
 8006206:	e841 2300 	strex	r3, r2, [r1]
 800620a:	61bb      	str	r3, [r7, #24]
   return(result);
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1e6      	bne.n	80061e0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	375c      	adds	r7, #92	; 0x5c
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	08006519 	.word	0x08006519
 8006224:	08006371 	.word	0x08006371

08006228 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006228:	b480      	push	{r7}
 800622a:	b095      	sub	sp, #84	; 0x54
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006238:	e853 3f00 	ldrex	r3, [r3]
 800623c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006244:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	461a      	mov	r2, r3
 800624c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800624e:	643b      	str	r3, [r7, #64]	; 0x40
 8006250:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006252:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006254:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006256:	e841 2300 	strex	r3, r2, [r1]
 800625a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800625c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1e6      	bne.n	8006230 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	3308      	adds	r3, #8
 8006268:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	e853 3f00 	ldrex	r3, [r3]
 8006270:	61fb      	str	r3, [r7, #28]
   return(result);
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	f023 0301 	bic.w	r3, r3, #1
 8006278:	64bb      	str	r3, [r7, #72]	; 0x48
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	3308      	adds	r3, #8
 8006280:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006282:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006284:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006286:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800628a:	e841 2300 	strex	r3, r2, [r1]
 800628e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1e5      	bne.n	8006262 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800629a:	2b01      	cmp	r3, #1
 800629c:	d118      	bne.n	80062d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	e853 3f00 	ldrex	r3, [r3]
 80062aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f023 0310 	bic.w	r3, r3, #16
 80062b2:	647b      	str	r3, [r7, #68]	; 0x44
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	461a      	mov	r2, r3
 80062ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062bc:	61bb      	str	r3, [r7, #24]
 80062be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c0:	6979      	ldr	r1, [r7, #20]
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	e841 2300 	strex	r3, r2, [r1]
 80062c8:	613b      	str	r3, [r7, #16]
   return(result);
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1e6      	bne.n	800629e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80062e4:	bf00      	nop
 80062e6:	3754      	adds	r7, #84	; 0x54
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f7ff fa88 	bl	8005824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006314:	bf00      	nop
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	e853 3f00 	ldrex	r3, [r3]
 8006330:	60bb      	str	r3, [r7, #8]
   return(result);
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006338:	61fb      	str	r3, [r7, #28]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	461a      	mov	r2, r3
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	61bb      	str	r3, [r7, #24]
 8006344:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006346:	6979      	ldr	r1, [r7, #20]
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	e841 2300 	strex	r3, r2, [r1]
 800634e:	613b      	str	r3, [r7, #16]
   return(result);
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1e6      	bne.n	8006324 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2220      	movs	r2, #32
 800635a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7ff fa54 	bl	8005810 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006368:	bf00      	nop
 800636a:	3720      	adds	r7, #32
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b09c      	sub	sp, #112	; 0x70
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800637e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006388:	2b22      	cmp	r3, #34	; 0x22
 800638a:	f040 80b9 	bne.w	8006500 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006398:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800639c:	b2d9      	uxtb	r1, r3
 800639e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a8:	400a      	ands	r2, r1
 80063aa:	b2d2      	uxtb	r2, r2
 80063ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063be:	b29b      	uxth	r3, r3
 80063c0:	3b01      	subs	r3, #1
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f040 809c 	bne.w	8006510 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063e0:	e853 3f00 	ldrex	r3, [r3]
 80063e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	461a      	mov	r2, r3
 80063f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80063f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063fe:	e841 2300 	strex	r3, r2, [r1]
 8006402:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1e6      	bne.n	80063d8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	3308      	adds	r3, #8
 8006410:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006414:	e853 3f00 	ldrex	r3, [r3]
 8006418:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800641a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800641c:	f023 0301 	bic.w	r3, r3, #1
 8006420:	667b      	str	r3, [r7, #100]	; 0x64
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3308      	adds	r3, #8
 8006428:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800642a:	647a      	str	r2, [r7, #68]	; 0x44
 800642c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006430:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006432:	e841 2300 	strex	r3, r2, [r1]
 8006436:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1e5      	bne.n	800640a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2220      	movs	r2, #32
 8006442:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d018      	beq.n	8006492 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	e853 3f00 	ldrex	r3, [r3]
 800646c:	623b      	str	r3, [r7, #32]
   return(result);
 800646e:	6a3b      	ldr	r3, [r7, #32]
 8006470:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006474:	663b      	str	r3, [r7, #96]	; 0x60
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	461a      	mov	r2, r3
 800647c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800647e:	633b      	str	r3, [r7, #48]	; 0x30
 8006480:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006482:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006486:	e841 2300 	strex	r3, r2, [r1]
 800648a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1e6      	bne.n	8006460 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006496:	2b01      	cmp	r3, #1
 8006498:	d12e      	bne.n	80064f8 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	e853 3f00 	ldrex	r3, [r3]
 80064ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f023 0310 	bic.w	r3, r3, #16
 80064b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	461a      	mov	r2, r3
 80064bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064be:	61fb      	str	r3, [r7, #28]
 80064c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c2:	69b9      	ldr	r1, [r7, #24]
 80064c4:	69fa      	ldr	r2, [r7, #28]
 80064c6:	e841 2300 	strex	r3, r2, [r1]
 80064ca:	617b      	str	r3, [r7, #20]
   return(result);
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1e6      	bne.n	80064a0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	f003 0310 	and.w	r3, r3, #16
 80064dc:	2b10      	cmp	r3, #16
 80064de:	d103      	bne.n	80064e8 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2210      	movs	r2, #16
 80064e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80064ee:	4619      	mov	r1, r3
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7ff f9a1 	bl	8005838 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80064f6:	e00b      	b.n	8006510 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7fa fa49 	bl	8000990 <HAL_UART_RxCpltCallback>
}
 80064fe:	e007      	b.n	8006510 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	699a      	ldr	r2, [r3, #24]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f042 0208 	orr.w	r2, r2, #8
 800650e:	619a      	str	r2, [r3, #24]
}
 8006510:	bf00      	nop
 8006512:	3770      	adds	r7, #112	; 0x70
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b09c      	sub	sp, #112	; 0x70
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006526:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006530:	2b22      	cmp	r3, #34	; 0x22
 8006532:	f040 80b9 	bne.w	80066a8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006544:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006546:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800654a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800654e:	4013      	ands	r3, r2
 8006550:	b29a      	uxth	r2, r3
 8006552:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006554:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655a:	1c9a      	adds	r2, r3, #2
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006566:	b29b      	uxth	r3, r3
 8006568:	3b01      	subs	r3, #1
 800656a:	b29a      	uxth	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006578:	b29b      	uxth	r3, r3
 800657a:	2b00      	cmp	r3, #0
 800657c:	f040 809c 	bne.w	80066b8 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006588:	e853 3f00 	ldrex	r3, [r3]
 800658c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800658e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006590:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006594:	667b      	str	r3, [r7, #100]	; 0x64
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800659e:	657b      	str	r3, [r7, #84]	; 0x54
 80065a0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80065a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80065a6:	e841 2300 	strex	r3, r2, [r1]
 80065aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80065ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1e6      	bne.n	8006580 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3308      	adds	r3, #8
 80065b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065bc:	e853 3f00 	ldrex	r3, [r3]
 80065c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c4:	f023 0301 	bic.w	r3, r3, #1
 80065c8:	663b      	str	r3, [r7, #96]	; 0x60
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3308      	adds	r3, #8
 80065d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065d2:	643a      	str	r2, [r7, #64]	; 0x40
 80065d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065da:	e841 2300 	strex	r3, r2, [r1]
 80065de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1e5      	bne.n	80065b2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2220      	movs	r2, #32
 80065ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d018      	beq.n	800663a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	e853 3f00 	ldrex	r3, [r3]
 8006614:	61fb      	str	r3, [r7, #28]
   return(result);
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800661c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	461a      	mov	r2, r3
 8006624:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006628:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800662c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800662e:	e841 2300 	strex	r3, r2, [r1]
 8006632:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1e6      	bne.n	8006608 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800663e:	2b01      	cmp	r3, #1
 8006640:	d12e      	bne.n	80066a0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	e853 3f00 	ldrex	r3, [r3]
 8006654:	60bb      	str	r3, [r7, #8]
   return(result);
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	f023 0310 	bic.w	r3, r3, #16
 800665c:	65bb      	str	r3, [r7, #88]	; 0x58
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006666:	61bb      	str	r3, [r7, #24]
 8006668:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	6979      	ldr	r1, [r7, #20]
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	613b      	str	r3, [r7, #16]
   return(result);
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1e6      	bne.n	8006648 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	f003 0310 	and.w	r3, r3, #16
 8006684:	2b10      	cmp	r3, #16
 8006686:	d103      	bne.n	8006690 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2210      	movs	r2, #16
 800668e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006696:	4619      	mov	r1, r3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7ff f8cd 	bl	8005838 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800669e:	e00b      	b.n	80066b8 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7fa f975 	bl	8000990 <HAL_UART_RxCpltCallback>
}
 80066a6:	e007      	b.n	80066b8 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699a      	ldr	r2, [r3, #24]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f042 0208 	orr.w	r2, r2, #8
 80066b6:	619a      	str	r2, [r3, #24]
}
 80066b8:	bf00      	nop
 80066ba:	3770      	adds	r7, #112	; 0x70
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80066c6:	4b87      	ldr	r3, [pc, #540]	; (80068e4 <MX_LWIP_Init+0x224>)
 80066c8:	22c0      	movs	r2, #192	; 0xc0
 80066ca:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80066cc:	4b85      	ldr	r3, [pc, #532]	; (80068e4 <MX_LWIP_Init+0x224>)
 80066ce:	22a8      	movs	r2, #168	; 0xa8
 80066d0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80066d2:	4b84      	ldr	r3, [pc, #528]	; (80068e4 <MX_LWIP_Init+0x224>)
 80066d4:	2201      	movs	r2, #1
 80066d6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 80066d8:	4b82      	ldr	r3, [pc, #520]	; (80068e4 <MX_LWIP_Init+0x224>)
 80066da:	227b      	movs	r2, #123	; 0x7b
 80066dc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80066de:	4b82      	ldr	r3, [pc, #520]	; (80068e8 <MX_LWIP_Init+0x228>)
 80066e0:	22ff      	movs	r2, #255	; 0xff
 80066e2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80066e4:	4b80      	ldr	r3, [pc, #512]	; (80068e8 <MX_LWIP_Init+0x228>)
 80066e6:	22ff      	movs	r2, #255	; 0xff
 80066e8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80066ea:	4b7f      	ldr	r3, [pc, #508]	; (80068e8 <MX_LWIP_Init+0x228>)
 80066ec:	22ff      	movs	r2, #255	; 0xff
 80066ee:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80066f0:	4b7d      	ldr	r3, [pc, #500]	; (80068e8 <MX_LWIP_Init+0x228>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80066f6:	4b7d      	ldr	r3, [pc, #500]	; (80068ec <MX_LWIP_Init+0x22c>)
 80066f8:	22c0      	movs	r2, #192	; 0xc0
 80066fa:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80066fc:	4b7b      	ldr	r3, [pc, #492]	; (80068ec <MX_LWIP_Init+0x22c>)
 80066fe:	22a8      	movs	r2, #168	; 0xa8
 8006700:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8006702:	4b7a      	ldr	r3, [pc, #488]	; (80068ec <MX_LWIP_Init+0x22c>)
 8006704:	2201      	movs	r2, #1
 8006706:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 254;
 8006708:	4b78      	ldr	r3, [pc, #480]	; (80068ec <MX_LWIP_Init+0x22c>)
 800670a:	22fe      	movs	r2, #254	; 0xfe
 800670c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800670e:	f000 fd19 	bl	8007144 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006712:	4b74      	ldr	r3, [pc, #464]	; (80068e4 <MX_LWIP_Init+0x224>)
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	061a      	lsls	r2, r3, #24
 8006718:	4b72      	ldr	r3, [pc, #456]	; (80068e4 <MX_LWIP_Init+0x224>)
 800671a:	785b      	ldrb	r3, [r3, #1]
 800671c:	041b      	lsls	r3, r3, #16
 800671e:	431a      	orrs	r2, r3
 8006720:	4b70      	ldr	r3, [pc, #448]	; (80068e4 <MX_LWIP_Init+0x224>)
 8006722:	789b      	ldrb	r3, [r3, #2]
 8006724:	021b      	lsls	r3, r3, #8
 8006726:	4313      	orrs	r3, r2
 8006728:	4a6e      	ldr	r2, [pc, #440]	; (80068e4 <MX_LWIP_Init+0x224>)
 800672a:	78d2      	ldrb	r2, [r2, #3]
 800672c:	4313      	orrs	r3, r2
 800672e:	061a      	lsls	r2, r3, #24
 8006730:	4b6c      	ldr	r3, [pc, #432]	; (80068e4 <MX_LWIP_Init+0x224>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	0619      	lsls	r1, r3, #24
 8006736:	4b6b      	ldr	r3, [pc, #428]	; (80068e4 <MX_LWIP_Init+0x224>)
 8006738:	785b      	ldrb	r3, [r3, #1]
 800673a:	041b      	lsls	r3, r3, #16
 800673c:	4319      	orrs	r1, r3
 800673e:	4b69      	ldr	r3, [pc, #420]	; (80068e4 <MX_LWIP_Init+0x224>)
 8006740:	789b      	ldrb	r3, [r3, #2]
 8006742:	021b      	lsls	r3, r3, #8
 8006744:	430b      	orrs	r3, r1
 8006746:	4967      	ldr	r1, [pc, #412]	; (80068e4 <MX_LWIP_Init+0x224>)
 8006748:	78c9      	ldrb	r1, [r1, #3]
 800674a:	430b      	orrs	r3, r1
 800674c:	021b      	lsls	r3, r3, #8
 800674e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006752:	431a      	orrs	r2, r3
 8006754:	4b63      	ldr	r3, [pc, #396]	; (80068e4 <MX_LWIP_Init+0x224>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	0619      	lsls	r1, r3, #24
 800675a:	4b62      	ldr	r3, [pc, #392]	; (80068e4 <MX_LWIP_Init+0x224>)
 800675c:	785b      	ldrb	r3, [r3, #1]
 800675e:	041b      	lsls	r3, r3, #16
 8006760:	4319      	orrs	r1, r3
 8006762:	4b60      	ldr	r3, [pc, #384]	; (80068e4 <MX_LWIP_Init+0x224>)
 8006764:	789b      	ldrb	r3, [r3, #2]
 8006766:	021b      	lsls	r3, r3, #8
 8006768:	430b      	orrs	r3, r1
 800676a:	495e      	ldr	r1, [pc, #376]	; (80068e4 <MX_LWIP_Init+0x224>)
 800676c:	78c9      	ldrb	r1, [r1, #3]
 800676e:	430b      	orrs	r3, r1
 8006770:	0a1b      	lsrs	r3, r3, #8
 8006772:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006776:	431a      	orrs	r2, r3
 8006778:	4b5a      	ldr	r3, [pc, #360]	; (80068e4 <MX_LWIP_Init+0x224>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	0619      	lsls	r1, r3, #24
 800677e:	4b59      	ldr	r3, [pc, #356]	; (80068e4 <MX_LWIP_Init+0x224>)
 8006780:	785b      	ldrb	r3, [r3, #1]
 8006782:	041b      	lsls	r3, r3, #16
 8006784:	4319      	orrs	r1, r3
 8006786:	4b57      	ldr	r3, [pc, #348]	; (80068e4 <MX_LWIP_Init+0x224>)
 8006788:	789b      	ldrb	r3, [r3, #2]
 800678a:	021b      	lsls	r3, r3, #8
 800678c:	430b      	orrs	r3, r1
 800678e:	4955      	ldr	r1, [pc, #340]	; (80068e4 <MX_LWIP_Init+0x224>)
 8006790:	78c9      	ldrb	r1, [r1, #3]
 8006792:	430b      	orrs	r3, r1
 8006794:	0e1b      	lsrs	r3, r3, #24
 8006796:	4313      	orrs	r3, r2
 8006798:	4a55      	ldr	r2, [pc, #340]	; (80068f0 <MX_LWIP_Init+0x230>)
 800679a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800679c:	4b52      	ldr	r3, [pc, #328]	; (80068e8 <MX_LWIP_Init+0x228>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	061a      	lsls	r2, r3, #24
 80067a2:	4b51      	ldr	r3, [pc, #324]	; (80068e8 <MX_LWIP_Init+0x228>)
 80067a4:	785b      	ldrb	r3, [r3, #1]
 80067a6:	041b      	lsls	r3, r3, #16
 80067a8:	431a      	orrs	r2, r3
 80067aa:	4b4f      	ldr	r3, [pc, #316]	; (80068e8 <MX_LWIP_Init+0x228>)
 80067ac:	789b      	ldrb	r3, [r3, #2]
 80067ae:	021b      	lsls	r3, r3, #8
 80067b0:	4313      	orrs	r3, r2
 80067b2:	4a4d      	ldr	r2, [pc, #308]	; (80068e8 <MX_LWIP_Init+0x228>)
 80067b4:	78d2      	ldrb	r2, [r2, #3]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	061a      	lsls	r2, r3, #24
 80067ba:	4b4b      	ldr	r3, [pc, #300]	; (80068e8 <MX_LWIP_Init+0x228>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	0619      	lsls	r1, r3, #24
 80067c0:	4b49      	ldr	r3, [pc, #292]	; (80068e8 <MX_LWIP_Init+0x228>)
 80067c2:	785b      	ldrb	r3, [r3, #1]
 80067c4:	041b      	lsls	r3, r3, #16
 80067c6:	4319      	orrs	r1, r3
 80067c8:	4b47      	ldr	r3, [pc, #284]	; (80068e8 <MX_LWIP_Init+0x228>)
 80067ca:	789b      	ldrb	r3, [r3, #2]
 80067cc:	021b      	lsls	r3, r3, #8
 80067ce:	430b      	orrs	r3, r1
 80067d0:	4945      	ldr	r1, [pc, #276]	; (80068e8 <MX_LWIP_Init+0x228>)
 80067d2:	78c9      	ldrb	r1, [r1, #3]
 80067d4:	430b      	orrs	r3, r1
 80067d6:	021b      	lsls	r3, r3, #8
 80067d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80067dc:	431a      	orrs	r2, r3
 80067de:	4b42      	ldr	r3, [pc, #264]	; (80068e8 <MX_LWIP_Init+0x228>)
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	0619      	lsls	r1, r3, #24
 80067e4:	4b40      	ldr	r3, [pc, #256]	; (80068e8 <MX_LWIP_Init+0x228>)
 80067e6:	785b      	ldrb	r3, [r3, #1]
 80067e8:	041b      	lsls	r3, r3, #16
 80067ea:	4319      	orrs	r1, r3
 80067ec:	4b3e      	ldr	r3, [pc, #248]	; (80068e8 <MX_LWIP_Init+0x228>)
 80067ee:	789b      	ldrb	r3, [r3, #2]
 80067f0:	021b      	lsls	r3, r3, #8
 80067f2:	430b      	orrs	r3, r1
 80067f4:	493c      	ldr	r1, [pc, #240]	; (80068e8 <MX_LWIP_Init+0x228>)
 80067f6:	78c9      	ldrb	r1, [r1, #3]
 80067f8:	430b      	orrs	r3, r1
 80067fa:	0a1b      	lsrs	r3, r3, #8
 80067fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006800:	431a      	orrs	r2, r3
 8006802:	4b39      	ldr	r3, [pc, #228]	; (80068e8 <MX_LWIP_Init+0x228>)
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	0619      	lsls	r1, r3, #24
 8006808:	4b37      	ldr	r3, [pc, #220]	; (80068e8 <MX_LWIP_Init+0x228>)
 800680a:	785b      	ldrb	r3, [r3, #1]
 800680c:	041b      	lsls	r3, r3, #16
 800680e:	4319      	orrs	r1, r3
 8006810:	4b35      	ldr	r3, [pc, #212]	; (80068e8 <MX_LWIP_Init+0x228>)
 8006812:	789b      	ldrb	r3, [r3, #2]
 8006814:	021b      	lsls	r3, r3, #8
 8006816:	430b      	orrs	r3, r1
 8006818:	4933      	ldr	r1, [pc, #204]	; (80068e8 <MX_LWIP_Init+0x228>)
 800681a:	78c9      	ldrb	r1, [r1, #3]
 800681c:	430b      	orrs	r3, r1
 800681e:	0e1b      	lsrs	r3, r3, #24
 8006820:	4313      	orrs	r3, r2
 8006822:	4a34      	ldr	r2, [pc, #208]	; (80068f4 <MX_LWIP_Init+0x234>)
 8006824:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006826:	4b31      	ldr	r3, [pc, #196]	; (80068ec <MX_LWIP_Init+0x22c>)
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	061a      	lsls	r2, r3, #24
 800682c:	4b2f      	ldr	r3, [pc, #188]	; (80068ec <MX_LWIP_Init+0x22c>)
 800682e:	785b      	ldrb	r3, [r3, #1]
 8006830:	041b      	lsls	r3, r3, #16
 8006832:	431a      	orrs	r2, r3
 8006834:	4b2d      	ldr	r3, [pc, #180]	; (80068ec <MX_LWIP_Init+0x22c>)
 8006836:	789b      	ldrb	r3, [r3, #2]
 8006838:	021b      	lsls	r3, r3, #8
 800683a:	4313      	orrs	r3, r2
 800683c:	4a2b      	ldr	r2, [pc, #172]	; (80068ec <MX_LWIP_Init+0x22c>)
 800683e:	78d2      	ldrb	r2, [r2, #3]
 8006840:	4313      	orrs	r3, r2
 8006842:	061a      	lsls	r2, r3, #24
 8006844:	4b29      	ldr	r3, [pc, #164]	; (80068ec <MX_LWIP_Init+0x22c>)
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	0619      	lsls	r1, r3, #24
 800684a:	4b28      	ldr	r3, [pc, #160]	; (80068ec <MX_LWIP_Init+0x22c>)
 800684c:	785b      	ldrb	r3, [r3, #1]
 800684e:	041b      	lsls	r3, r3, #16
 8006850:	4319      	orrs	r1, r3
 8006852:	4b26      	ldr	r3, [pc, #152]	; (80068ec <MX_LWIP_Init+0x22c>)
 8006854:	789b      	ldrb	r3, [r3, #2]
 8006856:	021b      	lsls	r3, r3, #8
 8006858:	430b      	orrs	r3, r1
 800685a:	4924      	ldr	r1, [pc, #144]	; (80068ec <MX_LWIP_Init+0x22c>)
 800685c:	78c9      	ldrb	r1, [r1, #3]
 800685e:	430b      	orrs	r3, r1
 8006860:	021b      	lsls	r3, r3, #8
 8006862:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006866:	431a      	orrs	r2, r3
 8006868:	4b20      	ldr	r3, [pc, #128]	; (80068ec <MX_LWIP_Init+0x22c>)
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	0619      	lsls	r1, r3, #24
 800686e:	4b1f      	ldr	r3, [pc, #124]	; (80068ec <MX_LWIP_Init+0x22c>)
 8006870:	785b      	ldrb	r3, [r3, #1]
 8006872:	041b      	lsls	r3, r3, #16
 8006874:	4319      	orrs	r1, r3
 8006876:	4b1d      	ldr	r3, [pc, #116]	; (80068ec <MX_LWIP_Init+0x22c>)
 8006878:	789b      	ldrb	r3, [r3, #2]
 800687a:	021b      	lsls	r3, r3, #8
 800687c:	430b      	orrs	r3, r1
 800687e:	491b      	ldr	r1, [pc, #108]	; (80068ec <MX_LWIP_Init+0x22c>)
 8006880:	78c9      	ldrb	r1, [r1, #3]
 8006882:	430b      	orrs	r3, r1
 8006884:	0a1b      	lsrs	r3, r3, #8
 8006886:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800688a:	431a      	orrs	r2, r3
 800688c:	4b17      	ldr	r3, [pc, #92]	; (80068ec <MX_LWIP_Init+0x22c>)
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	0619      	lsls	r1, r3, #24
 8006892:	4b16      	ldr	r3, [pc, #88]	; (80068ec <MX_LWIP_Init+0x22c>)
 8006894:	785b      	ldrb	r3, [r3, #1]
 8006896:	041b      	lsls	r3, r3, #16
 8006898:	4319      	orrs	r1, r3
 800689a:	4b14      	ldr	r3, [pc, #80]	; (80068ec <MX_LWIP_Init+0x22c>)
 800689c:	789b      	ldrb	r3, [r3, #2]
 800689e:	021b      	lsls	r3, r3, #8
 80068a0:	430b      	orrs	r3, r1
 80068a2:	4912      	ldr	r1, [pc, #72]	; (80068ec <MX_LWIP_Init+0x22c>)
 80068a4:	78c9      	ldrb	r1, [r1, #3]
 80068a6:	430b      	orrs	r3, r1
 80068a8:	0e1b      	lsrs	r3, r3, #24
 80068aa:	4313      	orrs	r3, r2
 80068ac:	4a12      	ldr	r2, [pc, #72]	; (80068f8 <MX_LWIP_Init+0x238>)
 80068ae:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80068b0:	4b12      	ldr	r3, [pc, #72]	; (80068fc <MX_LWIP_Init+0x23c>)
 80068b2:	9302      	str	r3, [sp, #8]
 80068b4:	4b12      	ldr	r3, [pc, #72]	; (8006900 <MX_LWIP_Init+0x240>)
 80068b6:	9301      	str	r3, [sp, #4]
 80068b8:	2300      	movs	r3, #0
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	4b0e      	ldr	r3, [pc, #56]	; (80068f8 <MX_LWIP_Init+0x238>)
 80068be:	4a0d      	ldr	r2, [pc, #52]	; (80068f4 <MX_LWIP_Init+0x234>)
 80068c0:	490b      	ldr	r1, [pc, #44]	; (80068f0 <MX_LWIP_Init+0x230>)
 80068c2:	4810      	ldr	r0, [pc, #64]	; (8006904 <MX_LWIP_Init+0x244>)
 80068c4:	f001 f92a 	bl	8007b1c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80068c8:	480e      	ldr	r0, [pc, #56]	; (8006904 <MX_LWIP_Init+0x244>)
 80068ca:	f001 fad9 	bl	8007e80 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80068ce:	480d      	ldr	r0, [pc, #52]	; (8006904 <MX_LWIP_Init+0x244>)
 80068d0:	f001 fae6 	bl	8007ea0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80068d4:	490c      	ldr	r1, [pc, #48]	; (8006908 <MX_LWIP_Init+0x248>)
 80068d6:	480b      	ldr	r0, [pc, #44]	; (8006904 <MX_LWIP_Init+0x244>)
 80068d8:	f001 fbe4 	bl	80080a4 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80068dc:	bf00      	nop
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20001a5c 	.word	0x20001a5c
 80068e8:	20001a60 	.word	0x20001a60
 80068ec:	20001a64 	.word	0x20001a64
 80068f0:	20001a50 	.word	0x20001a50
 80068f4:	20001a54 	.word	0x20001a54
 80068f8:	20001a58 	.word	0x20001a58
 80068fc:	08011105 	.word	0x08011105
 8006900:	08006c31 	.word	0x08006c31
 8006904:	20001a1c 	.word	0x20001a1c
 8006908:	0800690d 	.word	0x0800690d

0800690c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <SCB_InvalidateDCache_by_Addr>:
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8006932:	2320      	movs	r3, #32
 8006934:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006936:	f3bf 8f4f 	dsb	sy
}
 800693a:	bf00      	nop
    while (op_size > 0) {
 800693c:	e00b      	b.n	8006956 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800693e:	4a0d      	ldr	r2, [pc, #52]	; (8006974 <SCB_InvalidateDCache_by_Addr+0x54>)
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	4413      	add	r3, r2
 800694c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	2b00      	cmp	r3, #0
 800695a:	dcf0      	bgt.n	800693e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800695c:	f3bf 8f4f 	dsb	sy
}
 8006960:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006962:	f3bf 8f6f 	isb	sy
}
 8006966:	bf00      	nop
}
 8006968:	bf00      	nop
 800696a:	371c      	adds	r7, #28
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	e000ed00 	.word	0xe000ed00

08006978 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006984:	4b44      	ldr	r3, [pc, #272]	; (8006a98 <low_level_init+0x120>)
 8006986:	4a45      	ldr	r2, [pc, #276]	; (8006a9c <low_level_init+0x124>)
 8006988:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800698a:	2300      	movs	r3, #0
 800698c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800698e:	2380      	movs	r3, #128	; 0x80
 8006990:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8006992:	23e1      	movs	r3, #225	; 0xe1
 8006994:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8006996:	2300      	movs	r3, #0
 8006998:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800699a:	2300      	movs	r3, #0
 800699c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800699e:	2300      	movs	r3, #0
 80069a0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80069a2:	4a3d      	ldr	r2, [pc, #244]	; (8006a98 <low_level_init+0x120>)
 80069a4:	f107 0308 	add.w	r3, r7, #8
 80069a8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80069aa:	4b3b      	ldr	r3, [pc, #236]	; (8006a98 <low_level_init+0x120>)
 80069ac:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80069b0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80069b2:	4b39      	ldr	r3, [pc, #228]	; (8006a98 <low_level_init+0x120>)
 80069b4:	4a3a      	ldr	r2, [pc, #232]	; (8006aa0 <low_level_init+0x128>)
 80069b6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80069b8:	4b37      	ldr	r3, [pc, #220]	; (8006a98 <low_level_init+0x120>)
 80069ba:	4a3a      	ldr	r2, [pc, #232]	; (8006aa4 <low_level_init+0x12c>)
 80069bc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80069be:	4b36      	ldr	r3, [pc, #216]	; (8006a98 <low_level_init+0x120>)
 80069c0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80069c4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80069c6:	4834      	ldr	r0, [pc, #208]	; (8006a98 <low_level_init+0x120>)
 80069c8:	f7fb f9e6 	bl	8001d98 <HAL_ETH_Init>
 80069cc:	4603      	mov	r3, r0
 80069ce:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80069d0:	2238      	movs	r2, #56	; 0x38
 80069d2:	2100      	movs	r1, #0
 80069d4:	4834      	ldr	r0, [pc, #208]	; (8006aa8 <low_level_init+0x130>)
 80069d6:	f00a fcc7 	bl	8011368 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80069da:	4b33      	ldr	r3, [pc, #204]	; (8006aa8 <low_level_init+0x130>)
 80069dc:	2221      	movs	r2, #33	; 0x21
 80069de:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80069e0:	4b31      	ldr	r3, [pc, #196]	; (8006aa8 <low_level_init+0x130>)
 80069e2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80069e6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80069e8:	4b2f      	ldr	r3, [pc, #188]	; (8006aa8 <low_level_init+0x130>)
 80069ea:	2200      	movs	r2, #0
 80069ec:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80069ee:	482f      	ldr	r0, [pc, #188]	; (8006aac <low_level_init+0x134>)
 80069f0:	f000 ff5c 	bl	80078ac <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2206      	movs	r2, #6
 80069f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80069fc:	4b26      	ldr	r3, [pc, #152]	; (8006a98 <low_level_init+0x120>)
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	781a      	ldrb	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006a08:	4b23      	ldr	r3, [pc, #140]	; (8006a98 <low_level_init+0x120>)
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	785a      	ldrb	r2, [r3, #1]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006a14:	4b20      	ldr	r3, [pc, #128]	; (8006a98 <low_level_init+0x120>)
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	789a      	ldrb	r2, [r3, #2]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006a20:	4b1d      	ldr	r3, [pc, #116]	; (8006a98 <low_level_init+0x120>)
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	78da      	ldrb	r2, [r3, #3]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006a2c:	4b1a      	ldr	r3, [pc, #104]	; (8006a98 <low_level_init+0x120>)
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	791a      	ldrb	r2, [r3, #4]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006a38:	4b17      	ldr	r3, [pc, #92]	; (8006a98 <low_level_init+0x120>)
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	795a      	ldrb	r2, [r3, #5]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006a4a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006a52:	f043 030a 	orr.w	r3, r3, #10
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006a5e:	4914      	ldr	r1, [pc, #80]	; (8006ab0 <low_level_init+0x138>)
 8006a60:	4814      	ldr	r0, [pc, #80]	; (8006ab4 <low_level_init+0x13c>)
 8006a62:	f7fa fd92 	bl	800158a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8006a66:	4813      	ldr	r0, [pc, #76]	; (8006ab4 <low_level_init+0x13c>)
 8006a68:	f7fa fdc1 	bl	80015ee <LAN8742_Init>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d006      	beq.n	8006a80 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f001 fae6 	bl	8008044 <netif_set_link_down>
    netif_set_down(netif);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f001 fa7d 	bl	8007f78 <netif_set_down>
 8006a7e:	e008      	b.n	8006a92 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d103      	bne.n	8006a8e <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fa30 	bl	8006eec <ethernet_link_check_state>
 8006a8c:	e001      	b.n	8006a92 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 8006a8e:	f7f9 ffbf 	bl	8000a10 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	200063f4 	.word	0x200063f4
 8006a9c:	40028000 	.word	0x40028000
 8006aa0:	200200a0 	.word	0x200200a0
 8006aa4:	20020000 	.word	0x20020000
 8006aa8:	200064a4 	.word	0x200064a4
 8006aac:	08015264 	.word	0x08015264
 8006ab0:	2000000c 	.word	0x2000000c
 8006ab4:	200064dc 	.word	0x200064dc

08006ab8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b092      	sub	sp, #72	; 0x48
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006ad0:	f107 030c 	add.w	r3, r7, #12
 8006ad4:	2230      	movs	r2, #48	; 0x30
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f00a fc45 	bl	8011368 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006ade:	f107 030c 	add.w	r3, r7, #12
 8006ae2:	2230      	movs	r2, #48	; 0x30
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f00a fc3e 	bl	8011368 <memset>

  for(q = p; q != NULL; q = q->next)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	643b      	str	r3, [r7, #64]	; 0x40
 8006af0:	e045      	b.n	8006b7e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8006af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006af4:	2b03      	cmp	r3, #3
 8006af6:	d902      	bls.n	8006afe <low_level_output+0x46>
      return ERR_IF;
 8006af8:	f06f 030b 	mvn.w	r3, #11
 8006afc:	e055      	b.n	8006baa <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8006afe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b00:	6859      	ldr	r1, [r3, #4]
 8006b02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b04:	4613      	mov	r3, r2
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	4413      	add	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	3348      	adds	r3, #72	; 0x48
 8006b0e:	443b      	add	r3, r7
 8006b10:	3b3c      	subs	r3, #60	; 0x3c
 8006b12:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b16:	895b      	ldrh	r3, [r3, #10]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	005b      	lsls	r3, r3, #1
 8006b20:	4413      	add	r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	3348      	adds	r3, #72	; 0x48
 8006b26:	443b      	add	r3, r7
 8006b28:	3b38      	subs	r3, #56	; 0x38
 8006b2a:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d011      	beq.n	8006b56 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8006b32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b34:	1e5a      	subs	r2, r3, #1
 8006b36:	f107 000c 	add.w	r0, r7, #12
 8006b3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	005b      	lsls	r3, r3, #1
 8006b40:	440b      	add	r3, r1
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	18c1      	adds	r1, r0, r3
 8006b46:	4613      	mov	r3, r2
 8006b48:	005b      	lsls	r3, r3, #1
 8006b4a:	4413      	add	r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	3348      	adds	r3, #72	; 0x48
 8006b50:	443b      	add	r3, r7
 8006b52:	3b34      	subs	r3, #52	; 0x34
 8006b54:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d109      	bne.n	8006b72 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8006b5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b60:	4613      	mov	r3, r2
 8006b62:	005b      	lsls	r3, r3, #1
 8006b64:	4413      	add	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	3348      	adds	r3, #72	; 0x48
 8006b6a:	443b      	add	r3, r7
 8006b6c:	3b34      	subs	r3, #52	; 0x34
 8006b6e:	2200      	movs	r2, #0
 8006b70:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006b72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b74:	3301      	adds	r3, #1
 8006b76:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8006b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	643b      	str	r3, [r7, #64]	; 0x40
 8006b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1b6      	bne.n	8006af2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	891b      	ldrh	r3, [r3, #8]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	4b0a      	ldr	r3, [pc, #40]	; (8006bb4 <low_level_output+0xfc>)
 8006b8c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006b8e:	4a09      	ldr	r2, [pc, #36]	; (8006bb4 <low_level_output+0xfc>)
 8006b90:	f107 030c 	add.w	r3, r7, #12
 8006b94:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006b96:	4a07      	ldr	r2, [pc, #28]	; (8006bb4 <low_level_output+0xfc>)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8006b9c:	2214      	movs	r2, #20
 8006b9e:	4905      	ldr	r1, [pc, #20]	; (8006bb4 <low_level_output+0xfc>)
 8006ba0:	4805      	ldr	r0, [pc, #20]	; (8006bb8 <low_level_output+0x100>)
 8006ba2:	f7fb fa83 	bl	80020ac <HAL_ETH_Transmit>

  return errval;
 8006ba6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3748      	adds	r7, #72	; 0x48
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	200064a4 	.word	0x200064a4
 8006bb8:	200063f4 	.word	0x200063f4

08006bbc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8006bc8:	4b07      	ldr	r3, [pc, #28]	; (8006be8 <low_level_input+0x2c>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d105      	bne.n	8006bdc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006bd0:	f107 030c 	add.w	r3, r7, #12
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4805      	ldr	r0, [pc, #20]	; (8006bec <low_level_input+0x30>)
 8006bd8:	f7fb fafc 	bl	80021d4 <HAL_ETH_ReadData>
  }

  return p;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	200063f0 	.word	0x200063f0
 8006bec:	200063f4 	.word	0x200063f4

08006bf0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7ff ffdd 	bl	8006bbc <low_level_input>
 8006c02:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	6879      	ldr	r1, [r7, #4]
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	4798      	blx	r3
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d002      	beq.n	8006c20 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f001 fdc2 	bl	80087a4 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1ea      	bne.n	8006bfc <ethernetif_input+0xc>
}
 8006c26:	bf00      	nop
 8006c28:	bf00      	nop
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d106      	bne.n	8006c4c <ethernetif_init+0x1c>
 8006c3e:	4b0e      	ldr	r3, [pc, #56]	; (8006c78 <ethernetif_init+0x48>)
 8006c40:	f240 1283 	movw	r2, #387	; 0x183
 8006c44:	490d      	ldr	r1, [pc, #52]	; (8006c7c <ethernetif_init+0x4c>)
 8006c46:	480e      	ldr	r0, [pc, #56]	; (8006c80 <ethernetif_init+0x50>)
 8006c48:	f00a fb96 	bl	8011378 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2273      	movs	r2, #115	; 0x73
 8006c50:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2274      	movs	r2, #116	; 0x74
 8006c58:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a09      	ldr	r2, [pc, #36]	; (8006c84 <ethernetif_init+0x54>)
 8006c60:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a08      	ldr	r2, [pc, #32]	; (8006c88 <ethernetif_init+0x58>)
 8006c66:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7ff fe85 	bl	8006978 <low_level_init>

  return ERR_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	0801286c 	.word	0x0801286c
 8006c7c:	08012888 	.word	0x08012888
 8006c80:	08012898 	.word	0x08012898
 8006c84:	0800f5bd 	.word	0x0800f5bd
 8006c88:	08006ab9 	.word	0x08006ab9

08006c8c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006c98:	68f9      	ldr	r1, [r7, #12]
 8006c9a:	4807      	ldr	r0, [pc, #28]	; (8006cb8 <pbuf_free_custom+0x2c>)
 8006c9c:	f000 fee8 	bl	8007a70 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006ca0:	4b06      	ldr	r3, [pc, #24]	; (8006cbc <pbuf_free_custom+0x30>)
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d102      	bne.n	8006cae <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006ca8:	4b04      	ldr	r3, [pc, #16]	; (8006cbc <pbuf_free_custom+0x30>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	701a      	strb	r2, [r3, #0]
  }
}
 8006cae:	bf00      	nop
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	08015264 	.word	0x08015264
 8006cbc:	200063f0 	.word	0x200063f0

08006cc0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006cc4:	f7fa fe1c 	bl	8001900 <HAL_GetTick>
 8006cc8:	4603      	mov	r3, r0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08e      	sub	sp, #56	; 0x38
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cdc:	2200      	movs	r2, #0
 8006cde:	601a      	str	r2, [r3, #0]
 8006ce0:	605a      	str	r2, [r3, #4]
 8006ce2:	609a      	str	r2, [r3, #8]
 8006ce4:	60da      	str	r2, [r3, #12]
 8006ce6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a52      	ldr	r2, [pc, #328]	; (8006e38 <HAL_ETH_MspInit+0x168>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	f040 809e 	bne.w	8006e30 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006cf4:	4b51      	ldr	r3, [pc, #324]	; (8006e3c <HAL_ETH_MspInit+0x16c>)
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf8:	4a50      	ldr	r2, [pc, #320]	; (8006e3c <HAL_ETH_MspInit+0x16c>)
 8006cfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8006d00:	4b4e      	ldr	r3, [pc, #312]	; (8006e3c <HAL_ETH_MspInit+0x16c>)
 8006d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d08:	623b      	str	r3, [r7, #32]
 8006d0a:	6a3b      	ldr	r3, [r7, #32]
 8006d0c:	4b4b      	ldr	r3, [pc, #300]	; (8006e3c <HAL_ETH_MspInit+0x16c>)
 8006d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d10:	4a4a      	ldr	r2, [pc, #296]	; (8006e3c <HAL_ETH_MspInit+0x16c>)
 8006d12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d16:	6313      	str	r3, [r2, #48]	; 0x30
 8006d18:	4b48      	ldr	r3, [pc, #288]	; (8006e3c <HAL_ETH_MspInit+0x16c>)
 8006d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d20:	61fb      	str	r3, [r7, #28]
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	4b45      	ldr	r3, [pc, #276]	; (8006e3c <HAL_ETH_MspInit+0x16c>)
 8006d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d28:	4a44      	ldr	r2, [pc, #272]	; (8006e3c <HAL_ETH_MspInit+0x16c>)
 8006d2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8006d30:	4b42      	ldr	r3, [pc, #264]	; (8006e3c <HAL_ETH_MspInit+0x16c>)
 8006d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d38:	61bb      	str	r3, [r7, #24]
 8006d3a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d3c:	4b3f      	ldr	r3, [pc, #252]	; (8006e3c <HAL_ETH_MspInit+0x16c>)
 8006d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d40:	4a3e      	ldr	r2, [pc, #248]	; (8006e3c <HAL_ETH_MspInit+0x16c>)
 8006d42:	f043 0304 	orr.w	r3, r3, #4
 8006d46:	6313      	str	r3, [r2, #48]	; 0x30
 8006d48:	4b3c      	ldr	r3, [pc, #240]	; (8006e3c <HAL_ETH_MspInit+0x16c>)
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4c:	f003 0304 	and.w	r3, r3, #4
 8006d50:	617b      	str	r3, [r7, #20]
 8006d52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d54:	4b39      	ldr	r3, [pc, #228]	; (8006e3c <HAL_ETH_MspInit+0x16c>)
 8006d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d58:	4a38      	ldr	r2, [pc, #224]	; (8006e3c <HAL_ETH_MspInit+0x16c>)
 8006d5a:	f043 0301 	orr.w	r3, r3, #1
 8006d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8006d60:	4b36      	ldr	r3, [pc, #216]	; (8006e3c <HAL_ETH_MspInit+0x16c>)
 8006d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	613b      	str	r3, [r7, #16]
 8006d6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d6c:	4b33      	ldr	r3, [pc, #204]	; (8006e3c <HAL_ETH_MspInit+0x16c>)
 8006d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d70:	4a32      	ldr	r2, [pc, #200]	; (8006e3c <HAL_ETH_MspInit+0x16c>)
 8006d72:	f043 0302 	orr.w	r3, r3, #2
 8006d76:	6313      	str	r3, [r2, #48]	; 0x30
 8006d78:	4b30      	ldr	r3, [pc, #192]	; (8006e3c <HAL_ETH_MspInit+0x16c>)
 8006d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	60fb      	str	r3, [r7, #12]
 8006d82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006d84:	4b2d      	ldr	r3, [pc, #180]	; (8006e3c <HAL_ETH_MspInit+0x16c>)
 8006d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d88:	4a2c      	ldr	r2, [pc, #176]	; (8006e3c <HAL_ETH_MspInit+0x16c>)
 8006d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8006d90:	4b2a      	ldr	r3, [pc, #168]	; (8006e3c <HAL_ETH_MspInit+0x16c>)
 8006d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d98:	60bb      	str	r3, [r7, #8]
 8006d9a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8006d9c:	2332      	movs	r3, #50	; 0x32
 8006d9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006da0:	2302      	movs	r3, #2
 8006da2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006da4:	2300      	movs	r3, #0
 8006da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006da8:	2303      	movs	r3, #3
 8006daa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006dac:	230b      	movs	r3, #11
 8006dae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006db4:	4619      	mov	r1, r3
 8006db6:	4822      	ldr	r0, [pc, #136]	; (8006e40 <HAL_ETH_MspInit+0x170>)
 8006db8:	f7fc fa3c 	bl	8003234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8006dbc:	2386      	movs	r3, #134	; 0x86
 8006dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006dcc:	230b      	movs	r3, #11
 8006dce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	481b      	ldr	r0, [pc, #108]	; (8006e44 <HAL_ETH_MspInit+0x174>)
 8006dd8:	f7fc fa2c 	bl	8003234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006ddc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006de0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006de2:	2302      	movs	r3, #2
 8006de4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006de6:	2300      	movs	r3, #0
 8006de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dea:	2303      	movs	r3, #3
 8006dec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006dee:	230b      	movs	r3, #11
 8006df0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006df6:	4619      	mov	r1, r3
 8006df8:	4813      	ldr	r0, [pc, #76]	; (8006e48 <HAL_ETH_MspInit+0x178>)
 8006dfa:	f7fc fa1b 	bl	8003234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8006dfe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e04:	2302      	movs	r3, #2
 8006e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006e10:	230b      	movs	r3, #11
 8006e12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e18:	4619      	mov	r1, r3
 8006e1a:	480c      	ldr	r0, [pc, #48]	; (8006e4c <HAL_ETH_MspInit+0x17c>)
 8006e1c:	f7fc fa0a 	bl	8003234 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8006e20:	2200      	movs	r2, #0
 8006e22:	2100      	movs	r1, #0
 8006e24:	203d      	movs	r0, #61	; 0x3d
 8006e26:	f7fa fe76 	bl	8001b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006e2a:	203d      	movs	r0, #61	; 0x3d
 8006e2c:	f7fa fe8f 	bl	8001b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006e30:	bf00      	nop
 8006e32:	3738      	adds	r7, #56	; 0x38
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	40028000 	.word	0x40028000
 8006e3c:	40023800 	.word	0x40023800
 8006e40:	40020800 	.word	0x40020800
 8006e44:	40020000 	.word	0x40020000
 8006e48:	40020400 	.word	0x40020400
 8006e4c:	40021800 	.word	0x40021800

08006e50 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006e54:	4802      	ldr	r0, [pc, #8]	; (8006e60 <ETH_PHY_IO_Init+0x10>)
 8006e56:	f7fb fd8b 	bl	8002970 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	200063f4 	.word	0x200063f4

08006e64 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006e64:	b480      	push	{r7}
 8006e66:	af00      	add	r7, sp, #0
  return 0;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	68f9      	ldr	r1, [r7, #12]
 8006e86:	4807      	ldr	r0, [pc, #28]	; (8006ea4 <ETH_PHY_IO_ReadReg+0x30>)
 8006e88:	f7fb fbcc 	bl	8002624 <HAL_ETH_ReadPHYRegister>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d002      	beq.n	8006e98 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006e92:	f04f 33ff 	mov.w	r3, #4294967295
 8006e96:	e000      	b.n	8006e9a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	200063f4 	.word	0x200063f4

08006ea8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	68f9      	ldr	r1, [r7, #12]
 8006eba:	4807      	ldr	r0, [pc, #28]	; (8006ed8 <ETH_PHY_IO_WriteReg+0x30>)
 8006ebc:	f7fb fbfd 	bl	80026ba <HAL_ETH_WritePHYRegister>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d002      	beq.n	8006ecc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8006eca:	e000      	b.n	8006ece <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	200063f4 	.word	0x200063f4

08006edc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006ee0:	f7fa fd0e 	bl	8001900 <HAL_GetTick>
 8006ee4:	4603      	mov	r3, r0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	bd80      	pop	{r7, pc}
	...

08006eec <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b0a0      	sub	sp, #128	; 0x80
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006ef4:	f107 030c 	add.w	r3, r7, #12
 8006ef8:	2264      	movs	r2, #100	; 0x64
 8006efa:	2100      	movs	r1, #0
 8006efc:	4618      	mov	r0, r3
 8006efe:	f00a fa33 	bl	8011368 <memset>
  int32_t PHYLinkState = 0;
 8006f02:	2300      	movs	r3, #0
 8006f04:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f0e:	2300      	movs	r3, #0
 8006f10:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006f12:	483a      	ldr	r0, [pc, #232]	; (8006ffc <ethernet_link_check_state+0x110>)
 8006f14:	f7fa fc13 	bl	800173e <LAN8742_GetLinkState>
 8006f18:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006f20:	089b      	lsrs	r3, r3, #2
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00c      	beq.n	8006f46 <ethernet_link_check_state+0x5a>
 8006f2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	dc09      	bgt.n	8006f46 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 8006f32:	4833      	ldr	r0, [pc, #204]	; (8007000 <ethernet_link_check_state+0x114>)
 8006f34:	f7fb f83a 	bl	8001fac <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f001 f81d 	bl	8007f78 <netif_set_down>
    netif_set_link_down(netif);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f001 f880 	bl	8008044 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8006f44:	e055      	b.n	8006ff2 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006f4c:	f003 0304 	and.w	r3, r3, #4
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d14e      	bne.n	8006ff2 <ethernet_link_check_state+0x106>
 8006f54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	dd4b      	ble.n	8006ff2 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8006f5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f5c:	3b02      	subs	r3, #2
 8006f5e:	2b03      	cmp	r3, #3
 8006f60:	d82a      	bhi.n	8006fb8 <ethernet_link_check_state+0xcc>
 8006f62:	a201      	add	r2, pc, #4	; (adr r2, 8006f68 <ethernet_link_check_state+0x7c>)
 8006f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f68:	08006f79 	.word	0x08006f79
 8006f6c:	08006f8b 	.word	0x08006f8b
 8006f70:	08006f9b 	.word	0x08006f9b
 8006f74:	08006fab 	.word	0x08006fab
      duplex = ETH_FULLDUPLEX_MODE;
 8006f78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f7c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8006f7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f82:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006f84:	2301      	movs	r3, #1
 8006f86:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006f88:	e017      	b.n	8006fba <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8006f8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f92:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006f94:	2301      	movs	r3, #1
 8006f96:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006f98:	e00f      	b.n	8006fba <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8006f9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f9e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006fa8:	e007      	b.n	8006fba <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8006faa:	2300      	movs	r3, #0
 8006fac:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006fb6:	e000      	b.n	8006fba <ethernet_link_check_state+0xce>
      break;
 8006fb8:	bf00      	nop
    if(linkchanged)
 8006fba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d018      	beq.n	8006ff2 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006fc0:	f107 030c 	add.w	r3, r7, #12
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	480e      	ldr	r0, [pc, #56]	; (8007000 <ethernet_link_check_state+0x114>)
 8006fc8:	f7fb fbc0 	bl	800274c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006fcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fce:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8006fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fd2:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006fd4:	f107 030c 	add.w	r3, r7, #12
 8006fd8:	4619      	mov	r1, r3
 8006fda:	4809      	ldr	r0, [pc, #36]	; (8007000 <ethernet_link_check_state+0x114>)
 8006fdc:	f7fb fcad 	bl	800293a <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8006fe0:	4807      	ldr	r0, [pc, #28]	; (8007000 <ethernet_link_check_state+0x114>)
 8006fe2:	f7fa ff73 	bl	8001ecc <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 ff5a 	bl	8007ea0 <netif_set_up>
      netif_set_link_up(netif);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fff5 	bl	8007fdc <netif_set_link_up>
}
 8006ff2:	bf00      	nop
 8006ff4:	3780      	adds	r7, #128	; 0x80
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	200064dc 	.word	0x200064dc
 8007000:	200063f4 	.word	0x200063f4

08007004 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af02      	add	r7, sp, #8
 800700a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800700c:	4812      	ldr	r0, [pc, #72]	; (8007058 <HAL_ETH_RxAllocateCallback+0x54>)
 800700e:	f000 fcc1 	bl	8007994 <memp_malloc_pool>
 8007012:	60f8      	str	r0, [r7, #12]
  if (p)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d014      	beq.n	8007044 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f103 0220 	add.w	r2, r3, #32
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	4a0d      	ldr	r2, [pc, #52]	; (800705c <HAL_ETH_RxAllocateCallback+0x58>)
 8007028:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007032:	9201      	str	r2, [sp, #4]
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2241      	movs	r2, #65	; 0x41
 800703a:	2100      	movs	r1, #0
 800703c:	2000      	movs	r0, #0
 800703e:	f001 f9f7 	bl	8008430 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8007042:	e005      	b.n	8007050 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8007044:	4b06      	ldr	r3, [pc, #24]	; (8007060 <HAL_ETH_RxAllocateCallback+0x5c>)
 8007046:	2201      	movs	r2, #1
 8007048:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	601a      	str	r2, [r3, #0]
}
 8007050:	bf00      	nop
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	08015264 	.word	0x08015264
 800705c:	08006c8d 	.word	0x08006c8d
 8007060:	200063f0 	.word	0x200063f0

08007064 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b088      	sub	sp, #32
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
 8007070:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800707a:	2300      	movs	r3, #0
 800707c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	3b20      	subs	r3, #32
 8007082:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	2200      	movs	r2, #0
 8007088:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	2200      	movs	r2, #0
 800708e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	887a      	ldrh	r2, [r7, #2]
 8007094:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d103      	bne.n	80070a6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	69fa      	ldr	r2, [r7, #28]
 80070a2:	601a      	str	r2, [r3, #0]
 80070a4:	e003      	b.n	80070ae <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	69fa      	ldr	r2, [r7, #28]
 80070ac:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	69fa      	ldr	r2, [r7, #28]
 80070b2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	61fb      	str	r3, [r7, #28]
 80070ba:	e009      	b.n	80070d0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	891a      	ldrh	r2, [r3, #8]
 80070c0:	887b      	ldrh	r3, [r7, #2]
 80070c2:	4413      	add	r3, r2
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	61fb      	str	r3, [r7, #28]
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1f2      	bne.n	80070bc <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80070d6:	887b      	ldrh	r3, [r7, #2]
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7ff fc20 	bl	8006920 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 80070e0:	bf00      	nop
 80070e2:	3720      	adds	r7, #32
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	4603      	mov	r3, r0
 80070f0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80070f2:	88fb      	ldrh	r3, [r7, #6]
 80070f4:	021b      	lsls	r3, r3, #8
 80070f6:	b21a      	sxth	r2, r3
 80070f8:	88fb      	ldrh	r3, [r7, #6]
 80070fa:	0a1b      	lsrs	r3, r3, #8
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	b21b      	sxth	r3, r3
 8007100:	4313      	orrs	r3, r2
 8007102:	b21b      	sxth	r3, r3
 8007104:	b29b      	uxth	r3, r3
}
 8007106:	4618      	mov	r0, r3
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007112:	b480      	push	{r7}
 8007114:	b083      	sub	sp, #12
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	061a      	lsls	r2, r3, #24
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	021b      	lsls	r3, r3, #8
 8007122:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007126:	431a      	orrs	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	0a1b      	lsrs	r3, r3, #8
 800712c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007130:	431a      	orrs	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	0e1b      	lsrs	r3, r3, #24
 8007136:	4313      	orrs	r3, r2
}
 8007138:	4618      	mov	r0, r3
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800714a:	2300      	movs	r3, #0
 800714c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800714e:	f000 f8d5 	bl	80072fc <mem_init>
  memp_init();
 8007152:	f000 fbdb 	bl	800790c <memp_init>
  pbuf_init();
  netif_init();
 8007156:	f000 fcd9 	bl	8007b0c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800715a:	f007 f8f9 	bl	800e350 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800715e:	f001 fe51 	bl	8008e04 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8007162:	f007 f86b 	bl	800e23c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007166:	bf00      	nop
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
	...

08007170 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	4603      	mov	r3, r0
 8007178:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800717a:	4b05      	ldr	r3, [pc, #20]	; (8007190 <ptr_to_mem+0x20>)
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	88fb      	ldrh	r3, [r7, #6]
 8007180:	4413      	add	r3, r2
}
 8007182:	4618      	mov	r0, r3
 8007184:	370c      	adds	r7, #12
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	20008d28 	.word	0x20008d28

08007194 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800719c:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <mem_to_ptr+0x20>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	b29b      	uxth	r3, r3
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	20008d28 	.word	0x20008d28

080071b8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80071b8:	b590      	push	{r4, r7, lr}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80071c0:	4b45      	ldr	r3, [pc, #276]	; (80072d8 <plug_holes+0x120>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d206      	bcs.n	80071d8 <plug_holes+0x20>
 80071ca:	4b44      	ldr	r3, [pc, #272]	; (80072dc <plug_holes+0x124>)
 80071cc:	f240 12df 	movw	r2, #479	; 0x1df
 80071d0:	4943      	ldr	r1, [pc, #268]	; (80072e0 <plug_holes+0x128>)
 80071d2:	4844      	ldr	r0, [pc, #272]	; (80072e4 <plug_holes+0x12c>)
 80071d4:	f00a f8d0 	bl	8011378 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80071d8:	4b43      	ldr	r3, [pc, #268]	; (80072e8 <plug_holes+0x130>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d306      	bcc.n	80071f0 <plug_holes+0x38>
 80071e2:	4b3e      	ldr	r3, [pc, #248]	; (80072dc <plug_holes+0x124>)
 80071e4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80071e8:	4940      	ldr	r1, [pc, #256]	; (80072ec <plug_holes+0x134>)
 80071ea:	483e      	ldr	r0, [pc, #248]	; (80072e4 <plug_holes+0x12c>)
 80071ec:	f00a f8c4 	bl	8011378 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	791b      	ldrb	r3, [r3, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d006      	beq.n	8007206 <plug_holes+0x4e>
 80071f8:	4b38      	ldr	r3, [pc, #224]	; (80072dc <plug_holes+0x124>)
 80071fa:	f240 12e1 	movw	r2, #481	; 0x1e1
 80071fe:	493c      	ldr	r1, [pc, #240]	; (80072f0 <plug_holes+0x138>)
 8007200:	4838      	ldr	r0, [pc, #224]	; (80072e4 <plug_holes+0x12c>)
 8007202:	f00a f8b9 	bl	8011378 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	881b      	ldrh	r3, [r3, #0]
 800720a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800720e:	d906      	bls.n	800721e <plug_holes+0x66>
 8007210:	4b32      	ldr	r3, [pc, #200]	; (80072dc <plug_holes+0x124>)
 8007212:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007216:	4937      	ldr	r1, [pc, #220]	; (80072f4 <plug_holes+0x13c>)
 8007218:	4832      	ldr	r0, [pc, #200]	; (80072e4 <plug_holes+0x12c>)
 800721a:	f00a f8ad 	bl	8011378 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	881b      	ldrh	r3, [r3, #0]
 8007222:	4618      	mov	r0, r3
 8007224:	f7ff ffa4 	bl	8007170 <ptr_to_mem>
 8007228:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	429a      	cmp	r2, r3
 8007230:	d024      	beq.n	800727c <plug_holes+0xc4>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	791b      	ldrb	r3, [r3, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d120      	bne.n	800727c <plug_holes+0xc4>
 800723a:	4b2b      	ldr	r3, [pc, #172]	; (80072e8 <plug_holes+0x130>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	429a      	cmp	r2, r3
 8007242:	d01b      	beq.n	800727c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007244:	4b2c      	ldr	r3, [pc, #176]	; (80072f8 <plug_holes+0x140>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	429a      	cmp	r2, r3
 800724c:	d102      	bne.n	8007254 <plug_holes+0x9c>
      lfree = mem;
 800724e:	4a2a      	ldr	r2, [pc, #168]	; (80072f8 <plug_holes+0x140>)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	881a      	ldrh	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	881b      	ldrh	r3, [r3, #0]
 8007260:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007264:	d00a      	beq.n	800727c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	881b      	ldrh	r3, [r3, #0]
 800726a:	4618      	mov	r0, r3
 800726c:	f7ff ff80 	bl	8007170 <ptr_to_mem>
 8007270:	4604      	mov	r4, r0
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7ff ff8e 	bl	8007194 <mem_to_ptr>
 8007278:	4603      	mov	r3, r0
 800727a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	885b      	ldrh	r3, [r3, #2]
 8007280:	4618      	mov	r0, r3
 8007282:	f7ff ff75 	bl	8007170 <ptr_to_mem>
 8007286:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	429a      	cmp	r2, r3
 800728e:	d01f      	beq.n	80072d0 <plug_holes+0x118>
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	791b      	ldrb	r3, [r3, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d11b      	bne.n	80072d0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007298:	4b17      	ldr	r3, [pc, #92]	; (80072f8 <plug_holes+0x140>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d102      	bne.n	80072a8 <plug_holes+0xf0>
      lfree = pmem;
 80072a2:	4a15      	ldr	r2, [pc, #84]	; (80072f8 <plug_holes+0x140>)
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	881a      	ldrh	r2, [r3, #0]
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80072b8:	d00a      	beq.n	80072d0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	881b      	ldrh	r3, [r3, #0]
 80072be:	4618      	mov	r0, r3
 80072c0:	f7ff ff56 	bl	8007170 <ptr_to_mem>
 80072c4:	4604      	mov	r4, r0
 80072c6:	68b8      	ldr	r0, [r7, #8]
 80072c8:	f7ff ff64 	bl	8007194 <mem_to_ptr>
 80072cc:	4603      	mov	r3, r0
 80072ce:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80072d0:	bf00      	nop
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd90      	pop	{r4, r7, pc}
 80072d8:	20008d28 	.word	0x20008d28
 80072dc:	080128c0 	.word	0x080128c0
 80072e0:	080128f0 	.word	0x080128f0
 80072e4:	08012908 	.word	0x08012908
 80072e8:	20008d2c 	.word	0x20008d2c
 80072ec:	08012930 	.word	0x08012930
 80072f0:	0801294c 	.word	0x0801294c
 80072f4:	08012968 	.word	0x08012968
 80072f8:	20008d30 	.word	0x20008d30

080072fc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007302:	4b18      	ldr	r3, [pc, #96]	; (8007364 <mem_init+0x68>)
 8007304:	3303      	adds	r3, #3
 8007306:	f023 0303 	bic.w	r3, r3, #3
 800730a:	461a      	mov	r2, r3
 800730c:	4b16      	ldr	r3, [pc, #88]	; (8007368 <mem_init+0x6c>)
 800730e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007310:	4b15      	ldr	r3, [pc, #84]	; (8007368 <mem_init+0x6c>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800731c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800732a:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800732e:	f7ff ff1f 	bl	8007170 <ptr_to_mem>
 8007332:	4603      	mov	r3, r0
 8007334:	4a0d      	ldr	r2, [pc, #52]	; (800736c <mem_init+0x70>)
 8007336:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007338:	4b0c      	ldr	r3, [pc, #48]	; (800736c <mem_init+0x70>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2201      	movs	r2, #1
 800733e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007340:	4b0a      	ldr	r3, [pc, #40]	; (800736c <mem_init+0x70>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8007348:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800734a:	4b08      	ldr	r3, [pc, #32]	; (800736c <mem_init+0x70>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8007352:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007354:	4b04      	ldr	r3, [pc, #16]	; (8007368 <mem_init+0x6c>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a05      	ldr	r2, [pc, #20]	; (8007370 <mem_init+0x74>)
 800735a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800735c:	bf00      	nop
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	20006514 	.word	0x20006514
 8007368:	20008d28 	.word	0x20008d28
 800736c:	20008d2c 	.word	0x20008d2c
 8007370:	20008d30 	.word	0x20008d30

08007374 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7ff ff09 	bl	8007194 <mem_to_ptr>
 8007382:	4603      	mov	r3, r0
 8007384:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	4618      	mov	r0, r3
 800738c:	f7ff fef0 	bl	8007170 <ptr_to_mem>
 8007390:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	885b      	ldrh	r3, [r3, #2]
 8007396:	4618      	mov	r0, r3
 8007398:	f7ff feea 	bl	8007170 <ptr_to_mem>
 800739c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80073a6:	d818      	bhi.n	80073da <mem_link_valid+0x66>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	885b      	ldrh	r3, [r3, #2]
 80073ac:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80073b0:	d813      	bhi.n	80073da <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80073b6:	8afa      	ldrh	r2, [r7, #22]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d004      	beq.n	80073c6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	881b      	ldrh	r3, [r3, #0]
 80073c0:	8afa      	ldrh	r2, [r7, #22]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d109      	bne.n	80073da <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80073c6:	4b08      	ldr	r3, [pc, #32]	; (80073e8 <mem_link_valid+0x74>)
 80073c8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d006      	beq.n	80073de <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	885b      	ldrh	r3, [r3, #2]
 80073d4:	8afa      	ldrh	r2, [r7, #22]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d001      	beq.n	80073de <mem_link_valid+0x6a>
    return 0;
 80073da:	2300      	movs	r3, #0
 80073dc:	e000      	b.n	80073e0 <mem_link_valid+0x6c>
  }
  return 1;
 80073de:	2301      	movs	r3, #1
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3718      	adds	r7, #24
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	20008d2c 	.word	0x20008d2c

080073ec <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d04c      	beq.n	8007494 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f003 0303 	and.w	r3, r3, #3
 8007400:	2b00      	cmp	r3, #0
 8007402:	d007      	beq.n	8007414 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007404:	4b25      	ldr	r3, [pc, #148]	; (800749c <mem_free+0xb0>)
 8007406:	f240 2273 	movw	r2, #627	; 0x273
 800740a:	4925      	ldr	r1, [pc, #148]	; (80074a0 <mem_free+0xb4>)
 800740c:	4825      	ldr	r0, [pc, #148]	; (80074a4 <mem_free+0xb8>)
 800740e:	f009 ffb3 	bl	8011378 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007412:	e040      	b.n	8007496 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	3b08      	subs	r3, #8
 8007418:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800741a:	4b23      	ldr	r3, [pc, #140]	; (80074a8 <mem_free+0xbc>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	429a      	cmp	r2, r3
 8007422:	d306      	bcc.n	8007432 <mem_free+0x46>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f103 020c 	add.w	r2, r3, #12
 800742a:	4b20      	ldr	r3, [pc, #128]	; (80074ac <mem_free+0xc0>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	429a      	cmp	r2, r3
 8007430:	d907      	bls.n	8007442 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007432:	4b1a      	ldr	r3, [pc, #104]	; (800749c <mem_free+0xb0>)
 8007434:	f240 227f 	movw	r2, #639	; 0x27f
 8007438:	491d      	ldr	r1, [pc, #116]	; (80074b0 <mem_free+0xc4>)
 800743a:	481a      	ldr	r0, [pc, #104]	; (80074a4 <mem_free+0xb8>)
 800743c:	f009 ff9c 	bl	8011378 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007440:	e029      	b.n	8007496 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	791b      	ldrb	r3, [r3, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d107      	bne.n	800745a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800744a:	4b14      	ldr	r3, [pc, #80]	; (800749c <mem_free+0xb0>)
 800744c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007450:	4918      	ldr	r1, [pc, #96]	; (80074b4 <mem_free+0xc8>)
 8007452:	4814      	ldr	r0, [pc, #80]	; (80074a4 <mem_free+0xb8>)
 8007454:	f009 ff90 	bl	8011378 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007458:	e01d      	b.n	8007496 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f7ff ff8a 	bl	8007374 <mem_link_valid>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d107      	bne.n	8007476 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007466:	4b0d      	ldr	r3, [pc, #52]	; (800749c <mem_free+0xb0>)
 8007468:	f240 2295 	movw	r2, #661	; 0x295
 800746c:	4912      	ldr	r1, [pc, #72]	; (80074b8 <mem_free+0xcc>)
 800746e:	480d      	ldr	r0, [pc, #52]	; (80074a4 <mem_free+0xb8>)
 8007470:	f009 ff82 	bl	8011378 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007474:	e00f      	b.n	8007496 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800747c:	4b0f      	ldr	r3, [pc, #60]	; (80074bc <mem_free+0xd0>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	429a      	cmp	r2, r3
 8007484:	d202      	bcs.n	800748c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007486:	4a0d      	ldr	r2, [pc, #52]	; (80074bc <mem_free+0xd0>)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f7ff fe93 	bl	80071b8 <plug_holes>
 8007492:	e000      	b.n	8007496 <mem_free+0xaa>
    return;
 8007494:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	080128c0 	.word	0x080128c0
 80074a0:	08012994 	.word	0x08012994
 80074a4:	08012908 	.word	0x08012908
 80074a8:	20008d28 	.word	0x20008d28
 80074ac:	20008d2c 	.word	0x20008d2c
 80074b0:	080129b8 	.word	0x080129b8
 80074b4:	080129d4 	.word	0x080129d4
 80074b8:	080129fc 	.word	0x080129fc
 80074bc:	20008d30 	.word	0x20008d30

080074c0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b088      	sub	sp, #32
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	460b      	mov	r3, r1
 80074ca:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80074cc:	887b      	ldrh	r3, [r7, #2]
 80074ce:	3303      	adds	r3, #3
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	f023 0303 	bic.w	r3, r3, #3
 80074d6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80074d8:	8bfb      	ldrh	r3, [r7, #30]
 80074da:	2b0b      	cmp	r3, #11
 80074dc:	d801      	bhi.n	80074e2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80074de:	230c      	movs	r3, #12
 80074e0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80074e2:	8bfb      	ldrh	r3, [r7, #30]
 80074e4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80074e8:	d803      	bhi.n	80074f2 <mem_trim+0x32>
 80074ea:	8bfa      	ldrh	r2, [r7, #30]
 80074ec:	887b      	ldrh	r3, [r7, #2]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d201      	bcs.n	80074f6 <mem_trim+0x36>
    return NULL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	e0cc      	b.n	8007690 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80074f6:	4b68      	ldr	r3, [pc, #416]	; (8007698 <mem_trim+0x1d8>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d304      	bcc.n	800750a <mem_trim+0x4a>
 8007500:	4b66      	ldr	r3, [pc, #408]	; (800769c <mem_trim+0x1dc>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	429a      	cmp	r2, r3
 8007508:	d306      	bcc.n	8007518 <mem_trim+0x58>
 800750a:	4b65      	ldr	r3, [pc, #404]	; (80076a0 <mem_trim+0x1e0>)
 800750c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8007510:	4964      	ldr	r1, [pc, #400]	; (80076a4 <mem_trim+0x1e4>)
 8007512:	4865      	ldr	r0, [pc, #404]	; (80076a8 <mem_trim+0x1e8>)
 8007514:	f009 ff30 	bl	8011378 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007518:	4b5f      	ldr	r3, [pc, #380]	; (8007698 <mem_trim+0x1d8>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	429a      	cmp	r2, r3
 8007520:	d304      	bcc.n	800752c <mem_trim+0x6c>
 8007522:	4b5e      	ldr	r3, [pc, #376]	; (800769c <mem_trim+0x1dc>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	429a      	cmp	r2, r3
 800752a:	d301      	bcc.n	8007530 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	e0af      	b.n	8007690 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	3b08      	subs	r3, #8
 8007534:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007536:	69b8      	ldr	r0, [r7, #24]
 8007538:	f7ff fe2c 	bl	8007194 <mem_to_ptr>
 800753c:	4603      	mov	r3, r0
 800753e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	881a      	ldrh	r2, [r3, #0]
 8007544:	8afb      	ldrh	r3, [r7, #22]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	b29b      	uxth	r3, r3
 800754a:	3b08      	subs	r3, #8
 800754c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800754e:	8bfa      	ldrh	r2, [r7, #30]
 8007550:	8abb      	ldrh	r3, [r7, #20]
 8007552:	429a      	cmp	r2, r3
 8007554:	d906      	bls.n	8007564 <mem_trim+0xa4>
 8007556:	4b52      	ldr	r3, [pc, #328]	; (80076a0 <mem_trim+0x1e0>)
 8007558:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800755c:	4953      	ldr	r1, [pc, #332]	; (80076ac <mem_trim+0x1ec>)
 800755e:	4852      	ldr	r0, [pc, #328]	; (80076a8 <mem_trim+0x1e8>)
 8007560:	f009 ff0a 	bl	8011378 <iprintf>
  if (newsize > size) {
 8007564:	8bfa      	ldrh	r2, [r7, #30]
 8007566:	8abb      	ldrh	r3, [r7, #20]
 8007568:	429a      	cmp	r2, r3
 800756a:	d901      	bls.n	8007570 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800756c:	2300      	movs	r3, #0
 800756e:	e08f      	b.n	8007690 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8007570:	8bfa      	ldrh	r2, [r7, #30]
 8007572:	8abb      	ldrh	r3, [r7, #20]
 8007574:	429a      	cmp	r2, r3
 8007576:	d101      	bne.n	800757c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	e089      	b.n	8007690 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	881b      	ldrh	r3, [r3, #0]
 8007580:	4618      	mov	r0, r3
 8007582:	f7ff fdf5 	bl	8007170 <ptr_to_mem>
 8007586:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	791b      	ldrb	r3, [r3, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d13f      	bne.n	8007610 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	881b      	ldrh	r3, [r3, #0]
 8007594:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007598:	d106      	bne.n	80075a8 <mem_trim+0xe8>
 800759a:	4b41      	ldr	r3, [pc, #260]	; (80076a0 <mem_trim+0x1e0>)
 800759c:	f240 22f5 	movw	r2, #757	; 0x2f5
 80075a0:	4943      	ldr	r1, [pc, #268]	; (80076b0 <mem_trim+0x1f0>)
 80075a2:	4841      	ldr	r0, [pc, #260]	; (80076a8 <mem_trim+0x1e8>)
 80075a4:	f009 fee8 	bl	8011378 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80075ae:	8afa      	ldrh	r2, [r7, #22]
 80075b0:	8bfb      	ldrh	r3, [r7, #30]
 80075b2:	4413      	add	r3, r2
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	3308      	adds	r3, #8
 80075b8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80075ba:	4b3e      	ldr	r3, [pc, #248]	; (80076b4 <mem_trim+0x1f4>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d106      	bne.n	80075d2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80075c4:	89fb      	ldrh	r3, [r7, #14]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7ff fdd2 	bl	8007170 <ptr_to_mem>
 80075cc:	4603      	mov	r3, r0
 80075ce:	4a39      	ldr	r2, [pc, #228]	; (80076b4 <mem_trim+0x1f4>)
 80075d0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80075d2:	89fb      	ldrh	r3, [r7, #14]
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7ff fdcb 	bl	8007170 <ptr_to_mem>
 80075da:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	2200      	movs	r2, #0
 80075e0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	89ba      	ldrh	r2, [r7, #12]
 80075e6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	8afa      	ldrh	r2, [r7, #22]
 80075ec:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	89fa      	ldrh	r2, [r7, #14]
 80075f2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	881b      	ldrh	r3, [r3, #0]
 80075f8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80075fc:	d047      	beq.n	800768e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	4618      	mov	r0, r3
 8007604:	f7ff fdb4 	bl	8007170 <ptr_to_mem>
 8007608:	4602      	mov	r2, r0
 800760a:	89fb      	ldrh	r3, [r7, #14]
 800760c:	8053      	strh	r3, [r2, #2]
 800760e:	e03e      	b.n	800768e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007610:	8bfb      	ldrh	r3, [r7, #30]
 8007612:	f103 0214 	add.w	r2, r3, #20
 8007616:	8abb      	ldrh	r3, [r7, #20]
 8007618:	429a      	cmp	r2, r3
 800761a:	d838      	bhi.n	800768e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800761c:	8afa      	ldrh	r2, [r7, #22]
 800761e:	8bfb      	ldrh	r3, [r7, #30]
 8007620:	4413      	add	r3, r2
 8007622:	b29b      	uxth	r3, r3
 8007624:	3308      	adds	r3, #8
 8007626:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007630:	d106      	bne.n	8007640 <mem_trim+0x180>
 8007632:	4b1b      	ldr	r3, [pc, #108]	; (80076a0 <mem_trim+0x1e0>)
 8007634:	f240 3216 	movw	r2, #790	; 0x316
 8007638:	491d      	ldr	r1, [pc, #116]	; (80076b0 <mem_trim+0x1f0>)
 800763a:	481b      	ldr	r0, [pc, #108]	; (80076a8 <mem_trim+0x1e8>)
 800763c:	f009 fe9c 	bl	8011378 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007640:	89fb      	ldrh	r3, [r7, #14]
 8007642:	4618      	mov	r0, r3
 8007644:	f7ff fd94 	bl	8007170 <ptr_to_mem>
 8007648:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800764a:	4b1a      	ldr	r3, [pc, #104]	; (80076b4 <mem_trim+0x1f4>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	693a      	ldr	r2, [r7, #16]
 8007650:	429a      	cmp	r2, r3
 8007652:	d202      	bcs.n	800765a <mem_trim+0x19a>
      lfree = mem2;
 8007654:	4a17      	ldr	r2, [pc, #92]	; (80076b4 <mem_trim+0x1f4>)
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	2200      	movs	r2, #0
 800765e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	881a      	ldrh	r2, [r3, #0]
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	8afa      	ldrh	r2, [r7, #22]
 800766c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	89fa      	ldrh	r2, [r7, #14]
 8007672:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	881b      	ldrh	r3, [r3, #0]
 8007678:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800767c:	d007      	beq.n	800768e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	881b      	ldrh	r3, [r3, #0]
 8007682:	4618      	mov	r0, r3
 8007684:	f7ff fd74 	bl	8007170 <ptr_to_mem>
 8007688:	4602      	mov	r2, r0
 800768a:	89fb      	ldrh	r3, [r7, #14]
 800768c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800768e:	687b      	ldr	r3, [r7, #4]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3720      	adds	r7, #32
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	20008d28 	.word	0x20008d28
 800769c:	20008d2c 	.word	0x20008d2c
 80076a0:	080128c0 	.word	0x080128c0
 80076a4:	08012a30 	.word	0x08012a30
 80076a8:	08012908 	.word	0x08012908
 80076ac:	08012a48 	.word	0x08012a48
 80076b0:	08012a68 	.word	0x08012a68
 80076b4:	20008d30 	.word	0x20008d30

080076b8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b088      	sub	sp, #32
 80076bc:	af00      	add	r7, sp, #0
 80076be:	4603      	mov	r3, r0
 80076c0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80076c2:	88fb      	ldrh	r3, [r7, #6]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d101      	bne.n	80076cc <mem_malloc+0x14>
    return NULL;
 80076c8:	2300      	movs	r3, #0
 80076ca:	e0d9      	b.n	8007880 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80076cc:	88fb      	ldrh	r3, [r7, #6]
 80076ce:	3303      	adds	r3, #3
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	f023 0303 	bic.w	r3, r3, #3
 80076d6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80076d8:	8bbb      	ldrh	r3, [r7, #28]
 80076da:	2b0b      	cmp	r3, #11
 80076dc:	d801      	bhi.n	80076e2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80076de:	230c      	movs	r3, #12
 80076e0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80076e2:	8bbb      	ldrh	r3, [r7, #28]
 80076e4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80076e8:	d803      	bhi.n	80076f2 <mem_malloc+0x3a>
 80076ea:	8bba      	ldrh	r2, [r7, #28]
 80076ec:	88fb      	ldrh	r3, [r7, #6]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d201      	bcs.n	80076f6 <mem_malloc+0x3e>
    return NULL;
 80076f2:	2300      	movs	r3, #0
 80076f4:	e0c4      	b.n	8007880 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80076f6:	4b64      	ldr	r3, [pc, #400]	; (8007888 <mem_malloc+0x1d0>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7ff fd4a 	bl	8007194 <mem_to_ptr>
 8007700:	4603      	mov	r3, r0
 8007702:	83fb      	strh	r3, [r7, #30]
 8007704:	e0b4      	b.n	8007870 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8007706:	8bfb      	ldrh	r3, [r7, #30]
 8007708:	4618      	mov	r0, r3
 800770a:	f7ff fd31 	bl	8007170 <ptr_to_mem>
 800770e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	791b      	ldrb	r3, [r3, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	f040 80a4 	bne.w	8007862 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	461a      	mov	r2, r3
 8007720:	8bfb      	ldrh	r3, [r7, #30]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	f1a3 0208 	sub.w	r2, r3, #8
 8007728:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800772a:	429a      	cmp	r2, r3
 800772c:	f0c0 8099 	bcc.w	8007862 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	461a      	mov	r2, r3
 8007736:	8bfb      	ldrh	r3, [r7, #30]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	f1a3 0208 	sub.w	r2, r3, #8
 800773e:	8bbb      	ldrh	r3, [r7, #28]
 8007740:	3314      	adds	r3, #20
 8007742:	429a      	cmp	r2, r3
 8007744:	d333      	bcc.n	80077ae <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007746:	8bfa      	ldrh	r2, [r7, #30]
 8007748:	8bbb      	ldrh	r3, [r7, #28]
 800774a:	4413      	add	r3, r2
 800774c:	b29b      	uxth	r3, r3
 800774e:	3308      	adds	r3, #8
 8007750:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007752:	8a7b      	ldrh	r3, [r7, #18]
 8007754:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007758:	d106      	bne.n	8007768 <mem_malloc+0xb0>
 800775a:	4b4c      	ldr	r3, [pc, #304]	; (800788c <mem_malloc+0x1d4>)
 800775c:	f240 3287 	movw	r2, #903	; 0x387
 8007760:	494b      	ldr	r1, [pc, #300]	; (8007890 <mem_malloc+0x1d8>)
 8007762:	484c      	ldr	r0, [pc, #304]	; (8007894 <mem_malloc+0x1dc>)
 8007764:	f009 fe08 	bl	8011378 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007768:	8a7b      	ldrh	r3, [r7, #18]
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff fd00 	bl	8007170 <ptr_to_mem>
 8007770:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	881a      	ldrh	r2, [r3, #0]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	8bfa      	ldrh	r2, [r7, #30]
 8007784:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	8a7a      	ldrh	r2, [r7, #18]
 800778a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	2201      	movs	r2, #1
 8007790:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	881b      	ldrh	r3, [r3, #0]
 8007796:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800779a:	d00b      	beq.n	80077b4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7ff fce5 	bl	8007170 <ptr_to_mem>
 80077a6:	4602      	mov	r2, r0
 80077a8:	8a7b      	ldrh	r3, [r7, #18]
 80077aa:	8053      	strh	r3, [r2, #2]
 80077ac:	e002      	b.n	80077b4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	2201      	movs	r2, #1
 80077b2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80077b4:	4b34      	ldr	r3, [pc, #208]	; (8007888 <mem_malloc+0x1d0>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d127      	bne.n	800780e <mem_malloc+0x156>
          struct mem *cur = lfree;
 80077be:	4b32      	ldr	r3, [pc, #200]	; (8007888 <mem_malloc+0x1d0>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80077c4:	e005      	b.n	80077d2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7ff fcd0 	bl	8007170 <ptr_to_mem>
 80077d0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	791b      	ldrb	r3, [r3, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d004      	beq.n	80077e4 <mem_malloc+0x12c>
 80077da:	4b2f      	ldr	r3, [pc, #188]	; (8007898 <mem_malloc+0x1e0>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	69ba      	ldr	r2, [r7, #24]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d1f0      	bne.n	80077c6 <mem_malloc+0x10e>
          }
          lfree = cur;
 80077e4:	4a28      	ldr	r2, [pc, #160]	; (8007888 <mem_malloc+0x1d0>)
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80077ea:	4b27      	ldr	r3, [pc, #156]	; (8007888 <mem_malloc+0x1d0>)
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	4b2a      	ldr	r3, [pc, #168]	; (8007898 <mem_malloc+0x1e0>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d00b      	beq.n	800780e <mem_malloc+0x156>
 80077f6:	4b24      	ldr	r3, [pc, #144]	; (8007888 <mem_malloc+0x1d0>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	791b      	ldrb	r3, [r3, #4]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d006      	beq.n	800780e <mem_malloc+0x156>
 8007800:	4b22      	ldr	r3, [pc, #136]	; (800788c <mem_malloc+0x1d4>)
 8007802:	f240 32b5 	movw	r2, #949	; 0x3b5
 8007806:	4925      	ldr	r1, [pc, #148]	; (800789c <mem_malloc+0x1e4>)
 8007808:	4822      	ldr	r0, [pc, #136]	; (8007894 <mem_malloc+0x1dc>)
 800780a:	f009 fdb5 	bl	8011378 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800780e:	8bba      	ldrh	r2, [r7, #28]
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	4413      	add	r3, r2
 8007814:	3308      	adds	r3, #8
 8007816:	4a20      	ldr	r2, [pc, #128]	; (8007898 <mem_malloc+0x1e0>)
 8007818:	6812      	ldr	r2, [r2, #0]
 800781a:	4293      	cmp	r3, r2
 800781c:	d906      	bls.n	800782c <mem_malloc+0x174>
 800781e:	4b1b      	ldr	r3, [pc, #108]	; (800788c <mem_malloc+0x1d4>)
 8007820:	f240 32b9 	movw	r2, #953	; 0x3b9
 8007824:	491e      	ldr	r1, [pc, #120]	; (80078a0 <mem_malloc+0x1e8>)
 8007826:	481b      	ldr	r0, [pc, #108]	; (8007894 <mem_malloc+0x1dc>)
 8007828:	f009 fda6 	bl	8011378 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	f003 0303 	and.w	r3, r3, #3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d006      	beq.n	8007844 <mem_malloc+0x18c>
 8007836:	4b15      	ldr	r3, [pc, #84]	; (800788c <mem_malloc+0x1d4>)
 8007838:	f240 32bb 	movw	r2, #955	; 0x3bb
 800783c:	4919      	ldr	r1, [pc, #100]	; (80078a4 <mem_malloc+0x1ec>)
 800783e:	4815      	ldr	r0, [pc, #84]	; (8007894 <mem_malloc+0x1dc>)
 8007840:	f009 fd9a 	bl	8011378 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	f003 0303 	and.w	r3, r3, #3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d006      	beq.n	800785c <mem_malloc+0x1a4>
 800784e:	4b0f      	ldr	r3, [pc, #60]	; (800788c <mem_malloc+0x1d4>)
 8007850:	f240 32bd 	movw	r2, #957	; 0x3bd
 8007854:	4914      	ldr	r1, [pc, #80]	; (80078a8 <mem_malloc+0x1f0>)
 8007856:	480f      	ldr	r0, [pc, #60]	; (8007894 <mem_malloc+0x1dc>)
 8007858:	f009 fd8e 	bl	8011378 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	3308      	adds	r3, #8
 8007860:	e00e      	b.n	8007880 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8007862:	8bfb      	ldrh	r3, [r7, #30]
 8007864:	4618      	mov	r0, r3
 8007866:	f7ff fc83 	bl	8007170 <ptr_to_mem>
 800786a:	4603      	mov	r3, r0
 800786c:	881b      	ldrh	r3, [r3, #0]
 800786e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007870:	8bfa      	ldrh	r2, [r7, #30]
 8007872:	8bbb      	ldrh	r3, [r7, #28]
 8007874:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8007878:	429a      	cmp	r2, r3
 800787a:	f4ff af44 	bcc.w	8007706 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3720      	adds	r7, #32
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	20008d30 	.word	0x20008d30
 800788c:	080128c0 	.word	0x080128c0
 8007890:	08012a68 	.word	0x08012a68
 8007894:	08012908 	.word	0x08012908
 8007898:	20008d2c 	.word	0x20008d2c
 800789c:	08012a7c 	.word	0x08012a7c
 80078a0:	08012a98 	.word	0x08012a98
 80078a4:	08012ac8 	.word	0x08012ac8
 80078a8:	08012af8 	.word	0x08012af8

080078ac <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	2200      	movs	r2, #0
 80078ba:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	3303      	adds	r3, #3
 80078c2:	f023 0303 	bic.w	r3, r3, #3
 80078c6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80078c8:	2300      	movs	r3, #0
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	e011      	b.n	80078f2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	461a      	mov	r2, r3
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	4413      	add	r3, r2
 80078ea:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	3301      	adds	r3, #1
 80078f0:	60fb      	str	r3, [r7, #12]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	885b      	ldrh	r3, [r3, #2]
 80078f6:	461a      	mov	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	4293      	cmp	r3, r2
 80078fc:	dbe7      	blt.n	80078ce <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80078fe:	bf00      	nop
 8007900:	bf00      	nop
 8007902:	3714      	adds	r7, #20
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007912:	2300      	movs	r3, #0
 8007914:	80fb      	strh	r3, [r7, #6]
 8007916:	e009      	b.n	800792c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007918:	88fb      	ldrh	r3, [r7, #6]
 800791a:	4a08      	ldr	r2, [pc, #32]	; (800793c <memp_init+0x30>)
 800791c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007920:	4618      	mov	r0, r3
 8007922:	f7ff ffc3 	bl	80078ac <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007926:	88fb      	ldrh	r3, [r7, #6]
 8007928:	3301      	adds	r3, #1
 800792a:	80fb      	strh	r3, [r7, #6]
 800792c:	88fb      	ldrh	r3, [r7, #6]
 800792e:	2b08      	cmp	r3, #8
 8007930:	d9f2      	bls.n	8007918 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007932:	bf00      	nop
 8007934:	bf00      	nop
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	080152dc 	.word	0x080152dc

08007940 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d012      	beq.n	800797c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	6812      	ldr	r2, [r2, #0]
 800795e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f003 0303 	and.w	r3, r3, #3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d006      	beq.n	8007978 <do_memp_malloc_pool+0x38>
 800796a:	4b07      	ldr	r3, [pc, #28]	; (8007988 <do_memp_malloc_pool+0x48>)
 800796c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8007970:	4906      	ldr	r1, [pc, #24]	; (800798c <do_memp_malloc_pool+0x4c>)
 8007972:	4807      	ldr	r0, [pc, #28]	; (8007990 <do_memp_malloc_pool+0x50>)
 8007974:	f009 fd00 	bl	8011378 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	e000      	b.n	800797e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	08012b1c 	.word	0x08012b1c
 800798c:	08012b4c 	.word	0x08012b4c
 8007990:	08012b70 	.word	0x08012b70

08007994 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d106      	bne.n	80079b0 <memp_malloc_pool+0x1c>
 80079a2:	4b0a      	ldr	r3, [pc, #40]	; (80079cc <memp_malloc_pool+0x38>)
 80079a4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80079a8:	4909      	ldr	r1, [pc, #36]	; (80079d0 <memp_malloc_pool+0x3c>)
 80079aa:	480a      	ldr	r0, [pc, #40]	; (80079d4 <memp_malloc_pool+0x40>)
 80079ac:	f009 fce4 	bl	8011378 <iprintf>
  if (desc == NULL) {
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d101      	bne.n	80079ba <memp_malloc_pool+0x26>
    return NULL;
 80079b6:	2300      	movs	r3, #0
 80079b8:	e003      	b.n	80079c2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7ff ffc0 	bl	8007940 <do_memp_malloc_pool>
 80079c0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	08012b1c 	.word	0x08012b1c
 80079d0:	08012b98 	.word	0x08012b98
 80079d4:	08012b70 	.word	0x08012b70

080079d8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	4603      	mov	r3, r0
 80079e0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80079e2:	79fb      	ldrb	r3, [r7, #7]
 80079e4:	2b08      	cmp	r3, #8
 80079e6:	d908      	bls.n	80079fa <memp_malloc+0x22>
 80079e8:	4b0a      	ldr	r3, [pc, #40]	; (8007a14 <memp_malloc+0x3c>)
 80079ea:	f240 1257 	movw	r2, #343	; 0x157
 80079ee:	490a      	ldr	r1, [pc, #40]	; (8007a18 <memp_malloc+0x40>)
 80079f0:	480a      	ldr	r0, [pc, #40]	; (8007a1c <memp_malloc+0x44>)
 80079f2:	f009 fcc1 	bl	8011378 <iprintf>
 80079f6:	2300      	movs	r3, #0
 80079f8:	e008      	b.n	8007a0c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80079fa:	79fb      	ldrb	r3, [r7, #7]
 80079fc:	4a08      	ldr	r2, [pc, #32]	; (8007a20 <memp_malloc+0x48>)
 80079fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7ff ff9c 	bl	8007940 <do_memp_malloc_pool>
 8007a08:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	08012b1c 	.word	0x08012b1c
 8007a18:	08012bac 	.word	0x08012bac
 8007a1c:	08012b70 	.word	0x08012b70
 8007a20:	080152dc 	.word	0x080152dc

08007a24 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	f003 0303 	and.w	r3, r3, #3
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d006      	beq.n	8007a46 <do_memp_free_pool+0x22>
 8007a38:	4b0a      	ldr	r3, [pc, #40]	; (8007a64 <do_memp_free_pool+0x40>)
 8007a3a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8007a3e:	490a      	ldr	r1, [pc, #40]	; (8007a68 <do_memp_free_pool+0x44>)
 8007a40:	480a      	ldr	r0, [pc, #40]	; (8007a6c <do_memp_free_pool+0x48>)
 8007a42:	f009 fc99 	bl	8011378 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007a5c:	bf00      	nop
 8007a5e:	3710      	adds	r7, #16
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	08012b1c 	.word	0x08012b1c
 8007a68:	08012bcc 	.word	0x08012bcc
 8007a6c:	08012b70 	.word	0x08012b70

08007a70 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d106      	bne.n	8007a8e <memp_free_pool+0x1e>
 8007a80:	4b0a      	ldr	r3, [pc, #40]	; (8007aac <memp_free_pool+0x3c>)
 8007a82:	f240 1295 	movw	r2, #405	; 0x195
 8007a86:	490a      	ldr	r1, [pc, #40]	; (8007ab0 <memp_free_pool+0x40>)
 8007a88:	480a      	ldr	r0, [pc, #40]	; (8007ab4 <memp_free_pool+0x44>)
 8007a8a:	f009 fc75 	bl	8011378 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d007      	beq.n	8007aa4 <memp_free_pool+0x34>
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d004      	beq.n	8007aa4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7ff ffc1 	bl	8007a24 <do_memp_free_pool>
 8007aa2:	e000      	b.n	8007aa6 <memp_free_pool+0x36>
    return;
 8007aa4:	bf00      	nop
}
 8007aa6:	3708      	adds	r7, #8
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	08012b1c 	.word	0x08012b1c
 8007ab0:	08012b98 	.word	0x08012b98
 8007ab4:	08012b70 	.word	0x08012b70

08007ab8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	4603      	mov	r3, r0
 8007ac0:	6039      	str	r1, [r7, #0]
 8007ac2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007ac4:	79fb      	ldrb	r3, [r7, #7]
 8007ac6:	2b08      	cmp	r3, #8
 8007ac8:	d907      	bls.n	8007ada <memp_free+0x22>
 8007aca:	4b0c      	ldr	r3, [pc, #48]	; (8007afc <memp_free+0x44>)
 8007acc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007ad0:	490b      	ldr	r1, [pc, #44]	; (8007b00 <memp_free+0x48>)
 8007ad2:	480c      	ldr	r0, [pc, #48]	; (8007b04 <memp_free+0x4c>)
 8007ad4:	f009 fc50 	bl	8011378 <iprintf>
 8007ad8:	e00c      	b.n	8007af4 <memp_free+0x3c>

  if (mem == NULL) {
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d008      	beq.n	8007af2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007ae0:	79fb      	ldrb	r3, [r7, #7]
 8007ae2:	4a09      	ldr	r2, [pc, #36]	; (8007b08 <memp_free+0x50>)
 8007ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ae8:	6839      	ldr	r1, [r7, #0]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7ff ff9a 	bl	8007a24 <do_memp_free_pool>
 8007af0:	e000      	b.n	8007af4 <memp_free+0x3c>
    return;
 8007af2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007af4:	3708      	adds	r7, #8
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	08012b1c 	.word	0x08012b1c
 8007b00:	08012bec 	.word	0x08012bec
 8007b04:	08012b70 	.word	0x08012b70
 8007b08:	080152dc 	.word	0x080152dc

08007b0c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007b10:	bf00      	nop
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
	...

08007b1c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
 8007b28:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d108      	bne.n	8007b42 <netif_add+0x26>
 8007b30:	4b57      	ldr	r3, [pc, #348]	; (8007c90 <netif_add+0x174>)
 8007b32:	f240 1227 	movw	r2, #295	; 0x127
 8007b36:	4957      	ldr	r1, [pc, #348]	; (8007c94 <netif_add+0x178>)
 8007b38:	4857      	ldr	r0, [pc, #348]	; (8007c98 <netif_add+0x17c>)
 8007b3a:	f009 fc1d 	bl	8011378 <iprintf>
 8007b3e:	2300      	movs	r3, #0
 8007b40:	e0a2      	b.n	8007c88 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d108      	bne.n	8007b5a <netif_add+0x3e>
 8007b48:	4b51      	ldr	r3, [pc, #324]	; (8007c90 <netif_add+0x174>)
 8007b4a:	f44f 7294 	mov.w	r2, #296	; 0x128
 8007b4e:	4953      	ldr	r1, [pc, #332]	; (8007c9c <netif_add+0x180>)
 8007b50:	4851      	ldr	r0, [pc, #324]	; (8007c98 <netif_add+0x17c>)
 8007b52:	f009 fc11 	bl	8011378 <iprintf>
 8007b56:	2300      	movs	r3, #0
 8007b58:	e096      	b.n	8007c88 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007b60:	4b4f      	ldr	r3, [pc, #316]	; (8007ca0 <netif_add+0x184>)
 8007b62:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d101      	bne.n	8007b6e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8007b6a:	4b4d      	ldr	r3, [pc, #308]	; (8007ca0 <netif_add+0x184>)
 8007b6c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d101      	bne.n	8007b78 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007b74:	4b4a      	ldr	r3, [pc, #296]	; (8007ca0 <netif_add+0x184>)
 8007b76:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	4a45      	ldr	r2, [pc, #276]	; (8007ca4 <netif_add+0x188>)
 8007b8e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6a3a      	ldr	r2, [r7, #32]
 8007ba8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007baa:	4b3f      	ldr	r3, [pc, #252]	; (8007ca8 <netif_add+0x18c>)
 8007bac:	781a      	ldrb	r2, [r3, #0]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bb8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	68b9      	ldr	r1, [r7, #8]
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f000 f913 	bl	8007dec <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	4798      	blx	r3
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d001      	beq.n	8007bd6 <netif_add+0xba>
    return NULL;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	e058      	b.n	8007c88 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007bdc:	2bff      	cmp	r3, #255	; 0xff
 8007bde:	d103      	bne.n	8007be8 <netif_add+0xcc>
        netif->num = 0;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8007be8:	2300      	movs	r3, #0
 8007bea:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007bec:	4b2f      	ldr	r3, [pc, #188]	; (8007cac <netif_add+0x190>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	617b      	str	r3, [r7, #20]
 8007bf2:	e02b      	b.n	8007c4c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d106      	bne.n	8007c0a <netif_add+0xee>
 8007bfc:	4b24      	ldr	r3, [pc, #144]	; (8007c90 <netif_add+0x174>)
 8007bfe:	f240 128b 	movw	r2, #395	; 0x18b
 8007c02:	492b      	ldr	r1, [pc, #172]	; (8007cb0 <netif_add+0x194>)
 8007c04:	4824      	ldr	r0, [pc, #144]	; (8007c98 <netif_add+0x17c>)
 8007c06:	f009 fbb7 	bl	8011378 <iprintf>
        num_netifs++;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	2bff      	cmp	r3, #255	; 0xff
 8007c14:	dd06      	ble.n	8007c24 <netif_add+0x108>
 8007c16:	4b1e      	ldr	r3, [pc, #120]	; (8007c90 <netif_add+0x174>)
 8007c18:	f240 128d 	movw	r2, #397	; 0x18d
 8007c1c:	4925      	ldr	r1, [pc, #148]	; (8007cb4 <netif_add+0x198>)
 8007c1e:	481e      	ldr	r0, [pc, #120]	; (8007c98 <netif_add+0x17c>)
 8007c20:	f009 fbaa 	bl	8011378 <iprintf>
        if (netif2->num == netif->num) {
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d108      	bne.n	8007c46 <netif_add+0x12a>
          netif->num++;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8007c44:	e005      	b.n	8007c52 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	617b      	str	r3, [r7, #20]
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1d0      	bne.n	8007bf4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1be      	bne.n	8007bd6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c5e:	2bfe      	cmp	r3, #254	; 0xfe
 8007c60:	d103      	bne.n	8007c6a <netif_add+0x14e>
    netif_num = 0;
 8007c62:	4b11      	ldr	r3, [pc, #68]	; (8007ca8 <netif_add+0x18c>)
 8007c64:	2200      	movs	r2, #0
 8007c66:	701a      	strb	r2, [r3, #0]
 8007c68:	e006      	b.n	8007c78 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c70:	3301      	adds	r3, #1
 8007c72:	b2da      	uxtb	r2, r3
 8007c74:	4b0c      	ldr	r3, [pc, #48]	; (8007ca8 <netif_add+0x18c>)
 8007c76:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007c78:	4b0c      	ldr	r3, [pc, #48]	; (8007cac <netif_add+0x190>)
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007c80:	4a0a      	ldr	r2, [pc, #40]	; (8007cac <netif_add+0x190>)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007c86:	68fb      	ldr	r3, [r7, #12]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3718      	adds	r7, #24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	08012c08 	.word	0x08012c08
 8007c94:	08012c9c 	.word	0x08012c9c
 8007c98:	08012c58 	.word	0x08012c58
 8007c9c:	08012cb8 	.word	0x08012cb8
 8007ca0:	08015340 	.word	0x08015340
 8007ca4:	080080c7 	.word	0x080080c7
 8007ca8:	2000bc28 	.word	0x2000bc28
 8007cac:	2000bc20 	.word	0x2000bc20
 8007cb0:	08012cdc 	.word	0x08012cdc
 8007cb4:	08012cf0 	.word	0x08012cf0

08007cb8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f002 fbe5 	bl	800a494 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f006 fff9 	bl	800ecc4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007cd2:	bf00      	nop
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
	...

08007cdc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d106      	bne.n	8007cfc <netif_do_set_ipaddr+0x20>
 8007cee:	4b1d      	ldr	r3, [pc, #116]	; (8007d64 <netif_do_set_ipaddr+0x88>)
 8007cf0:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007cf4:	491c      	ldr	r1, [pc, #112]	; (8007d68 <netif_do_set_ipaddr+0x8c>)
 8007cf6:	481d      	ldr	r0, [pc, #116]	; (8007d6c <netif_do_set_ipaddr+0x90>)
 8007cf8:	f009 fb3e 	bl	8011378 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d106      	bne.n	8007d10 <netif_do_set_ipaddr+0x34>
 8007d02:	4b18      	ldr	r3, [pc, #96]	; (8007d64 <netif_do_set_ipaddr+0x88>)
 8007d04:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8007d08:	4917      	ldr	r1, [pc, #92]	; (8007d68 <netif_do_set_ipaddr+0x8c>)
 8007d0a:	4818      	ldr	r0, [pc, #96]	; (8007d6c <netif_do_set_ipaddr+0x90>)
 8007d0c:	f009 fb34 	bl	8011378 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	3304      	adds	r3, #4
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d01c      	beq.n	8007d58 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	3304      	adds	r3, #4
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007d2e:	f107 0314 	add.w	r3, r7, #20
 8007d32:	4619      	mov	r1, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f7ff ffbf 	bl	8007cb8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d002      	beq.n	8007d46 <netif_do_set_ipaddr+0x6a>
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	e000      	b.n	8007d48 <netif_do_set_ipaddr+0x6c>
 8007d46:	2300      	movs	r3, #0
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f000 f8d2 	bl	8007ef8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007d54:	2301      	movs	r3, #1
 8007d56:	e000      	b.n	8007d5a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3718      	adds	r7, #24
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	08012c08 	.word	0x08012c08
 8007d68:	08012d20 	.word	0x08012d20
 8007d6c:	08012c58 	.word	0x08012c58

08007d70 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	3308      	adds	r3, #8
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d00a      	beq.n	8007da0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d002      	beq.n	8007d96 <netif_do_set_netmask+0x26>
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	e000      	b.n	8007d98 <netif_do_set_netmask+0x28>
 8007d96:	2300      	movs	r3, #0
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e000      	b.n	8007da2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3714      	adds	r7, #20
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b085      	sub	sp, #20
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	60f8      	str	r0, [r7, #12]
 8007db6:	60b9      	str	r1, [r7, #8]
 8007db8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	330c      	adds	r3, #12
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d00a      	beq.n	8007dde <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d002      	beq.n	8007dd4 <netif_do_set_gw+0x26>
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	e000      	b.n	8007dd6 <netif_do_set_gw+0x28>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e000      	b.n	8007de0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b088      	sub	sp, #32
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
 8007df8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d101      	bne.n	8007e0c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007e08:	4b1c      	ldr	r3, [pc, #112]	; (8007e7c <netif_set_addr+0x90>)
 8007e0a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007e12:	4b1a      	ldr	r3, [pc, #104]	; (8007e7c <netif_set_addr+0x90>)
 8007e14:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d101      	bne.n	8007e20 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007e1c:	4b17      	ldr	r3, [pc, #92]	; (8007e7c <netif_set_addr+0x90>)
 8007e1e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d003      	beq.n	8007e2e <netif_set_addr+0x42>
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <netif_set_addr+0x46>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e000      	b.n	8007e34 <netif_set_addr+0x48>
 8007e32:	2300      	movs	r3, #0
 8007e34:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d006      	beq.n	8007e4a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007e3c:	f107 0310 	add.w	r3, r7, #16
 8007e40:	461a      	mov	r2, r3
 8007e42:	68b9      	ldr	r1, [r7, #8]
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f7ff ff49 	bl	8007cdc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007e4a:	69fa      	ldr	r2, [r7, #28]
 8007e4c:	6879      	ldr	r1, [r7, #4]
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f7ff ff8e 	bl	8007d70 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007e54:	69ba      	ldr	r2, [r7, #24]
 8007e56:	6839      	ldr	r1, [r7, #0]
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f7ff ffa8 	bl	8007dae <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d106      	bne.n	8007e72 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007e64:	f107 0310 	add.w	r3, r7, #16
 8007e68:	461a      	mov	r2, r3
 8007e6a:	68b9      	ldr	r1, [r7, #8]
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f7ff ff35 	bl	8007cdc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007e72:	bf00      	nop
 8007e74:	3720      	adds	r7, #32
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	08015340 	.word	0x08015340

08007e80 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007e88:	4a04      	ldr	r2, [pc, #16]	; (8007e9c <netif_set_default+0x1c>)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007e8e:	bf00      	nop
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	2000bc24 	.word	0x2000bc24

08007ea0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d107      	bne.n	8007ebe <netif_set_up+0x1e>
 8007eae:	4b0f      	ldr	r3, [pc, #60]	; (8007eec <netif_set_up+0x4c>)
 8007eb0:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007eb4:	490e      	ldr	r1, [pc, #56]	; (8007ef0 <netif_set_up+0x50>)
 8007eb6:	480f      	ldr	r0, [pc, #60]	; (8007ef4 <netif_set_up+0x54>)
 8007eb8:	f009 fa5e 	bl	8011378 <iprintf>
 8007ebc:	e013      	b.n	8007ee6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10c      	bne.n	8007ee6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007ed2:	f043 0301 	orr.w	r3, r3, #1
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007ede:	2103      	movs	r1, #3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f809 	bl	8007ef8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	08012c08 	.word	0x08012c08
 8007ef0:	08012d90 	.word	0x08012d90
 8007ef4:	08012c58 	.word	0x08012c58

08007ef8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	460b      	mov	r3, r1
 8007f02:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d106      	bne.n	8007f18 <netif_issue_reports+0x20>
 8007f0a:	4b18      	ldr	r3, [pc, #96]	; (8007f6c <netif_issue_reports+0x74>)
 8007f0c:	f240 326d 	movw	r2, #877	; 0x36d
 8007f10:	4917      	ldr	r1, [pc, #92]	; (8007f70 <netif_issue_reports+0x78>)
 8007f12:	4818      	ldr	r0, [pc, #96]	; (8007f74 <netif_issue_reports+0x7c>)
 8007f14:	f009 fa30 	bl	8011378 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007f1e:	f003 0304 	and.w	r3, r3, #4
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d01e      	beq.n	8007f64 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007f2c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d017      	beq.n	8007f64 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007f34:	78fb      	ldrb	r3, [r7, #3]
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d013      	beq.n	8007f66 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	3304      	adds	r3, #4
 8007f42:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00e      	beq.n	8007f66 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007f4e:	f003 0308 	and.w	r3, r3, #8
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d007      	beq.n	8007f66 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	3304      	adds	r3, #4
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f007 fe1b 	bl	800fb98 <etharp_request>
 8007f62:	e000      	b.n	8007f66 <netif_issue_reports+0x6e>
    return;
 8007f64:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	08012c08 	.word	0x08012c08
 8007f70:	08012dac 	.word	0x08012dac
 8007f74:	08012c58 	.word	0x08012c58

08007f78 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d107      	bne.n	8007f96 <netif_set_down+0x1e>
 8007f86:	4b12      	ldr	r3, [pc, #72]	; (8007fd0 <netif_set_down+0x58>)
 8007f88:	f240 329b 	movw	r2, #923	; 0x39b
 8007f8c:	4911      	ldr	r1, [pc, #68]	; (8007fd4 <netif_set_down+0x5c>)
 8007f8e:	4812      	ldr	r0, [pc, #72]	; (8007fd8 <netif_set_down+0x60>)
 8007f90:	f009 f9f2 	bl	8011378 <iprintf>
 8007f94:	e019      	b.n	8007fca <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007f9c:	f003 0301 	and.w	r3, r3, #1
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d012      	beq.n	8007fca <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007faa:	f023 0301 	bic.w	r3, r3, #1
 8007fae:	b2da      	uxtb	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007fbc:	f003 0308 	and.w	r3, r3, #8
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d002      	beq.n	8007fca <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f007 f9a5 	bl	800f314 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	08012c08 	.word	0x08012c08
 8007fd4:	08012dd0 	.word	0x08012dd0
 8007fd8:	08012c58 	.word	0x08012c58

08007fdc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d107      	bne.n	8007ffa <netif_set_link_up+0x1e>
 8007fea:	4b13      	ldr	r3, [pc, #76]	; (8008038 <netif_set_link_up+0x5c>)
 8007fec:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8007ff0:	4912      	ldr	r1, [pc, #72]	; (800803c <netif_set_link_up+0x60>)
 8007ff2:	4813      	ldr	r0, [pc, #76]	; (8008040 <netif_set_link_up+0x64>)
 8007ff4:	f009 f9c0 	bl	8011378 <iprintf>
 8007ff8:	e01b      	b.n	8008032 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008000:	f003 0304 	and.w	r3, r3, #4
 8008004:	2b00      	cmp	r3, #0
 8008006:	d114      	bne.n	8008032 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800800e:	f043 0304 	orr.w	r3, r3, #4
 8008012:	b2da      	uxtb	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800801a:	2103      	movs	r1, #3
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7ff ff6b 	bl	8007ef8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	69db      	ldr	r3, [r3, #28]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d003      	beq.n	8008032 <netif_set_link_up+0x56>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	08012c08 	.word	0x08012c08
 800803c:	08012df0 	.word	0x08012df0
 8008040:	08012c58 	.word	0x08012c58

08008044 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d107      	bne.n	8008062 <netif_set_link_down+0x1e>
 8008052:	4b11      	ldr	r3, [pc, #68]	; (8008098 <netif_set_link_down+0x54>)
 8008054:	f240 4206 	movw	r2, #1030	; 0x406
 8008058:	4910      	ldr	r1, [pc, #64]	; (800809c <netif_set_link_down+0x58>)
 800805a:	4811      	ldr	r0, [pc, #68]	; (80080a0 <netif_set_link_down+0x5c>)
 800805c:	f009 f98c 	bl	8011378 <iprintf>
 8008060:	e017      	b.n	8008092 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008068:	f003 0304 	and.w	r3, r3, #4
 800806c:	2b00      	cmp	r3, #0
 800806e:	d010      	beq.n	8008092 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008076:	f023 0304 	bic.w	r3, r3, #4
 800807a:	b2da      	uxtb	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d003      	beq.n	8008092 <netif_set_link_down+0x4e>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	69db      	ldr	r3, [r3, #28]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	08012c08 	.word	0x08012c08
 800809c:	08012e14 	.word	0x08012e14
 80080a0:	08012c58 	.word	0x08012c58

080080a4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d002      	beq.n	80080ba <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	683a      	ldr	r2, [r7, #0]
 80080b8:	61da      	str	r2, [r3, #28]
  }
}
 80080ba:	bf00      	nop
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80080c6:	b480      	push	{r7}
 80080c8:	b085      	sub	sp, #20
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	60f8      	str	r0, [r7, #12]
 80080ce:	60b9      	str	r1, [r7, #8]
 80080d0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80080d2:	f06f 030b 	mvn.w	r3, #11
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3714      	adds	r7, #20
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr
	...

080080e4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	4603      	mov	r3, r0
 80080ec:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80080ee:	79fb      	ldrb	r3, [r7, #7]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d013      	beq.n	800811c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80080f4:	4b0d      	ldr	r3, [pc, #52]	; (800812c <netif_get_by_index+0x48>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	60fb      	str	r3, [r7, #12]
 80080fa:	e00c      	b.n	8008116 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008102:	3301      	adds	r3, #1
 8008104:	b2db      	uxtb	r3, r3
 8008106:	79fa      	ldrb	r2, [r7, #7]
 8008108:	429a      	cmp	r2, r3
 800810a:	d101      	bne.n	8008110 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	e006      	b.n	800811e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	60fb      	str	r3, [r7, #12]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1ef      	bne.n	80080fc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3714      	adds	r7, #20
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	2000bc20 	.word	0x2000bc20

08008130 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008136:	4b0c      	ldr	r3, [pc, #48]	; (8008168 <pbuf_free_ooseq+0x38>)
 8008138:	2200      	movs	r2, #0
 800813a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800813c:	4b0b      	ldr	r3, [pc, #44]	; (800816c <pbuf_free_ooseq+0x3c>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	607b      	str	r3, [r7, #4]
 8008142:	e00a      	b.n	800815a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008148:	2b00      	cmp	r3, #0
 800814a:	d003      	beq.n	8008154 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f002 f9df 	bl	800a510 <tcp_free_ooseq>
      return;
 8008152:	e005      	b.n	8008160 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	607b      	str	r3, [r7, #4]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1f1      	bne.n	8008144 <pbuf_free_ooseq+0x14>
    }
  }
}
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	2000bc29 	.word	0x2000bc29
 800816c:	2000bc38 	.word	0x2000bc38

08008170 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008170:	b480      	push	{r7}
 8008172:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8008174:	4b03      	ldr	r3, [pc, #12]	; (8008184 <pbuf_pool_is_empty+0x14>)
 8008176:	2201      	movs	r2, #1
 8008178:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800817a:	bf00      	nop
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr
 8008184:	2000bc29 	.word	0x2000bc29

08008188 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	4611      	mov	r1, r2
 8008194:	461a      	mov	r2, r3
 8008196:	460b      	mov	r3, r1
 8008198:	80fb      	strh	r3, [r7, #6]
 800819a:	4613      	mov	r3, r2
 800819c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	88fa      	ldrh	r2, [r7, #6]
 80081ae:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	88ba      	ldrh	r2, [r7, #4]
 80081b4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80081b6:	8b3b      	ldrh	r3, [r7, #24]
 80081b8:	b2da      	uxtb	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	7f3a      	ldrb	r2, [r7, #28]
 80081c2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2201      	movs	r2, #1
 80081c8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2200      	movs	r2, #0
 80081ce:	73da      	strb	r2, [r3, #15]
}
 80081d0:	bf00      	nop
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b08c      	sub	sp, #48	; 0x30
 80081e0:	af02      	add	r7, sp, #8
 80081e2:	4603      	mov	r3, r0
 80081e4:	71fb      	strb	r3, [r7, #7]
 80081e6:	460b      	mov	r3, r1
 80081e8:	80bb      	strh	r3, [r7, #4]
 80081ea:	4613      	mov	r3, r2
 80081ec:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80081ee:	79fb      	ldrb	r3, [r7, #7]
 80081f0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80081f2:	887b      	ldrh	r3, [r7, #2]
 80081f4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80081f8:	d07f      	beq.n	80082fa <pbuf_alloc+0x11e>
 80081fa:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80081fe:	f300 80c8 	bgt.w	8008392 <pbuf_alloc+0x1b6>
 8008202:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008206:	d010      	beq.n	800822a <pbuf_alloc+0x4e>
 8008208:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800820c:	f300 80c1 	bgt.w	8008392 <pbuf_alloc+0x1b6>
 8008210:	2b01      	cmp	r3, #1
 8008212:	d002      	beq.n	800821a <pbuf_alloc+0x3e>
 8008214:	2b41      	cmp	r3, #65	; 0x41
 8008216:	f040 80bc 	bne.w	8008392 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800821a:	887a      	ldrh	r2, [r7, #2]
 800821c:	88bb      	ldrh	r3, [r7, #4]
 800821e:	4619      	mov	r1, r3
 8008220:	2000      	movs	r0, #0
 8008222:	f000 f8d1 	bl	80083c8 <pbuf_alloc_reference>
 8008226:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8008228:	e0bd      	b.n	80083a6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800822a:	2300      	movs	r3, #0
 800822c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800822e:	2300      	movs	r3, #0
 8008230:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008232:	88bb      	ldrh	r3, [r7, #4]
 8008234:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008236:	2008      	movs	r0, #8
 8008238:	f7ff fbce 	bl	80079d8 <memp_malloc>
 800823c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d109      	bne.n	8008258 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8008244:	f7ff ff94 	bl	8008170 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824a:	2b00      	cmp	r3, #0
 800824c:	d002      	beq.n	8008254 <pbuf_alloc+0x78>
            pbuf_free(p);
 800824e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008250:	f000 faa8 	bl	80087a4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008254:	2300      	movs	r3, #0
 8008256:	e0a7      	b.n	80083a8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008258:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800825a:	3303      	adds	r3, #3
 800825c:	b29b      	uxth	r3, r3
 800825e:	f023 0303 	bic.w	r3, r3, #3
 8008262:	b29b      	uxth	r3, r3
 8008264:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8008268:	b29b      	uxth	r3, r3
 800826a:	8b7a      	ldrh	r2, [r7, #26]
 800826c:	4293      	cmp	r3, r2
 800826e:	bf28      	it	cs
 8008270:	4613      	movcs	r3, r2
 8008272:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008274:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008276:	3310      	adds	r3, #16
 8008278:	693a      	ldr	r2, [r7, #16]
 800827a:	4413      	add	r3, r2
 800827c:	3303      	adds	r3, #3
 800827e:	f023 0303 	bic.w	r3, r3, #3
 8008282:	4618      	mov	r0, r3
 8008284:	89f9      	ldrh	r1, [r7, #14]
 8008286:	8b7a      	ldrh	r2, [r7, #26]
 8008288:	2300      	movs	r3, #0
 800828a:	9301      	str	r3, [sp, #4]
 800828c:	887b      	ldrh	r3, [r7, #2]
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	460b      	mov	r3, r1
 8008292:	4601      	mov	r1, r0
 8008294:	6938      	ldr	r0, [r7, #16]
 8008296:	f7ff ff77 	bl	8008188 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	f003 0303 	and.w	r3, r3, #3
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d006      	beq.n	80082b4 <pbuf_alloc+0xd8>
 80082a6:	4b42      	ldr	r3, [pc, #264]	; (80083b0 <pbuf_alloc+0x1d4>)
 80082a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082ac:	4941      	ldr	r1, [pc, #260]	; (80083b4 <pbuf_alloc+0x1d8>)
 80082ae:	4842      	ldr	r0, [pc, #264]	; (80083b8 <pbuf_alloc+0x1dc>)
 80082b0:	f009 f862 	bl	8011378 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80082b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80082b6:	3303      	adds	r3, #3
 80082b8:	f023 0303 	bic.w	r3, r3, #3
 80082bc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80082c0:	d106      	bne.n	80082d0 <pbuf_alloc+0xf4>
 80082c2:	4b3b      	ldr	r3, [pc, #236]	; (80083b0 <pbuf_alloc+0x1d4>)
 80082c4:	f44f 7281 	mov.w	r2, #258	; 0x102
 80082c8:	493c      	ldr	r1, [pc, #240]	; (80083bc <pbuf_alloc+0x1e0>)
 80082ca:	483b      	ldr	r0, [pc, #236]	; (80083b8 <pbuf_alloc+0x1dc>)
 80082cc:	f009 f854 	bl	8011378 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80082d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d102      	bne.n	80082dc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	627b      	str	r3, [r7, #36]	; 0x24
 80082da:	e002      	b.n	80082e2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80082e6:	8b7a      	ldrh	r2, [r7, #26]
 80082e8:	89fb      	ldrh	r3, [r7, #14]
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80082ee:	2300      	movs	r3, #0
 80082f0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80082f2:	8b7b      	ldrh	r3, [r7, #26]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d19e      	bne.n	8008236 <pbuf_alloc+0x5a>
      break;
 80082f8:	e055      	b.n	80083a6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80082fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80082fc:	3303      	adds	r3, #3
 80082fe:	b29b      	uxth	r3, r3
 8008300:	f023 0303 	bic.w	r3, r3, #3
 8008304:	b29a      	uxth	r2, r3
 8008306:	88bb      	ldrh	r3, [r7, #4]
 8008308:	3303      	adds	r3, #3
 800830a:	b29b      	uxth	r3, r3
 800830c:	f023 0303 	bic.w	r3, r3, #3
 8008310:	b29b      	uxth	r3, r3
 8008312:	4413      	add	r3, r2
 8008314:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008316:	8b3b      	ldrh	r3, [r7, #24]
 8008318:	3310      	adds	r3, #16
 800831a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800831c:	8b3a      	ldrh	r2, [r7, #24]
 800831e:	88bb      	ldrh	r3, [r7, #4]
 8008320:	3303      	adds	r3, #3
 8008322:	f023 0303 	bic.w	r3, r3, #3
 8008326:	429a      	cmp	r2, r3
 8008328:	d306      	bcc.n	8008338 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800832a:	8afa      	ldrh	r2, [r7, #22]
 800832c:	88bb      	ldrh	r3, [r7, #4]
 800832e:	3303      	adds	r3, #3
 8008330:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008334:	429a      	cmp	r2, r3
 8008336:	d201      	bcs.n	800833c <pbuf_alloc+0x160>
        return NULL;
 8008338:	2300      	movs	r3, #0
 800833a:	e035      	b.n	80083a8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800833c:	8afb      	ldrh	r3, [r7, #22]
 800833e:	4618      	mov	r0, r3
 8008340:	f7ff f9ba 	bl	80076b8 <mem_malloc>
 8008344:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8008346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008348:	2b00      	cmp	r3, #0
 800834a:	d101      	bne.n	8008350 <pbuf_alloc+0x174>
        return NULL;
 800834c:	2300      	movs	r3, #0
 800834e:	e02b      	b.n	80083a8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008350:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008352:	3310      	adds	r3, #16
 8008354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008356:	4413      	add	r3, r2
 8008358:	3303      	adds	r3, #3
 800835a:	f023 0303 	bic.w	r3, r3, #3
 800835e:	4618      	mov	r0, r3
 8008360:	88b9      	ldrh	r1, [r7, #4]
 8008362:	88ba      	ldrh	r2, [r7, #4]
 8008364:	2300      	movs	r3, #0
 8008366:	9301      	str	r3, [sp, #4]
 8008368:	887b      	ldrh	r3, [r7, #2]
 800836a:	9300      	str	r3, [sp, #0]
 800836c:	460b      	mov	r3, r1
 800836e:	4601      	mov	r1, r0
 8008370:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008372:	f7ff ff09 	bl	8008188 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	f003 0303 	and.w	r3, r3, #3
 800837e:	2b00      	cmp	r3, #0
 8008380:	d010      	beq.n	80083a4 <pbuf_alloc+0x1c8>
 8008382:	4b0b      	ldr	r3, [pc, #44]	; (80083b0 <pbuf_alloc+0x1d4>)
 8008384:	f44f 7291 	mov.w	r2, #290	; 0x122
 8008388:	490d      	ldr	r1, [pc, #52]	; (80083c0 <pbuf_alloc+0x1e4>)
 800838a:	480b      	ldr	r0, [pc, #44]	; (80083b8 <pbuf_alloc+0x1dc>)
 800838c:	f008 fff4 	bl	8011378 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008390:	e008      	b.n	80083a4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008392:	4b07      	ldr	r3, [pc, #28]	; (80083b0 <pbuf_alloc+0x1d4>)
 8008394:	f240 1227 	movw	r2, #295	; 0x127
 8008398:	490a      	ldr	r1, [pc, #40]	; (80083c4 <pbuf_alloc+0x1e8>)
 800839a:	4807      	ldr	r0, [pc, #28]	; (80083b8 <pbuf_alloc+0x1dc>)
 800839c:	f008 ffec 	bl	8011378 <iprintf>
      return NULL;
 80083a0:	2300      	movs	r3, #0
 80083a2:	e001      	b.n	80083a8 <pbuf_alloc+0x1cc>
      break;
 80083a4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3728      	adds	r7, #40	; 0x28
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	08012e38 	.word	0x08012e38
 80083b4:	08012e68 	.word	0x08012e68
 80083b8:	08012e98 	.word	0x08012e98
 80083bc:	08012ec0 	.word	0x08012ec0
 80083c0:	08012ef4 	.word	0x08012ef4
 80083c4:	08012f20 	.word	0x08012f20

080083c8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af02      	add	r7, sp, #8
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	460b      	mov	r3, r1
 80083d2:	807b      	strh	r3, [r7, #2]
 80083d4:	4613      	mov	r3, r2
 80083d6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80083d8:	883b      	ldrh	r3, [r7, #0]
 80083da:	2b41      	cmp	r3, #65	; 0x41
 80083dc:	d009      	beq.n	80083f2 <pbuf_alloc_reference+0x2a>
 80083de:	883b      	ldrh	r3, [r7, #0]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d006      	beq.n	80083f2 <pbuf_alloc_reference+0x2a>
 80083e4:	4b0f      	ldr	r3, [pc, #60]	; (8008424 <pbuf_alloc_reference+0x5c>)
 80083e6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80083ea:	490f      	ldr	r1, [pc, #60]	; (8008428 <pbuf_alloc_reference+0x60>)
 80083ec:	480f      	ldr	r0, [pc, #60]	; (800842c <pbuf_alloc_reference+0x64>)
 80083ee:	f008 ffc3 	bl	8011378 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80083f2:	2007      	movs	r0, #7
 80083f4:	f7ff faf0 	bl	80079d8 <memp_malloc>
 80083f8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d101      	bne.n	8008404 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008400:	2300      	movs	r3, #0
 8008402:	e00b      	b.n	800841c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008404:	8879      	ldrh	r1, [r7, #2]
 8008406:	887a      	ldrh	r2, [r7, #2]
 8008408:	2300      	movs	r3, #0
 800840a:	9301      	str	r3, [sp, #4]
 800840c:	883b      	ldrh	r3, [r7, #0]
 800840e:	9300      	str	r3, [sp, #0]
 8008410:	460b      	mov	r3, r1
 8008412:	6879      	ldr	r1, [r7, #4]
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f7ff feb7 	bl	8008188 <pbuf_init_alloced_pbuf>
  return p;
 800841a:	68fb      	ldr	r3, [r7, #12]
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	08012e38 	.word	0x08012e38
 8008428:	08012f3c 	.word	0x08012f3c
 800842c:	08012e98 	.word	0x08012e98

08008430 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b088      	sub	sp, #32
 8008434:	af02      	add	r7, sp, #8
 8008436:	607b      	str	r3, [r7, #4]
 8008438:	4603      	mov	r3, r0
 800843a:	73fb      	strb	r3, [r7, #15]
 800843c:	460b      	mov	r3, r1
 800843e:	81bb      	strh	r3, [r7, #12]
 8008440:	4613      	mov	r3, r2
 8008442:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8008444:	7bfb      	ldrb	r3, [r7, #15]
 8008446:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008448:	8a7b      	ldrh	r3, [r7, #18]
 800844a:	3303      	adds	r3, #3
 800844c:	f023 0203 	bic.w	r2, r3, #3
 8008450:	89bb      	ldrh	r3, [r7, #12]
 8008452:	441a      	add	r2, r3
 8008454:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008456:	429a      	cmp	r2, r3
 8008458:	d901      	bls.n	800845e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800845a:	2300      	movs	r3, #0
 800845c:	e018      	b.n	8008490 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800845e:	6a3b      	ldr	r3, [r7, #32]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d007      	beq.n	8008474 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008464:	8a7b      	ldrh	r3, [r7, #18]
 8008466:	3303      	adds	r3, #3
 8008468:	f023 0303 	bic.w	r3, r3, #3
 800846c:	6a3a      	ldr	r2, [r7, #32]
 800846e:	4413      	add	r3, r2
 8008470:	617b      	str	r3, [r7, #20]
 8008472:	e001      	b.n	8008478 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008474:	2300      	movs	r3, #0
 8008476:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	89b9      	ldrh	r1, [r7, #12]
 800847c:	89ba      	ldrh	r2, [r7, #12]
 800847e:	2302      	movs	r3, #2
 8008480:	9301      	str	r3, [sp, #4]
 8008482:	897b      	ldrh	r3, [r7, #10]
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	460b      	mov	r3, r1
 8008488:	6979      	ldr	r1, [r7, #20]
 800848a:	f7ff fe7d 	bl	8008188 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800848e:	687b      	ldr	r3, [r7, #4]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3718      	adds	r7, #24
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	460b      	mov	r3, r1
 80084a2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d106      	bne.n	80084b8 <pbuf_realloc+0x20>
 80084aa:	4b3a      	ldr	r3, [pc, #232]	; (8008594 <pbuf_realloc+0xfc>)
 80084ac:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80084b0:	4939      	ldr	r1, [pc, #228]	; (8008598 <pbuf_realloc+0x100>)
 80084b2:	483a      	ldr	r0, [pc, #232]	; (800859c <pbuf_realloc+0x104>)
 80084b4:	f008 ff60 	bl	8011378 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	891b      	ldrh	r3, [r3, #8]
 80084bc:	887a      	ldrh	r2, [r7, #2]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d263      	bcs.n	800858a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	891a      	ldrh	r2, [r3, #8]
 80084c6:	887b      	ldrh	r3, [r7, #2]
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80084cc:	887b      	ldrh	r3, [r7, #2]
 80084ce:	817b      	strh	r3, [r7, #10]
  q = p;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80084d4:	e018      	b.n	8008508 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	895b      	ldrh	r3, [r3, #10]
 80084da:	897a      	ldrh	r2, [r7, #10]
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	891a      	ldrh	r2, [r3, #8]
 80084e4:	893b      	ldrh	r3, [r7, #8]
 80084e6:	1ad3      	subs	r3, r2, r3
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d106      	bne.n	8008508 <pbuf_realloc+0x70>
 80084fa:	4b26      	ldr	r3, [pc, #152]	; (8008594 <pbuf_realloc+0xfc>)
 80084fc:	f240 12af 	movw	r2, #431	; 0x1af
 8008500:	4927      	ldr	r1, [pc, #156]	; (80085a0 <pbuf_realloc+0x108>)
 8008502:	4826      	ldr	r0, [pc, #152]	; (800859c <pbuf_realloc+0x104>)
 8008504:	f008 ff38 	bl	8011378 <iprintf>
  while (rem_len > q->len) {
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	895b      	ldrh	r3, [r3, #10]
 800850c:	897a      	ldrh	r2, [r7, #10]
 800850e:	429a      	cmp	r2, r3
 8008510:	d8e1      	bhi.n	80084d6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	7b1b      	ldrb	r3, [r3, #12]
 8008516:	f003 030f 	and.w	r3, r3, #15
 800851a:	2b00      	cmp	r3, #0
 800851c:	d121      	bne.n	8008562 <pbuf_realloc+0xca>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	895b      	ldrh	r3, [r3, #10]
 8008522:	897a      	ldrh	r2, [r7, #10]
 8008524:	429a      	cmp	r2, r3
 8008526:	d01c      	beq.n	8008562 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	7b5b      	ldrb	r3, [r3, #13]
 800852c:	f003 0302 	and.w	r3, r3, #2
 8008530:	2b00      	cmp	r3, #0
 8008532:	d116      	bne.n	8008562 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	685a      	ldr	r2, [r3, #4]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	b29a      	uxth	r2, r3
 800853e:	897b      	ldrh	r3, [r7, #10]
 8008540:	4413      	add	r3, r2
 8008542:	b29b      	uxth	r3, r3
 8008544:	4619      	mov	r1, r3
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	f7fe ffba 	bl	80074c0 <mem_trim>
 800854c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d106      	bne.n	8008562 <pbuf_realloc+0xca>
 8008554:	4b0f      	ldr	r3, [pc, #60]	; (8008594 <pbuf_realloc+0xfc>)
 8008556:	f240 12bd 	movw	r2, #445	; 0x1bd
 800855a:	4912      	ldr	r1, [pc, #72]	; (80085a4 <pbuf_realloc+0x10c>)
 800855c:	480f      	ldr	r0, [pc, #60]	; (800859c <pbuf_realloc+0x104>)
 800855e:	f008 ff0b 	bl	8011378 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	897a      	ldrh	r2, [r7, #10]
 8008566:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	895a      	ldrh	r2, [r3, #10]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d004      	beq.n	8008582 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4618      	mov	r0, r3
 800857e:	f000 f911 	bl	80087a4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	601a      	str	r2, [r3, #0]
 8008588:	e000      	b.n	800858c <pbuf_realloc+0xf4>
    return;
 800858a:	bf00      	nop

}
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	08012e38 	.word	0x08012e38
 8008598:	08012f50 	.word	0x08012f50
 800859c:	08012e98 	.word	0x08012e98
 80085a0:	08012f68 	.word	0x08012f68
 80085a4:	08012f80 	.word	0x08012f80

080085a8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	4613      	mov	r3, r2
 80085b4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d106      	bne.n	80085ca <pbuf_add_header_impl+0x22>
 80085bc:	4b2b      	ldr	r3, [pc, #172]	; (800866c <pbuf_add_header_impl+0xc4>)
 80085be:	f240 12df 	movw	r2, #479	; 0x1df
 80085c2:	492b      	ldr	r1, [pc, #172]	; (8008670 <pbuf_add_header_impl+0xc8>)
 80085c4:	482b      	ldr	r0, [pc, #172]	; (8008674 <pbuf_add_header_impl+0xcc>)
 80085c6:	f008 fed7 	bl	8011378 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d003      	beq.n	80085d8 <pbuf_add_header_impl+0x30>
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085d6:	d301      	bcc.n	80085dc <pbuf_add_header_impl+0x34>
    return 1;
 80085d8:	2301      	movs	r3, #1
 80085da:	e043      	b.n	8008664 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d101      	bne.n	80085e6 <pbuf_add_header_impl+0x3e>
    return 0;
 80085e2:	2300      	movs	r3, #0
 80085e4:	e03e      	b.n	8008664 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	891a      	ldrh	r2, [r3, #8]
 80085ee:	8a7b      	ldrh	r3, [r7, #18]
 80085f0:	4413      	add	r3, r2
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	8a7a      	ldrh	r2, [r7, #18]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d901      	bls.n	80085fe <pbuf_add_header_impl+0x56>
    return 1;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e032      	b.n	8008664 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	7b1b      	ldrb	r3, [r3, #12]
 8008602:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008604:	8a3b      	ldrh	r3, [r7, #16]
 8008606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00c      	beq.n	8008628 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	685a      	ldr	r2, [r3, #4]
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	425b      	negs	r3, r3
 8008616:	4413      	add	r3, r2
 8008618:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	3310      	adds	r3, #16
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	429a      	cmp	r2, r3
 8008622:	d20d      	bcs.n	8008640 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8008624:	2301      	movs	r3, #1
 8008626:	e01d      	b.n	8008664 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008628:	79fb      	ldrb	r3, [r7, #7]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d006      	beq.n	800863c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	425b      	negs	r3, r3
 8008636:	4413      	add	r3, r2
 8008638:	617b      	str	r3, [r7, #20]
 800863a:	e001      	b.n	8008640 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800863c:	2301      	movs	r3, #1
 800863e:	e011      	b.n	8008664 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	895a      	ldrh	r2, [r3, #10]
 800864a:	8a7b      	ldrh	r3, [r7, #18]
 800864c:	4413      	add	r3, r2
 800864e:	b29a      	uxth	r2, r3
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	891a      	ldrh	r2, [r3, #8]
 8008658:	8a7b      	ldrh	r3, [r7, #18]
 800865a:	4413      	add	r3, r2
 800865c:	b29a      	uxth	r2, r3
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	811a      	strh	r2, [r3, #8]


  return 0;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3718      	adds	r7, #24
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	08012e38 	.word	0x08012e38
 8008670:	08012f9c 	.word	0x08012f9c
 8008674:	08012e98 	.word	0x08012e98

08008678 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008682:	2200      	movs	r2, #0
 8008684:	6839      	ldr	r1, [r7, #0]
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f7ff ff8e 	bl	80085a8 <pbuf_add_header_impl>
 800868c:	4603      	mov	r3, r0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3708      	adds	r7, #8
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
	...

08008698 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d106      	bne.n	80086b6 <pbuf_remove_header+0x1e>
 80086a8:	4b20      	ldr	r3, [pc, #128]	; (800872c <pbuf_remove_header+0x94>)
 80086aa:	f240 224b 	movw	r2, #587	; 0x24b
 80086ae:	4920      	ldr	r1, [pc, #128]	; (8008730 <pbuf_remove_header+0x98>)
 80086b0:	4820      	ldr	r0, [pc, #128]	; (8008734 <pbuf_remove_header+0x9c>)
 80086b2:	f008 fe61 	bl	8011378 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d003      	beq.n	80086c4 <pbuf_remove_header+0x2c>
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086c2:	d301      	bcc.n	80086c8 <pbuf_remove_header+0x30>
    return 1;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e02c      	b.n	8008722 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d101      	bne.n	80086d2 <pbuf_remove_header+0x3a>
    return 0;
 80086ce:	2300      	movs	r3, #0
 80086d0:	e027      	b.n	8008722 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	895b      	ldrh	r3, [r3, #10]
 80086da:	89fa      	ldrh	r2, [r7, #14]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d908      	bls.n	80086f2 <pbuf_remove_header+0x5a>
 80086e0:	4b12      	ldr	r3, [pc, #72]	; (800872c <pbuf_remove_header+0x94>)
 80086e2:	f240 2255 	movw	r2, #597	; 0x255
 80086e6:	4914      	ldr	r1, [pc, #80]	; (8008738 <pbuf_remove_header+0xa0>)
 80086e8:	4812      	ldr	r0, [pc, #72]	; (8008734 <pbuf_remove_header+0x9c>)
 80086ea:	f008 fe45 	bl	8011378 <iprintf>
 80086ee:	2301      	movs	r3, #1
 80086f0:	e017      	b.n	8008722 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	441a      	add	r2, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	895a      	ldrh	r2, [r3, #10]
 8008708:	89fb      	ldrh	r3, [r7, #14]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	b29a      	uxth	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	891a      	ldrh	r2, [r3, #8]
 8008716:	89fb      	ldrh	r3, [r7, #14]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	b29a      	uxth	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	08012e38 	.word	0x08012e38
 8008730:	08012f9c 	.word	0x08012f9c
 8008734:	08012e98 	.word	0x08012e98
 8008738:	08012fa8 	.word	0x08012fa8

0800873c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	460b      	mov	r3, r1
 8008746:	807b      	strh	r3, [r7, #2]
 8008748:	4613      	mov	r3, r2
 800874a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800874c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008750:	2b00      	cmp	r3, #0
 8008752:	da08      	bge.n	8008766 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008754:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008758:	425b      	negs	r3, r3
 800875a:	4619      	mov	r1, r3
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f7ff ff9b 	bl	8008698 <pbuf_remove_header>
 8008762:	4603      	mov	r3, r0
 8008764:	e007      	b.n	8008776 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8008766:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800876a:	787a      	ldrb	r2, [r7, #1]
 800876c:	4619      	mov	r1, r3
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7ff ff1a 	bl	80085a8 <pbuf_add_header_impl>
 8008774:	4603      	mov	r3, r0
  }
}
 8008776:	4618      	mov	r0, r3
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b082      	sub	sp, #8
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
 8008786:	460b      	mov	r3, r1
 8008788:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800878a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800878e:	2201      	movs	r2, #1
 8008790:	4619      	mov	r1, r3
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f7ff ffd2 	bl	800873c <pbuf_header_impl>
 8008798:	4603      	mov	r3, r0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3708      	adds	r7, #8
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
	...

080087a4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d10b      	bne.n	80087ca <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d106      	bne.n	80087c6 <pbuf_free+0x22>
 80087b8:	4b38      	ldr	r3, [pc, #224]	; (800889c <pbuf_free+0xf8>)
 80087ba:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80087be:	4938      	ldr	r1, [pc, #224]	; (80088a0 <pbuf_free+0xfc>)
 80087c0:	4838      	ldr	r0, [pc, #224]	; (80088a4 <pbuf_free+0x100>)
 80087c2:	f008 fdd9 	bl	8011378 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80087c6:	2300      	movs	r3, #0
 80087c8:	e063      	b.n	8008892 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80087ca:	2300      	movs	r3, #0
 80087cc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80087ce:	e05c      	b.n	800888a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	7b9b      	ldrb	r3, [r3, #14]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d106      	bne.n	80087e6 <pbuf_free+0x42>
 80087d8:	4b30      	ldr	r3, [pc, #192]	; (800889c <pbuf_free+0xf8>)
 80087da:	f240 22f1 	movw	r2, #753	; 0x2f1
 80087de:	4932      	ldr	r1, [pc, #200]	; (80088a8 <pbuf_free+0x104>)
 80087e0:	4830      	ldr	r0, [pc, #192]	; (80088a4 <pbuf_free+0x100>)
 80087e2:	f008 fdc9 	bl	8011378 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	7b9b      	ldrb	r3, [r3, #14]
 80087ea:	3b01      	subs	r3, #1
 80087ec:	b2da      	uxtb	r2, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	739a      	strb	r2, [r3, #14]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	7b9b      	ldrb	r3, [r3, #14]
 80087f6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80087f8:	7dbb      	ldrb	r3, [r7, #22]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d143      	bne.n	8008886 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	7b1b      	ldrb	r3, [r3, #12]
 8008808:	f003 030f 	and.w	r3, r3, #15
 800880c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	7b5b      	ldrb	r3, [r3, #13]
 8008812:	f003 0302 	and.w	r3, r3, #2
 8008816:	2b00      	cmp	r3, #0
 8008818:	d011      	beq.n	800883e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d106      	bne.n	8008834 <pbuf_free+0x90>
 8008826:	4b1d      	ldr	r3, [pc, #116]	; (800889c <pbuf_free+0xf8>)
 8008828:	f240 22ff 	movw	r2, #767	; 0x2ff
 800882c:	491f      	ldr	r1, [pc, #124]	; (80088ac <pbuf_free+0x108>)
 800882e:	481d      	ldr	r0, [pc, #116]	; (80088a4 <pbuf_free+0x100>)
 8008830:	f008 fda2 	bl	8011378 <iprintf>
        pc->custom_free_function(p);
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	691b      	ldr	r3, [r3, #16]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	4798      	blx	r3
 800883c:	e01d      	b.n	800887a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800883e:	7bfb      	ldrb	r3, [r7, #15]
 8008840:	2b02      	cmp	r3, #2
 8008842:	d104      	bne.n	800884e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8008844:	6879      	ldr	r1, [r7, #4]
 8008846:	2008      	movs	r0, #8
 8008848:	f7ff f936 	bl	8007ab8 <memp_free>
 800884c:	e015      	b.n	800887a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800884e:	7bfb      	ldrb	r3, [r7, #15]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d104      	bne.n	800885e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8008854:	6879      	ldr	r1, [r7, #4]
 8008856:	2007      	movs	r0, #7
 8008858:	f7ff f92e 	bl	8007ab8 <memp_free>
 800885c:	e00d      	b.n	800887a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800885e:	7bfb      	ldrb	r3, [r7, #15]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d103      	bne.n	800886c <pbuf_free+0xc8>
          mem_free(p);
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f7fe fdc1 	bl	80073ec <mem_free>
 800886a:	e006      	b.n	800887a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800886c:	4b0b      	ldr	r3, [pc, #44]	; (800889c <pbuf_free+0xf8>)
 800886e:	f240 320f 	movw	r2, #783	; 0x30f
 8008872:	490f      	ldr	r1, [pc, #60]	; (80088b0 <pbuf_free+0x10c>)
 8008874:	480b      	ldr	r0, [pc, #44]	; (80088a4 <pbuf_free+0x100>)
 8008876:	f008 fd7f 	bl	8011378 <iprintf>
        }
      }
      count++;
 800887a:	7dfb      	ldrb	r3, [r7, #23]
 800887c:	3301      	adds	r3, #1
 800887e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	607b      	str	r3, [r7, #4]
 8008884:	e001      	b.n	800888a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8008886:	2300      	movs	r3, #0
 8008888:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d19f      	bne.n	80087d0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008890:	7dfb      	ldrb	r3, [r7, #23]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3718      	adds	r7, #24
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	08012e38 	.word	0x08012e38
 80088a0:	08012f9c 	.word	0x08012f9c
 80088a4:	08012e98 	.word	0x08012e98
 80088a8:	08012fc8 	.word	0x08012fc8
 80088ac:	08012fe0 	.word	0x08012fe0
 80088b0:	08013004 	.word	0x08013004

080088b4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80088bc:	2300      	movs	r3, #0
 80088be:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80088c0:	e005      	b.n	80088ce <pbuf_clen+0x1a>
    ++len;
 80088c2:	89fb      	ldrh	r3, [r7, #14]
 80088c4:	3301      	adds	r3, #1
 80088c6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1f6      	bne.n	80088c2 <pbuf_clen+0xe>
  }
  return len;
 80088d4:	89fb      	ldrh	r3, [r7, #14]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3714      	adds	r7, #20
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr
	...

080088e4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d010      	beq.n	8008914 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	7b9b      	ldrb	r3, [r3, #14]
 80088f6:	3301      	adds	r3, #1
 80088f8:	b2da      	uxtb	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	7b9b      	ldrb	r3, [r3, #14]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d106      	bne.n	8008914 <pbuf_ref+0x30>
 8008906:	4b05      	ldr	r3, [pc, #20]	; (800891c <pbuf_ref+0x38>)
 8008908:	f240 3242 	movw	r2, #834	; 0x342
 800890c:	4904      	ldr	r1, [pc, #16]	; (8008920 <pbuf_ref+0x3c>)
 800890e:	4805      	ldr	r0, [pc, #20]	; (8008924 <pbuf_ref+0x40>)
 8008910:	f008 fd32 	bl	8011378 <iprintf>
  }
}
 8008914:	bf00      	nop
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	08012e38 	.word	0x08012e38
 8008920:	08013018 	.word	0x08013018
 8008924:	08012e98 	.word	0x08012e98

08008928 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d002      	beq.n	800893e <pbuf_cat+0x16>
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d107      	bne.n	800894e <pbuf_cat+0x26>
 800893e:	4b20      	ldr	r3, [pc, #128]	; (80089c0 <pbuf_cat+0x98>)
 8008940:	f240 3259 	movw	r2, #857	; 0x359
 8008944:	491f      	ldr	r1, [pc, #124]	; (80089c4 <pbuf_cat+0x9c>)
 8008946:	4820      	ldr	r0, [pc, #128]	; (80089c8 <pbuf_cat+0xa0>)
 8008948:	f008 fd16 	bl	8011378 <iprintf>
 800894c:	e034      	b.n	80089b8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	60fb      	str	r3, [r7, #12]
 8008952:	e00a      	b.n	800896a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	891a      	ldrh	r2, [r3, #8]
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	891b      	ldrh	r3, [r3, #8]
 800895c:	4413      	add	r3, r2
 800895e:	b29a      	uxth	r2, r3
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	60fb      	str	r3, [r7, #12]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1f0      	bne.n	8008954 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	891a      	ldrh	r2, [r3, #8]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	895b      	ldrh	r3, [r3, #10]
 800897a:	429a      	cmp	r2, r3
 800897c:	d006      	beq.n	800898c <pbuf_cat+0x64>
 800897e:	4b10      	ldr	r3, [pc, #64]	; (80089c0 <pbuf_cat+0x98>)
 8008980:	f240 3262 	movw	r2, #866	; 0x362
 8008984:	4911      	ldr	r1, [pc, #68]	; (80089cc <pbuf_cat+0xa4>)
 8008986:	4810      	ldr	r0, [pc, #64]	; (80089c8 <pbuf_cat+0xa0>)
 8008988:	f008 fcf6 	bl	8011378 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d006      	beq.n	80089a2 <pbuf_cat+0x7a>
 8008994:	4b0a      	ldr	r3, [pc, #40]	; (80089c0 <pbuf_cat+0x98>)
 8008996:	f240 3263 	movw	r2, #867	; 0x363
 800899a:	490d      	ldr	r1, [pc, #52]	; (80089d0 <pbuf_cat+0xa8>)
 800899c:	480a      	ldr	r0, [pc, #40]	; (80089c8 <pbuf_cat+0xa0>)
 800899e:	f008 fceb 	bl	8011378 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	891a      	ldrh	r2, [r3, #8]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	891b      	ldrh	r3, [r3, #8]
 80089aa:	4413      	add	r3, r2
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	683a      	ldr	r2, [r7, #0]
 80089b6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80089b8:	3710      	adds	r7, #16
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	08012e38 	.word	0x08012e38
 80089c4:	0801302c 	.word	0x0801302c
 80089c8:	08012e98 	.word	0x08012e98
 80089cc:	08013064 	.word	0x08013064
 80089d0:	08013094 	.word	0x08013094

080089d4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f7ff ffa1 	bl	8008928 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80089e6:	6838      	ldr	r0, [r7, #0]
 80089e8:	f7ff ff7c 	bl	80088e4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80089ec:	bf00      	nop
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b086      	sub	sp, #24
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80089fe:	2300      	movs	r3, #0
 8008a00:	617b      	str	r3, [r7, #20]
 8008a02:	2300      	movs	r3, #0
 8008a04:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d008      	beq.n	8008a1e <pbuf_copy+0x2a>
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d005      	beq.n	8008a1e <pbuf_copy+0x2a>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	891a      	ldrh	r2, [r3, #8]
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	891b      	ldrh	r3, [r3, #8]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d209      	bcs.n	8008a32 <pbuf_copy+0x3e>
 8008a1e:	4b57      	ldr	r3, [pc, #348]	; (8008b7c <pbuf_copy+0x188>)
 8008a20:	f240 32c9 	movw	r2, #969	; 0x3c9
 8008a24:	4956      	ldr	r1, [pc, #344]	; (8008b80 <pbuf_copy+0x18c>)
 8008a26:	4857      	ldr	r0, [pc, #348]	; (8008b84 <pbuf_copy+0x190>)
 8008a28:	f008 fca6 	bl	8011378 <iprintf>
 8008a2c:	f06f 030f 	mvn.w	r3, #15
 8008a30:	e09f      	b.n	8008b72 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	895b      	ldrh	r3, [r3, #10]
 8008a36:	461a      	mov	r2, r3
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	1ad2      	subs	r2, r2, r3
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	895b      	ldrh	r3, [r3, #10]
 8008a40:	4619      	mov	r1, r3
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	1acb      	subs	r3, r1, r3
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d306      	bcc.n	8008a58 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	895b      	ldrh	r3, [r3, #10]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	60fb      	str	r3, [r7, #12]
 8008a56:	e005      	b.n	8008a64 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	895b      	ldrh	r3, [r3, #10]
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	685a      	ldr	r2, [r3, #4]
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	18d0      	adds	r0, r2, r3
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	685a      	ldr	r2, [r3, #4]
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	4413      	add	r3, r2
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	4619      	mov	r1, r3
 8008a78:	f008 fc4e 	bl	8011318 <memcpy>
    offset_to += len;
 8008a7c:	697a      	ldr	r2, [r7, #20]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	4413      	add	r3, r2
 8008a82:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	4413      	add	r3, r2
 8008a8a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	895b      	ldrh	r3, [r3, #10]
 8008a90:	461a      	mov	r2, r3
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d906      	bls.n	8008aa6 <pbuf_copy+0xb2>
 8008a98:	4b38      	ldr	r3, [pc, #224]	; (8008b7c <pbuf_copy+0x188>)
 8008a9a:	f240 32d9 	movw	r2, #985	; 0x3d9
 8008a9e:	493a      	ldr	r1, [pc, #232]	; (8008b88 <pbuf_copy+0x194>)
 8008aa0:	4838      	ldr	r0, [pc, #224]	; (8008b84 <pbuf_copy+0x190>)
 8008aa2:	f008 fc69 	bl	8011378 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	895b      	ldrh	r3, [r3, #10]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d906      	bls.n	8008ac0 <pbuf_copy+0xcc>
 8008ab2:	4b32      	ldr	r3, [pc, #200]	; (8008b7c <pbuf_copy+0x188>)
 8008ab4:	f240 32da 	movw	r2, #986	; 0x3da
 8008ab8:	4934      	ldr	r1, [pc, #208]	; (8008b8c <pbuf_copy+0x198>)
 8008aba:	4832      	ldr	r0, [pc, #200]	; (8008b84 <pbuf_copy+0x190>)
 8008abc:	f008 fc5c 	bl	8011378 <iprintf>
    if (offset_from >= p_from->len) {
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	895b      	ldrh	r3, [r3, #10]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d304      	bcc.n	8008ad6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008acc:	2300      	movs	r3, #0
 8008ace:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	895b      	ldrh	r3, [r3, #10]
 8008ada:	461a      	mov	r2, r3
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d114      	bne.n	8008b0c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d10c      	bne.n	8008b0c <pbuf_copy+0x118>
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d009      	beq.n	8008b0c <pbuf_copy+0x118>
 8008af8:	4b20      	ldr	r3, [pc, #128]	; (8008b7c <pbuf_copy+0x188>)
 8008afa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8008afe:	4924      	ldr	r1, [pc, #144]	; (8008b90 <pbuf_copy+0x19c>)
 8008b00:	4820      	ldr	r0, [pc, #128]	; (8008b84 <pbuf_copy+0x190>)
 8008b02:	f008 fc39 	bl	8011378 <iprintf>
 8008b06:	f06f 030f 	mvn.w	r3, #15
 8008b0a:	e032      	b.n	8008b72 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d013      	beq.n	8008b3a <pbuf_copy+0x146>
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	895a      	ldrh	r2, [r3, #10]
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	891b      	ldrh	r3, [r3, #8]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d10d      	bne.n	8008b3a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d009      	beq.n	8008b3a <pbuf_copy+0x146>
 8008b26:	4b15      	ldr	r3, [pc, #84]	; (8008b7c <pbuf_copy+0x188>)
 8008b28:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8008b2c:	4919      	ldr	r1, [pc, #100]	; (8008b94 <pbuf_copy+0x1a0>)
 8008b2e:	4815      	ldr	r0, [pc, #84]	; (8008b84 <pbuf_copy+0x190>)
 8008b30:	f008 fc22 	bl	8011378 <iprintf>
 8008b34:	f06f 0305 	mvn.w	r3, #5
 8008b38:	e01b      	b.n	8008b72 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d013      	beq.n	8008b68 <pbuf_copy+0x174>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	895a      	ldrh	r2, [r3, #10]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	891b      	ldrh	r3, [r3, #8]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d10d      	bne.n	8008b68 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d009      	beq.n	8008b68 <pbuf_copy+0x174>
 8008b54:	4b09      	ldr	r3, [pc, #36]	; (8008b7c <pbuf_copy+0x188>)
 8008b56:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008b5a:	490e      	ldr	r1, [pc, #56]	; (8008b94 <pbuf_copy+0x1a0>)
 8008b5c:	4809      	ldr	r0, [pc, #36]	; (8008b84 <pbuf_copy+0x190>)
 8008b5e:	f008 fc0b 	bl	8011378 <iprintf>
 8008b62:	f06f 0305 	mvn.w	r3, #5
 8008b66:	e004      	b.n	8008b72 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f47f af61 	bne.w	8008a32 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3718      	adds	r7, #24
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	08012e38 	.word	0x08012e38
 8008b80:	080130e0 	.word	0x080130e0
 8008b84:	08012e98 	.word	0x08012e98
 8008b88:	08013110 	.word	0x08013110
 8008b8c:	08013128 	.word	0x08013128
 8008b90:	08013144 	.word	0x08013144
 8008b94:	08013154 	.word	0x08013154

08008b98 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b088      	sub	sp, #32
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	4611      	mov	r1, r2
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	80fb      	strh	r3, [r7, #6]
 8008baa:	4613      	mov	r3, r2
 8008bac:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d108      	bne.n	8008bce <pbuf_copy_partial+0x36>
 8008bbc:	4b2b      	ldr	r3, [pc, #172]	; (8008c6c <pbuf_copy_partial+0xd4>)
 8008bbe:	f240 420a 	movw	r2, #1034	; 0x40a
 8008bc2:	492b      	ldr	r1, [pc, #172]	; (8008c70 <pbuf_copy_partial+0xd8>)
 8008bc4:	482b      	ldr	r0, [pc, #172]	; (8008c74 <pbuf_copy_partial+0xdc>)
 8008bc6:	f008 fbd7 	bl	8011378 <iprintf>
 8008bca:	2300      	movs	r3, #0
 8008bcc:	e04a      	b.n	8008c64 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d108      	bne.n	8008be6 <pbuf_copy_partial+0x4e>
 8008bd4:	4b25      	ldr	r3, [pc, #148]	; (8008c6c <pbuf_copy_partial+0xd4>)
 8008bd6:	f240 420b 	movw	r2, #1035	; 0x40b
 8008bda:	4927      	ldr	r1, [pc, #156]	; (8008c78 <pbuf_copy_partial+0xe0>)
 8008bdc:	4825      	ldr	r0, [pc, #148]	; (8008c74 <pbuf_copy_partial+0xdc>)
 8008bde:	f008 fbcb 	bl	8011378 <iprintf>
 8008be2:	2300      	movs	r3, #0
 8008be4:	e03e      	b.n	8008c64 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	61fb      	str	r3, [r7, #28]
 8008bea:	e034      	b.n	8008c56 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008bec:	88bb      	ldrh	r3, [r7, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00a      	beq.n	8008c08 <pbuf_copy_partial+0x70>
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	895b      	ldrh	r3, [r3, #10]
 8008bf6:	88ba      	ldrh	r2, [r7, #4]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d305      	bcc.n	8008c08 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	895b      	ldrh	r3, [r3, #10]
 8008c00:	88ba      	ldrh	r2, [r7, #4]
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	80bb      	strh	r3, [r7, #4]
 8008c06:	e023      	b.n	8008c50 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	895a      	ldrh	r2, [r3, #10]
 8008c0c:	88bb      	ldrh	r3, [r7, #4]
 8008c0e:	1ad3      	subs	r3, r2, r3
 8008c10:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008c12:	8b3a      	ldrh	r2, [r7, #24]
 8008c14:	88fb      	ldrh	r3, [r7, #6]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d901      	bls.n	8008c1e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008c1a:	88fb      	ldrh	r3, [r7, #6]
 8008c1c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008c1e:	8b7b      	ldrh	r3, [r7, #26]
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	18d0      	adds	r0, r2, r3
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	685a      	ldr	r2, [r3, #4]
 8008c28:	88bb      	ldrh	r3, [r7, #4]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	8b3a      	ldrh	r2, [r7, #24]
 8008c2e:	4619      	mov	r1, r3
 8008c30:	f008 fb72 	bl	8011318 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008c34:	8afa      	ldrh	r2, [r7, #22]
 8008c36:	8b3b      	ldrh	r3, [r7, #24]
 8008c38:	4413      	add	r3, r2
 8008c3a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008c3c:	8b7a      	ldrh	r2, [r7, #26]
 8008c3e:	8b3b      	ldrh	r3, [r7, #24]
 8008c40:	4413      	add	r3, r2
 8008c42:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008c44:	88fa      	ldrh	r2, [r7, #6]
 8008c46:	8b3b      	ldrh	r3, [r7, #24]
 8008c48:	1ad3      	subs	r3, r2, r3
 8008c4a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	61fb      	str	r3, [r7, #28]
 8008c56:	88fb      	ldrh	r3, [r7, #6]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d002      	beq.n	8008c62 <pbuf_copy_partial+0xca>
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1c4      	bne.n	8008bec <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008c62:	8afb      	ldrh	r3, [r7, #22]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3720      	adds	r7, #32
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	08012e38 	.word	0x08012e38
 8008c70:	08013180 	.word	0x08013180
 8008c74:	08012e98 	.word	0x08012e98
 8008c78:	080131a0 	.word	0x080131a0

08008c7c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b088      	sub	sp, #32
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	4613      	mov	r3, r2
 8008c88:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8008c8a:	88fb      	ldrh	r3, [r7, #6]
 8008c8c:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d109      	bne.n	8008cac <pbuf_take+0x30>
 8008c98:	4b3a      	ldr	r3, [pc, #232]	; (8008d84 <pbuf_take+0x108>)
 8008c9a:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8008c9e:	493a      	ldr	r1, [pc, #232]	; (8008d88 <pbuf_take+0x10c>)
 8008ca0:	483a      	ldr	r0, [pc, #232]	; (8008d8c <pbuf_take+0x110>)
 8008ca2:	f008 fb69 	bl	8011378 <iprintf>
 8008ca6:	f06f 030f 	mvn.w	r3, #15
 8008caa:	e067      	b.n	8008d7c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d109      	bne.n	8008cc6 <pbuf_take+0x4a>
 8008cb2:	4b34      	ldr	r3, [pc, #208]	; (8008d84 <pbuf_take+0x108>)
 8008cb4:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8008cb8:	4935      	ldr	r1, [pc, #212]	; (8008d90 <pbuf_take+0x114>)
 8008cba:	4834      	ldr	r0, [pc, #208]	; (8008d8c <pbuf_take+0x110>)
 8008cbc:	f008 fb5c 	bl	8011378 <iprintf>
 8008cc0:	f06f 030f 	mvn.w	r3, #15
 8008cc4:	e05a      	b.n	8008d7c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	891b      	ldrh	r3, [r3, #8]
 8008cca:	88fa      	ldrh	r2, [r7, #6]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d909      	bls.n	8008ce4 <pbuf_take+0x68>
 8008cd0:	4b2c      	ldr	r3, [pc, #176]	; (8008d84 <pbuf_take+0x108>)
 8008cd2:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8008cd6:	492f      	ldr	r1, [pc, #188]	; (8008d94 <pbuf_take+0x118>)
 8008cd8:	482c      	ldr	r0, [pc, #176]	; (8008d8c <pbuf_take+0x110>)
 8008cda:	f008 fb4d 	bl	8011378 <iprintf>
 8008cde:	f04f 33ff 	mov.w	r3, #4294967295
 8008ce2:	e04b      	b.n	8008d7c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d007      	beq.n	8008cfa <pbuf_take+0x7e>
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d004      	beq.n	8008cfa <pbuf_take+0x7e>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	891b      	ldrh	r3, [r3, #8]
 8008cf4:	88fa      	ldrh	r2, [r7, #6]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d902      	bls.n	8008d00 <pbuf_take+0x84>
    return ERR_ARG;
 8008cfa:	f06f 030f 	mvn.w	r3, #15
 8008cfe:	e03d      	b.n	8008d7c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	61fb      	str	r3, [r7, #28]
 8008d04:	e028      	b.n	8008d58 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d106      	bne.n	8008d1a <pbuf_take+0x9e>
 8008d0c:	4b1d      	ldr	r3, [pc, #116]	; (8008d84 <pbuf_take+0x108>)
 8008d0e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8008d12:	4921      	ldr	r1, [pc, #132]	; (8008d98 <pbuf_take+0x11c>)
 8008d14:	481d      	ldr	r0, [pc, #116]	; (8008d8c <pbuf_take+0x110>)
 8008d16:	f008 fb2f 	bl	8011378 <iprintf>
    buf_copy_len = total_copy_len;
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	895b      	ldrh	r3, [r3, #10]
 8008d22:	461a      	mov	r2, r3
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d902      	bls.n	8008d30 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	895b      	ldrh	r3, [r3, #10]
 8008d2e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	6858      	ldr	r0, [r3, #4]
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	4413      	add	r3, r2
 8008d3a:	69ba      	ldr	r2, [r7, #24]
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	f008 faeb 	bl	8011318 <memcpy>
    total_copy_len -= buf_copy_len;
 8008d42:	697a      	ldr	r2, [r7, #20]
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	4413      	add	r3, r2
 8008d50:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	61fb      	str	r3, [r7, #28]
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1d3      	bne.n	8008d06 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d103      	bne.n	8008d6c <pbuf_take+0xf0>
 8008d64:	88fb      	ldrh	r3, [r7, #6]
 8008d66:	693a      	ldr	r2, [r7, #16]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d006      	beq.n	8008d7a <pbuf_take+0xfe>
 8008d6c:	4b05      	ldr	r3, [pc, #20]	; (8008d84 <pbuf_take+0x108>)
 8008d6e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8008d72:	490a      	ldr	r1, [pc, #40]	; (8008d9c <pbuf_take+0x120>)
 8008d74:	4805      	ldr	r0, [pc, #20]	; (8008d8c <pbuf_take+0x110>)
 8008d76:	f008 faff 	bl	8011378 <iprintf>
  return ERR_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3720      	adds	r7, #32
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	08012e38 	.word	0x08012e38
 8008d88:	08013210 	.word	0x08013210
 8008d8c:	08012e98 	.word	0x08012e98
 8008d90:	08013228 	.word	0x08013228
 8008d94:	08013244 	.word	0x08013244
 8008d98:	08013264 	.word	0x08013264
 8008d9c:	0801327c 	.word	0x0801327c

08008da0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	4603      	mov	r3, r0
 8008da8:	603a      	str	r2, [r7, #0]
 8008daa:	71fb      	strb	r3, [r7, #7]
 8008dac:	460b      	mov	r3, r1
 8008dae:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	8919      	ldrh	r1, [r3, #8]
 8008db4:	88ba      	ldrh	r2, [r7, #4]
 8008db6:	79fb      	ldrb	r3, [r7, #7]
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7ff fa0f 	bl	80081dc <pbuf_alloc>
 8008dbe:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d101      	bne.n	8008dca <pbuf_clone+0x2a>
    return NULL;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	e011      	b.n	8008dee <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f7ff fe11 	bl	80089f4 <pbuf_copy>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008dd6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d006      	beq.n	8008dec <pbuf_clone+0x4c>
 8008dde:	4b06      	ldr	r3, [pc, #24]	; (8008df8 <pbuf_clone+0x58>)
 8008de0:	f240 5224 	movw	r2, #1316	; 0x524
 8008de4:	4905      	ldr	r1, [pc, #20]	; (8008dfc <pbuf_clone+0x5c>)
 8008de6:	4806      	ldr	r0, [pc, #24]	; (8008e00 <pbuf_clone+0x60>)
 8008de8:	f008 fac6 	bl	8011378 <iprintf>
  return q;
 8008dec:	68fb      	ldr	r3, [r7, #12]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	08012e38 	.word	0x08012e38
 8008dfc:	080132ac 	.word	0x080132ac
 8008e00:	08012e98 	.word	0x08012e98

08008e04 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008e08:	f008 face 	bl	80113a8 <rand>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	4b01      	ldr	r3, [pc, #4]	; (8008e24 <tcp_init+0x20>)
 8008e1e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008e20:	bf00      	nop
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	20000020 	.word	0x20000020

08008e28 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	7d1b      	ldrb	r3, [r3, #20]
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d105      	bne.n	8008e44 <tcp_free+0x1c>
 8008e38:	4b06      	ldr	r3, [pc, #24]	; (8008e54 <tcp_free+0x2c>)
 8008e3a:	22d4      	movs	r2, #212	; 0xd4
 8008e3c:	4906      	ldr	r1, [pc, #24]	; (8008e58 <tcp_free+0x30>)
 8008e3e:	4807      	ldr	r0, [pc, #28]	; (8008e5c <tcp_free+0x34>)
 8008e40:	f008 fa9a 	bl	8011378 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008e44:	6879      	ldr	r1, [r7, #4]
 8008e46:	2001      	movs	r0, #1
 8008e48:	f7fe fe36 	bl	8007ab8 <memp_free>
}
 8008e4c:	bf00      	nop
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	08013338 	.word	0x08013338
 8008e58:	08013368 	.word	0x08013368
 8008e5c:	0801337c 	.word	0x0801337c

08008e60 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	7d1b      	ldrb	r3, [r3, #20]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d105      	bne.n	8008e7c <tcp_free_listen+0x1c>
 8008e70:	4b06      	ldr	r3, [pc, #24]	; (8008e8c <tcp_free_listen+0x2c>)
 8008e72:	22df      	movs	r2, #223	; 0xdf
 8008e74:	4906      	ldr	r1, [pc, #24]	; (8008e90 <tcp_free_listen+0x30>)
 8008e76:	4807      	ldr	r0, [pc, #28]	; (8008e94 <tcp_free_listen+0x34>)
 8008e78:	f008 fa7e 	bl	8011378 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008e7c:	6879      	ldr	r1, [r7, #4]
 8008e7e:	2002      	movs	r0, #2
 8008e80:	f7fe fe1a 	bl	8007ab8 <memp_free>
}
 8008e84:	bf00      	nop
 8008e86:	3708      	adds	r7, #8
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	08013338 	.word	0x08013338
 8008e90:	080133a4 	.word	0x080133a4
 8008e94:	0801337c 	.word	0x0801337c

08008e98 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008e9c:	f000 fea2 	bl	8009be4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008ea0:	4b07      	ldr	r3, [pc, #28]	; (8008ec0 <tcp_tmr+0x28>)
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	b2da      	uxtb	r2, r3
 8008ea8:	4b05      	ldr	r3, [pc, #20]	; (8008ec0 <tcp_tmr+0x28>)
 8008eaa:	701a      	strb	r2, [r3, #0]
 8008eac:	4b04      	ldr	r3, [pc, #16]	; (8008ec0 <tcp_tmr+0x28>)
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	f003 0301 	and.w	r3, r3, #1
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d001      	beq.n	8008ebc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008eb8:	f000 fb54 	bl	8009564 <tcp_slowtmr>
  }
}
 8008ebc:	bf00      	nop
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	2000bc41 	.word	0x2000bc41

08008ec4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d105      	bne.n	8008ee0 <tcp_remove_listener+0x1c>
 8008ed4:	4b0d      	ldr	r3, [pc, #52]	; (8008f0c <tcp_remove_listener+0x48>)
 8008ed6:	22ff      	movs	r2, #255	; 0xff
 8008ed8:	490d      	ldr	r1, [pc, #52]	; (8008f10 <tcp_remove_listener+0x4c>)
 8008eda:	480e      	ldr	r0, [pc, #56]	; (8008f14 <tcp_remove_listener+0x50>)
 8008edc:	f008 fa4c 	bl	8011378 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	60fb      	str	r3, [r7, #12]
 8008ee4:	e00a      	b.n	8008efc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008eea:	683a      	ldr	r2, [r7, #0]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d102      	bne.n	8008ef6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	60fb      	str	r3, [r7, #12]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1f1      	bne.n	8008ee6 <tcp_remove_listener+0x22>
    }
  }
}
 8008f02:	bf00      	nop
 8008f04:	bf00      	nop
 8008f06:	3710      	adds	r7, #16
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	08013338 	.word	0x08013338
 8008f10:	080133c0 	.word	0x080133c0
 8008f14:	0801337c 	.word	0x0801337c

08008f18 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d106      	bne.n	8008f34 <tcp_listen_closed+0x1c>
 8008f26:	4b14      	ldr	r3, [pc, #80]	; (8008f78 <tcp_listen_closed+0x60>)
 8008f28:	f240 1211 	movw	r2, #273	; 0x111
 8008f2c:	4913      	ldr	r1, [pc, #76]	; (8008f7c <tcp_listen_closed+0x64>)
 8008f2e:	4814      	ldr	r0, [pc, #80]	; (8008f80 <tcp_listen_closed+0x68>)
 8008f30:	f008 fa22 	bl	8011378 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	7d1b      	ldrb	r3, [r3, #20]
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d006      	beq.n	8008f4a <tcp_listen_closed+0x32>
 8008f3c:	4b0e      	ldr	r3, [pc, #56]	; (8008f78 <tcp_listen_closed+0x60>)
 8008f3e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008f42:	4910      	ldr	r1, [pc, #64]	; (8008f84 <tcp_listen_closed+0x6c>)
 8008f44:	480e      	ldr	r0, [pc, #56]	; (8008f80 <tcp_listen_closed+0x68>)
 8008f46:	f008 fa17 	bl	8011378 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	60fb      	str	r3, [r7, #12]
 8008f4e:	e00b      	b.n	8008f68 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008f50:	4a0d      	ldr	r2, [pc, #52]	; (8008f88 <tcp_listen_closed+0x70>)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	6879      	ldr	r1, [r7, #4]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7ff ffb1 	bl	8008ec4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	3301      	adds	r3, #1
 8008f66:	60fb      	str	r3, [r7, #12]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2b03      	cmp	r3, #3
 8008f6c:	d9f0      	bls.n	8008f50 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008f6e:	bf00      	nop
 8008f70:	bf00      	nop
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	08013338 	.word	0x08013338
 8008f7c:	080133e8 	.word	0x080133e8
 8008f80:	0801337c 	.word	0x0801337c
 8008f84:	080133f4 	.word	0x080133f4
 8008f88:	08015318 	.word	0x08015318

08008f8c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008f8c:	b5b0      	push	{r4, r5, r7, lr}
 8008f8e:	b088      	sub	sp, #32
 8008f90:	af04      	add	r7, sp, #16
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	460b      	mov	r3, r1
 8008f96:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d106      	bne.n	8008fac <tcp_close_shutdown+0x20>
 8008f9e:	4b63      	ldr	r3, [pc, #396]	; (800912c <tcp_close_shutdown+0x1a0>)
 8008fa0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008fa4:	4962      	ldr	r1, [pc, #392]	; (8009130 <tcp_close_shutdown+0x1a4>)
 8008fa6:	4863      	ldr	r0, [pc, #396]	; (8009134 <tcp_close_shutdown+0x1a8>)
 8008fa8:	f008 f9e6 	bl	8011378 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008fac:	78fb      	ldrb	r3, [r7, #3]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d066      	beq.n	8009080 <tcp_close_shutdown+0xf4>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	7d1b      	ldrb	r3, [r3, #20]
 8008fb6:	2b04      	cmp	r3, #4
 8008fb8:	d003      	beq.n	8008fc2 <tcp_close_shutdown+0x36>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	7d1b      	ldrb	r3, [r3, #20]
 8008fbe:	2b07      	cmp	r3, #7
 8008fc0:	d15e      	bne.n	8009080 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d104      	bne.n	8008fd4 <tcp_close_shutdown+0x48>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fce:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008fd2:	d055      	beq.n	8009080 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	8b5b      	ldrh	r3, [r3, #26]
 8008fd8:	f003 0310 	and.w	r3, r3, #16
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d106      	bne.n	8008fee <tcp_close_shutdown+0x62>
 8008fe0:	4b52      	ldr	r3, [pc, #328]	; (800912c <tcp_close_shutdown+0x1a0>)
 8008fe2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008fe6:	4954      	ldr	r1, [pc, #336]	; (8009138 <tcp_close_shutdown+0x1ac>)
 8008fe8:	4852      	ldr	r0, [pc, #328]	; (8009134 <tcp_close_shutdown+0x1a8>)
 8008fea:	f008 f9c5 	bl	8011378 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008ff6:	687d      	ldr	r5, [r7, #4]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	3304      	adds	r3, #4
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	8ad2      	ldrh	r2, [r2, #22]
 8009000:	6879      	ldr	r1, [r7, #4]
 8009002:	8b09      	ldrh	r1, [r1, #24]
 8009004:	9102      	str	r1, [sp, #8]
 8009006:	9201      	str	r2, [sp, #4]
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	462b      	mov	r3, r5
 800900c:	4622      	mov	r2, r4
 800900e:	4601      	mov	r1, r0
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f004 fe91 	bl	800dd38 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f001 f8c6 	bl	800a1a8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800901c:	4b47      	ldr	r3, [pc, #284]	; (800913c <tcp_close_shutdown+0x1b0>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	429a      	cmp	r2, r3
 8009024:	d105      	bne.n	8009032 <tcp_close_shutdown+0xa6>
 8009026:	4b45      	ldr	r3, [pc, #276]	; (800913c <tcp_close_shutdown+0x1b0>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	4a43      	ldr	r2, [pc, #268]	; (800913c <tcp_close_shutdown+0x1b0>)
 800902e:	6013      	str	r3, [r2, #0]
 8009030:	e013      	b.n	800905a <tcp_close_shutdown+0xce>
 8009032:	4b42      	ldr	r3, [pc, #264]	; (800913c <tcp_close_shutdown+0x1b0>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	60fb      	str	r3, [r7, #12]
 8009038:	e00c      	b.n	8009054 <tcp_close_shutdown+0xc8>
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	429a      	cmp	r2, r3
 8009042:	d104      	bne.n	800904e <tcp_close_shutdown+0xc2>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	68da      	ldr	r2, [r3, #12]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	60da      	str	r2, [r3, #12]
 800904c:	e005      	b.n	800905a <tcp_close_shutdown+0xce>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	60fb      	str	r3, [r7, #12]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1ef      	bne.n	800903a <tcp_close_shutdown+0xae>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	60da      	str	r2, [r3, #12]
 8009060:	4b37      	ldr	r3, [pc, #220]	; (8009140 <tcp_close_shutdown+0x1b4>)
 8009062:	2201      	movs	r2, #1
 8009064:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8009066:	4b37      	ldr	r3, [pc, #220]	; (8009144 <tcp_close_shutdown+0x1b8>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	429a      	cmp	r2, r3
 800906e:	d102      	bne.n	8009076 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009070:	f003 fd5e 	bl	800cb30 <tcp_trigger_input_pcb_close>
 8009074:	e002      	b.n	800907c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f7ff fed6 	bl	8008e28 <tcp_free>
      }
      return ERR_OK;
 800907c:	2300      	movs	r3, #0
 800907e:	e050      	b.n	8009122 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	7d1b      	ldrb	r3, [r3, #20]
 8009084:	2b02      	cmp	r3, #2
 8009086:	d03b      	beq.n	8009100 <tcp_close_shutdown+0x174>
 8009088:	2b02      	cmp	r3, #2
 800908a:	dc44      	bgt.n	8009116 <tcp_close_shutdown+0x18a>
 800908c:	2b00      	cmp	r3, #0
 800908e:	d002      	beq.n	8009096 <tcp_close_shutdown+0x10a>
 8009090:	2b01      	cmp	r3, #1
 8009092:	d02a      	beq.n	80090ea <tcp_close_shutdown+0x15e>
 8009094:	e03f      	b.n	8009116 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	8adb      	ldrh	r3, [r3, #22]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d021      	beq.n	80090e2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800909e:	4b2a      	ldr	r3, [pc, #168]	; (8009148 <tcp_close_shutdown+0x1bc>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d105      	bne.n	80090b4 <tcp_close_shutdown+0x128>
 80090a8:	4b27      	ldr	r3, [pc, #156]	; (8009148 <tcp_close_shutdown+0x1bc>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	4a26      	ldr	r2, [pc, #152]	; (8009148 <tcp_close_shutdown+0x1bc>)
 80090b0:	6013      	str	r3, [r2, #0]
 80090b2:	e013      	b.n	80090dc <tcp_close_shutdown+0x150>
 80090b4:	4b24      	ldr	r3, [pc, #144]	; (8009148 <tcp_close_shutdown+0x1bc>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	60bb      	str	r3, [r7, #8]
 80090ba:	e00c      	b.n	80090d6 <tcp_close_shutdown+0x14a>
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d104      	bne.n	80090d0 <tcp_close_shutdown+0x144>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	68da      	ldr	r2, [r3, #12]
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	60da      	str	r2, [r3, #12]
 80090ce:	e005      	b.n	80090dc <tcp_close_shutdown+0x150>
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	60bb      	str	r3, [r7, #8]
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d1ef      	bne.n	80090bc <tcp_close_shutdown+0x130>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f7ff fea0 	bl	8008e28 <tcp_free>
      break;
 80090e8:	e01a      	b.n	8009120 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f7ff ff14 	bl	8008f18 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80090f0:	6879      	ldr	r1, [r7, #4]
 80090f2:	4816      	ldr	r0, [pc, #88]	; (800914c <tcp_close_shutdown+0x1c0>)
 80090f4:	f001 f8a8 	bl	800a248 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f7ff feb1 	bl	8008e60 <tcp_free_listen>
      break;
 80090fe:	e00f      	b.n	8009120 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009100:	6879      	ldr	r1, [r7, #4]
 8009102:	480e      	ldr	r0, [pc, #56]	; (800913c <tcp_close_shutdown+0x1b0>)
 8009104:	f001 f8a0 	bl	800a248 <tcp_pcb_remove>
 8009108:	4b0d      	ldr	r3, [pc, #52]	; (8009140 <tcp_close_shutdown+0x1b4>)
 800910a:	2201      	movs	r2, #1
 800910c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f7ff fe8a 	bl	8008e28 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009114:	e004      	b.n	8009120 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f81a 	bl	8009150 <tcp_close_shutdown_fin>
 800911c:	4603      	mov	r3, r0
 800911e:	e000      	b.n	8009122 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bdb0      	pop	{r4, r5, r7, pc}
 800912a:	bf00      	nop
 800912c:	08013338 	.word	0x08013338
 8009130:	0801340c 	.word	0x0801340c
 8009134:	0801337c 	.word	0x0801337c
 8009138:	0801342c 	.word	0x0801342c
 800913c:	2000bc38 	.word	0x2000bc38
 8009140:	2000bc40 	.word	0x2000bc40
 8009144:	2000bc78 	.word	0x2000bc78
 8009148:	2000bc30 	.word	0x2000bc30
 800914c:	2000bc34 	.word	0x2000bc34

08009150 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d106      	bne.n	800916c <tcp_close_shutdown_fin+0x1c>
 800915e:	4b2e      	ldr	r3, [pc, #184]	; (8009218 <tcp_close_shutdown_fin+0xc8>)
 8009160:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009164:	492d      	ldr	r1, [pc, #180]	; (800921c <tcp_close_shutdown_fin+0xcc>)
 8009166:	482e      	ldr	r0, [pc, #184]	; (8009220 <tcp_close_shutdown_fin+0xd0>)
 8009168:	f008 f906 	bl	8011378 <iprintf>

  switch (pcb->state) {
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	7d1b      	ldrb	r3, [r3, #20]
 8009170:	2b07      	cmp	r3, #7
 8009172:	d020      	beq.n	80091b6 <tcp_close_shutdown_fin+0x66>
 8009174:	2b07      	cmp	r3, #7
 8009176:	dc2b      	bgt.n	80091d0 <tcp_close_shutdown_fin+0x80>
 8009178:	2b03      	cmp	r3, #3
 800917a:	d002      	beq.n	8009182 <tcp_close_shutdown_fin+0x32>
 800917c:	2b04      	cmp	r3, #4
 800917e:	d00d      	beq.n	800919c <tcp_close_shutdown_fin+0x4c>
 8009180:	e026      	b.n	80091d0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f003 fee6 	bl	800cf54 <tcp_send_fin>
 8009188:	4603      	mov	r3, r0
 800918a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800918c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d11f      	bne.n	80091d4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2205      	movs	r2, #5
 8009198:	751a      	strb	r2, [r3, #20]
      }
      break;
 800919a:	e01b      	b.n	80091d4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f003 fed9 	bl	800cf54 <tcp_send_fin>
 80091a2:	4603      	mov	r3, r0
 80091a4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80091a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d114      	bne.n	80091d8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2205      	movs	r2, #5
 80091b2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80091b4:	e010      	b.n	80091d8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f003 fecc 	bl	800cf54 <tcp_send_fin>
 80091bc:	4603      	mov	r3, r0
 80091be:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80091c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d109      	bne.n	80091dc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2209      	movs	r2, #9
 80091cc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80091ce:	e005      	b.n	80091dc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80091d0:	2300      	movs	r3, #0
 80091d2:	e01c      	b.n	800920e <tcp_close_shutdown_fin+0xbe>
      break;
 80091d4:	bf00      	nop
 80091d6:	e002      	b.n	80091de <tcp_close_shutdown_fin+0x8e>
      break;
 80091d8:	bf00      	nop
 80091da:	e000      	b.n	80091de <tcp_close_shutdown_fin+0x8e>
      break;
 80091dc:	bf00      	nop
  }

  if (err == ERR_OK) {
 80091de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d103      	bne.n	80091ee <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f003 fff2 	bl	800d1d0 <tcp_output>
 80091ec:	e00d      	b.n	800920a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80091ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f6:	d108      	bne.n	800920a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	8b5b      	ldrh	r3, [r3, #26]
 80091fc:	f043 0308 	orr.w	r3, r3, #8
 8009200:	b29a      	uxth	r2, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009206:	2300      	movs	r3, #0
 8009208:	e001      	b.n	800920e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800920a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	08013338 	.word	0x08013338
 800921c:	080133e8 	.word	0x080133e8
 8009220:	0801337c 	.word	0x0801337c

08009224 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d109      	bne.n	8009246 <tcp_close+0x22>
 8009232:	4b0f      	ldr	r3, [pc, #60]	; (8009270 <tcp_close+0x4c>)
 8009234:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009238:	490e      	ldr	r1, [pc, #56]	; (8009274 <tcp_close+0x50>)
 800923a:	480f      	ldr	r0, [pc, #60]	; (8009278 <tcp_close+0x54>)
 800923c:	f008 f89c 	bl	8011378 <iprintf>
 8009240:	f06f 030f 	mvn.w	r3, #15
 8009244:	e00f      	b.n	8009266 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	7d1b      	ldrb	r3, [r3, #20]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d006      	beq.n	800925c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	8b5b      	ldrh	r3, [r3, #26]
 8009252:	f043 0310 	orr.w	r3, r3, #16
 8009256:	b29a      	uxth	r2, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800925c:	2101      	movs	r1, #1
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f7ff fe94 	bl	8008f8c <tcp_close_shutdown>
 8009264:	4603      	mov	r3, r0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3708      	adds	r7, #8
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	08013338 	.word	0x08013338
 8009274:	08013448 	.word	0x08013448
 8009278:	0801337c 	.word	0x0801337c

0800927c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b08e      	sub	sp, #56	; 0x38
 8009280:	af04      	add	r7, sp, #16
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d107      	bne.n	800929c <tcp_abandon+0x20>
 800928c:	4b52      	ldr	r3, [pc, #328]	; (80093d8 <tcp_abandon+0x15c>)
 800928e:	f240 223d 	movw	r2, #573	; 0x23d
 8009292:	4952      	ldr	r1, [pc, #328]	; (80093dc <tcp_abandon+0x160>)
 8009294:	4852      	ldr	r0, [pc, #328]	; (80093e0 <tcp_abandon+0x164>)
 8009296:	f008 f86f 	bl	8011378 <iprintf>
 800929a:	e099      	b.n	80093d0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	7d1b      	ldrb	r3, [r3, #20]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d106      	bne.n	80092b2 <tcp_abandon+0x36>
 80092a4:	4b4c      	ldr	r3, [pc, #304]	; (80093d8 <tcp_abandon+0x15c>)
 80092a6:	f44f 7210 	mov.w	r2, #576	; 0x240
 80092aa:	494e      	ldr	r1, [pc, #312]	; (80093e4 <tcp_abandon+0x168>)
 80092ac:	484c      	ldr	r0, [pc, #304]	; (80093e0 <tcp_abandon+0x164>)
 80092ae:	f008 f863 	bl	8011378 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	7d1b      	ldrb	r3, [r3, #20]
 80092b6:	2b0a      	cmp	r3, #10
 80092b8:	d107      	bne.n	80092ca <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80092ba:	6879      	ldr	r1, [r7, #4]
 80092bc:	484a      	ldr	r0, [pc, #296]	; (80093e8 <tcp_abandon+0x16c>)
 80092be:	f000 ffc3 	bl	800a248 <tcp_pcb_remove>
    tcp_free(pcb);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f7ff fdb0 	bl	8008e28 <tcp_free>
 80092c8:	e082      	b.n	80093d0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80092ca:	2300      	movs	r3, #0
 80092cc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80092ce:	2300      	movs	r3, #0
 80092d0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092d6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092dc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092e4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	7d1b      	ldrb	r3, [r3, #20]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d126      	bne.n	8009342 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	8adb      	ldrh	r3, [r3, #22]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d02e      	beq.n	800935a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80092fc:	4b3b      	ldr	r3, [pc, #236]	; (80093ec <tcp_abandon+0x170>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	429a      	cmp	r2, r3
 8009304:	d105      	bne.n	8009312 <tcp_abandon+0x96>
 8009306:	4b39      	ldr	r3, [pc, #228]	; (80093ec <tcp_abandon+0x170>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	4a37      	ldr	r2, [pc, #220]	; (80093ec <tcp_abandon+0x170>)
 800930e:	6013      	str	r3, [r2, #0]
 8009310:	e013      	b.n	800933a <tcp_abandon+0xbe>
 8009312:	4b36      	ldr	r3, [pc, #216]	; (80093ec <tcp_abandon+0x170>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	61fb      	str	r3, [r7, #28]
 8009318:	e00c      	b.n	8009334 <tcp_abandon+0xb8>
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	429a      	cmp	r2, r3
 8009322:	d104      	bne.n	800932e <tcp_abandon+0xb2>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	68da      	ldr	r2, [r3, #12]
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	60da      	str	r2, [r3, #12]
 800932c:	e005      	b.n	800933a <tcp_abandon+0xbe>
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	61fb      	str	r3, [r7, #28]
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1ef      	bne.n	800931a <tcp_abandon+0x9e>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	60da      	str	r2, [r3, #12]
 8009340:	e00b      	b.n	800935a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	8adb      	ldrh	r3, [r3, #22]
 800934a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800934c:	6879      	ldr	r1, [r7, #4]
 800934e:	4828      	ldr	r0, [pc, #160]	; (80093f0 <tcp_abandon+0x174>)
 8009350:	f000 ff7a 	bl	800a248 <tcp_pcb_remove>
 8009354:	4b27      	ldr	r3, [pc, #156]	; (80093f4 <tcp_abandon+0x178>)
 8009356:	2201      	movs	r2, #1
 8009358:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800935e:	2b00      	cmp	r3, #0
 8009360:	d004      	beq.n	800936c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009366:	4618      	mov	r0, r3
 8009368:	f000 fd1c 	bl	8009da4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009370:	2b00      	cmp	r3, #0
 8009372:	d004      	beq.n	800937e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009378:	4618      	mov	r0, r3
 800937a:	f000 fd13 	bl	8009da4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009382:	2b00      	cmp	r3, #0
 8009384:	d004      	beq.n	8009390 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800938a:	4618      	mov	r0, r3
 800938c:	f000 fd0a 	bl	8009da4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00e      	beq.n	80093b4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009396:	6879      	ldr	r1, [r7, #4]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	3304      	adds	r3, #4
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	8b12      	ldrh	r2, [r2, #24]
 80093a0:	9202      	str	r2, [sp, #8]
 80093a2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80093a4:	9201      	str	r2, [sp, #4]
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	460b      	mov	r3, r1
 80093aa:	697a      	ldr	r2, [r7, #20]
 80093ac:	69b9      	ldr	r1, [r7, #24]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f004 fcc2 	bl	800dd38 <tcp_rst>
    }
    last_state = pcb->state;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	7d1b      	ldrb	r3, [r3, #20]
 80093b8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f7ff fd34 	bl	8008e28 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d004      	beq.n	80093d0 <tcp_abandon+0x154>
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	f06f 010c 	mvn.w	r1, #12
 80093cc:	68f8      	ldr	r0, [r7, #12]
 80093ce:	4798      	blx	r3
  }
}
 80093d0:	3728      	adds	r7, #40	; 0x28
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	08013338 	.word	0x08013338
 80093dc:	0801347c 	.word	0x0801347c
 80093e0:	0801337c 	.word	0x0801337c
 80093e4:	08013498 	.word	0x08013498
 80093e8:	2000bc3c 	.word	0x2000bc3c
 80093ec:	2000bc30 	.word	0x2000bc30
 80093f0:	2000bc38 	.word	0x2000bc38
 80093f4:	2000bc40 	.word	0x2000bc40

080093f8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009400:	2101      	movs	r1, #1
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f7ff ff3a 	bl	800927c <tcp_abandon>
}
 8009408:	bf00      	nop
 800940a:	3708      	adds	r7, #8
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d106      	bne.n	800942c <tcp_update_rcv_ann_wnd+0x1c>
 800941e:	4b25      	ldr	r3, [pc, #148]	; (80094b4 <tcp_update_rcv_ann_wnd+0xa4>)
 8009420:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009424:	4924      	ldr	r1, [pc, #144]	; (80094b8 <tcp_update_rcv_ann_wnd+0xa8>)
 8009426:	4825      	ldr	r0, [pc, #148]	; (80094bc <tcp_update_rcv_ann_wnd+0xac>)
 8009428:	f007 ffa6 	bl	8011378 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009434:	4413      	add	r3, r2
 8009436:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009440:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009444:	bf28      	it	cs
 8009446:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800944a:	b292      	uxth	r2, r2
 800944c:	4413      	add	r3, r2
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	2b00      	cmp	r3, #0
 8009454:	db08      	blt.n	8009468 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009462:	68fa      	ldr	r2, [r7, #12]
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	e020      	b.n	80094aa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	2b00      	cmp	r3, #0
 8009474:	dd03      	ble.n	800947e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800947c:	e014      	b.n	80094a8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009486:	1ad3      	subs	r3, r2, r3
 8009488:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009490:	d306      	bcc.n	80094a0 <tcp_update_rcv_ann_wnd+0x90>
 8009492:	4b08      	ldr	r3, [pc, #32]	; (80094b4 <tcp_update_rcv_ann_wnd+0xa4>)
 8009494:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009498:	4909      	ldr	r1, [pc, #36]	; (80094c0 <tcp_update_rcv_ann_wnd+0xb0>)
 800949a:	4808      	ldr	r0, [pc, #32]	; (80094bc <tcp_update_rcv_ann_wnd+0xac>)
 800949c:	f007 ff6c 	bl	8011378 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	b29a      	uxth	r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80094a8:	2300      	movs	r3, #0
  }
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	08013338 	.word	0x08013338
 80094b8:	08013594 	.word	0x08013594
 80094bc:	0801337c 	.word	0x0801337c
 80094c0:	080135b8 	.word	0x080135b8

080094c4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	460b      	mov	r3, r1
 80094ce:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d107      	bne.n	80094e6 <tcp_recved+0x22>
 80094d6:	4b1f      	ldr	r3, [pc, #124]	; (8009554 <tcp_recved+0x90>)
 80094d8:	f240 32cf 	movw	r2, #975	; 0x3cf
 80094dc:	491e      	ldr	r1, [pc, #120]	; (8009558 <tcp_recved+0x94>)
 80094de:	481f      	ldr	r0, [pc, #124]	; (800955c <tcp_recved+0x98>)
 80094e0:	f007 ff4a 	bl	8011378 <iprintf>
 80094e4:	e032      	b.n	800954c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	7d1b      	ldrb	r3, [r3, #20]
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d106      	bne.n	80094fc <tcp_recved+0x38>
 80094ee:	4b19      	ldr	r3, [pc, #100]	; (8009554 <tcp_recved+0x90>)
 80094f0:	f240 32d2 	movw	r2, #978	; 0x3d2
 80094f4:	491a      	ldr	r1, [pc, #104]	; (8009560 <tcp_recved+0x9c>)
 80094f6:	4819      	ldr	r0, [pc, #100]	; (800955c <tcp_recved+0x98>)
 80094f8:	f007 ff3e 	bl	8011378 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009500:	887b      	ldrh	r3, [r7, #2]
 8009502:	4413      	add	r3, r2
 8009504:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009506:	89fb      	ldrh	r3, [r7, #14]
 8009508:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800950c:	d804      	bhi.n	8009518 <tcp_recved+0x54>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009512:	89fa      	ldrh	r2, [r7, #14]
 8009514:	429a      	cmp	r2, r3
 8009516:	d204      	bcs.n	8009522 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800951e:	851a      	strh	r2, [r3, #40]	; 0x28
 8009520:	e002      	b.n	8009528 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	89fa      	ldrh	r2, [r7, #14]
 8009526:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f7ff ff71 	bl	8009410 <tcp_update_rcv_ann_wnd>
 800952e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009536:	d309      	bcc.n	800954c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	8b5b      	ldrh	r3, [r3, #26]
 800953c:	f043 0302 	orr.w	r3, r3, #2
 8009540:	b29a      	uxth	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f003 fe42 	bl	800d1d0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	08013338 	.word	0x08013338
 8009558:	080135d4 	.word	0x080135d4
 800955c:	0801337c 	.word	0x0801337c
 8009560:	080135ec 	.word	0x080135ec

08009564 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009564:	b5b0      	push	{r4, r5, r7, lr}
 8009566:	b090      	sub	sp, #64	; 0x40
 8009568:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800956a:	2300      	movs	r3, #0
 800956c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8009570:	4b94      	ldr	r3, [pc, #592]	; (80097c4 <tcp_slowtmr+0x260>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	3301      	adds	r3, #1
 8009576:	4a93      	ldr	r2, [pc, #588]	; (80097c4 <tcp_slowtmr+0x260>)
 8009578:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800957a:	4b93      	ldr	r3, [pc, #588]	; (80097c8 <tcp_slowtmr+0x264>)
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	3301      	adds	r3, #1
 8009580:	b2da      	uxtb	r2, r3
 8009582:	4b91      	ldr	r3, [pc, #580]	; (80097c8 <tcp_slowtmr+0x264>)
 8009584:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8009586:	2300      	movs	r3, #0
 8009588:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800958a:	4b90      	ldr	r3, [pc, #576]	; (80097cc <tcp_slowtmr+0x268>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8009590:	e29d      	b.n	8009ace <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009594:	7d1b      	ldrb	r3, [r3, #20]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d106      	bne.n	80095a8 <tcp_slowtmr+0x44>
 800959a:	4b8d      	ldr	r3, [pc, #564]	; (80097d0 <tcp_slowtmr+0x26c>)
 800959c:	f240 42be 	movw	r2, #1214	; 0x4be
 80095a0:	498c      	ldr	r1, [pc, #560]	; (80097d4 <tcp_slowtmr+0x270>)
 80095a2:	488d      	ldr	r0, [pc, #564]	; (80097d8 <tcp_slowtmr+0x274>)
 80095a4:	f007 fee8 	bl	8011378 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80095a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095aa:	7d1b      	ldrb	r3, [r3, #20]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d106      	bne.n	80095be <tcp_slowtmr+0x5a>
 80095b0:	4b87      	ldr	r3, [pc, #540]	; (80097d0 <tcp_slowtmr+0x26c>)
 80095b2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80095b6:	4989      	ldr	r1, [pc, #548]	; (80097dc <tcp_slowtmr+0x278>)
 80095b8:	4887      	ldr	r0, [pc, #540]	; (80097d8 <tcp_slowtmr+0x274>)
 80095ba:	f007 fedd 	bl	8011378 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80095be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c0:	7d1b      	ldrb	r3, [r3, #20]
 80095c2:	2b0a      	cmp	r3, #10
 80095c4:	d106      	bne.n	80095d4 <tcp_slowtmr+0x70>
 80095c6:	4b82      	ldr	r3, [pc, #520]	; (80097d0 <tcp_slowtmr+0x26c>)
 80095c8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80095cc:	4984      	ldr	r1, [pc, #528]	; (80097e0 <tcp_slowtmr+0x27c>)
 80095ce:	4882      	ldr	r0, [pc, #520]	; (80097d8 <tcp_slowtmr+0x274>)
 80095d0:	f007 fed2 	bl	8011378 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80095d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d6:	7f9a      	ldrb	r2, [r3, #30]
 80095d8:	4b7b      	ldr	r3, [pc, #492]	; (80097c8 <tcp_slowtmr+0x264>)
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d105      	bne.n	80095ec <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80095e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80095e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80095ea:	e270      	b.n	8009ace <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80095ec:	4b76      	ldr	r3, [pc, #472]	; (80097c8 <tcp_slowtmr+0x264>)
 80095ee:	781a      	ldrb	r2, [r3, #0]
 80095f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80095f4:	2300      	movs	r3, #0
 80095f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80095fa:	2300      	movs	r3, #0
 80095fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009602:	7d1b      	ldrb	r3, [r3, #20]
 8009604:	2b02      	cmp	r3, #2
 8009606:	d10a      	bne.n	800961e <tcp_slowtmr+0xba>
 8009608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800960e:	2b05      	cmp	r3, #5
 8009610:	d905      	bls.n	800961e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8009612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009616:	3301      	adds	r3, #1
 8009618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800961c:	e11e      	b.n	800985c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800961e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009620:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009624:	2b0b      	cmp	r3, #11
 8009626:	d905      	bls.n	8009634 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8009628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800962c:	3301      	adds	r3, #1
 800962e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009632:	e113      	b.n	800985c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009636:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800963a:	2b00      	cmp	r3, #0
 800963c:	d075      	beq.n	800972a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800963e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009642:	2b00      	cmp	r3, #0
 8009644:	d006      	beq.n	8009654 <tcp_slowtmr+0xf0>
 8009646:	4b62      	ldr	r3, [pc, #392]	; (80097d0 <tcp_slowtmr+0x26c>)
 8009648:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800964c:	4965      	ldr	r1, [pc, #404]	; (80097e4 <tcp_slowtmr+0x280>)
 800964e:	4862      	ldr	r0, [pc, #392]	; (80097d8 <tcp_slowtmr+0x274>)
 8009650:	f007 fe92 	bl	8011378 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009658:	2b00      	cmp	r3, #0
 800965a:	d106      	bne.n	800966a <tcp_slowtmr+0x106>
 800965c:	4b5c      	ldr	r3, [pc, #368]	; (80097d0 <tcp_slowtmr+0x26c>)
 800965e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8009662:	4961      	ldr	r1, [pc, #388]	; (80097e8 <tcp_slowtmr+0x284>)
 8009664:	485c      	ldr	r0, [pc, #368]	; (80097d8 <tcp_slowtmr+0x274>)
 8009666:	f007 fe87 	bl	8011378 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800966a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8009670:	2b0b      	cmp	r3, #11
 8009672:	d905      	bls.n	8009680 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8009674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009678:	3301      	adds	r3, #1
 800967a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800967e:	e0ed      	b.n	800985c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009682:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009686:	3b01      	subs	r3, #1
 8009688:	4a58      	ldr	r2, [pc, #352]	; (80097ec <tcp_slowtmr+0x288>)
 800968a:	5cd3      	ldrb	r3, [r2, r3]
 800968c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800968e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009690:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009694:	7c7a      	ldrb	r2, [r7, #17]
 8009696:	429a      	cmp	r2, r3
 8009698:	d907      	bls.n	80096aa <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800969a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80096a0:	3301      	adds	r3, #1
 80096a2:	b2da      	uxtb	r2, r3
 80096a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80096aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80096b0:	7c7a      	ldrb	r2, [r7, #17]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	f200 80d2 	bhi.w	800985c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80096b8:	2301      	movs	r3, #1
 80096ba:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80096bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d108      	bne.n	80096d8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80096c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096c8:	f004 fc2a 	bl	800df20 <tcp_zero_window_probe>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d014      	beq.n	80096fc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80096d2:	2300      	movs	r3, #0
 80096d4:	623b      	str	r3, [r7, #32]
 80096d6:	e011      	b.n	80096fc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80096d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80096de:	4619      	mov	r1, r3
 80096e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096e2:	f003 faef 	bl	800ccc4 <tcp_split_unsent_seg>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d107      	bne.n	80096fc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80096ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096ee:	f003 fd6f 	bl	800d1d0 <tcp_output>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d101      	bne.n	80096fc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80096f8:	2300      	movs	r3, #0
 80096fa:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80096fc:	6a3b      	ldr	r3, [r7, #32]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f000 80ac 	beq.w	800985c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8009704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009706:	2200      	movs	r2, #0
 8009708:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800970c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009712:	2b06      	cmp	r3, #6
 8009714:	f200 80a2 	bhi.w	800985c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8009718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800971e:	3301      	adds	r3, #1
 8009720:	b2da      	uxtb	r2, r3
 8009722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009724:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8009728:	e098      	b.n	800985c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800972a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009730:	2b00      	cmp	r3, #0
 8009732:	db0f      	blt.n	8009754 <tcp_slowtmr+0x1f0>
 8009734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009736:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800973a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800973e:	4293      	cmp	r3, r2
 8009740:	d008      	beq.n	8009754 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8009742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009744:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009748:	b29b      	uxth	r3, r3
 800974a:	3301      	adds	r3, #1
 800974c:	b29b      	uxth	r3, r3
 800974e:	b21a      	sxth	r2, r3
 8009750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009752:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8009754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009756:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800975a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009760:	429a      	cmp	r2, r3
 8009762:	db7b      	blt.n	800985c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009764:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009766:	f004 f825 	bl	800d7b4 <tcp_rexmit_rto_prepare>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d007      	beq.n	8009780 <tcp_slowtmr+0x21c>
 8009770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009774:	2b00      	cmp	r3, #0
 8009776:	d171      	bne.n	800985c <tcp_slowtmr+0x2f8>
 8009778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800977a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800977c:	2b00      	cmp	r3, #0
 800977e:	d06d      	beq.n	800985c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8009780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009782:	7d1b      	ldrb	r3, [r3, #20]
 8009784:	2b02      	cmp	r3, #2
 8009786:	d03a      	beq.n	80097fe <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800978e:	2b0c      	cmp	r3, #12
 8009790:	bf28      	it	cs
 8009792:	230c      	movcs	r3, #12
 8009794:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009798:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800979c:	10db      	asrs	r3, r3, #3
 800979e:	b21b      	sxth	r3, r3
 80097a0:	461a      	mov	r2, r3
 80097a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80097a8:	4413      	add	r3, r2
 80097aa:	7efa      	ldrb	r2, [r7, #27]
 80097ac:	4910      	ldr	r1, [pc, #64]	; (80097f0 <tcp_slowtmr+0x28c>)
 80097ae:	5c8a      	ldrb	r2, [r1, r2]
 80097b0:	4093      	lsls	r3, r2
 80097b2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80097ba:	4293      	cmp	r3, r2
 80097bc:	dc1a      	bgt.n	80097f4 <tcp_slowtmr+0x290>
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	b21a      	sxth	r2, r3
 80097c2:	e019      	b.n	80097f8 <tcp_slowtmr+0x294>
 80097c4:	2000bc2c 	.word	0x2000bc2c
 80097c8:	2000bc42 	.word	0x2000bc42
 80097cc:	2000bc38 	.word	0x2000bc38
 80097d0:	08013338 	.word	0x08013338
 80097d4:	0801367c 	.word	0x0801367c
 80097d8:	0801337c 	.word	0x0801337c
 80097dc:	080136a8 	.word	0x080136a8
 80097e0:	080136d4 	.word	0x080136d4
 80097e4:	08013704 	.word	0x08013704
 80097e8:	08013738 	.word	0x08013738
 80097ec:	08015310 	.word	0x08015310
 80097f0:	08015300 	.word	0x08015300
 80097f4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80097f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80097fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009800:	2200      	movs	r2, #0
 8009802:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009806:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800980a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800980c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009810:	4293      	cmp	r3, r2
 8009812:	bf28      	it	cs
 8009814:	4613      	movcs	r3, r2
 8009816:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009818:	8a7b      	ldrh	r3, [r7, #18]
 800981a:	085b      	lsrs	r3, r3, #1
 800981c:	b29a      	uxth	r2, r3
 800981e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009820:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009826:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800982a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800982e:	005b      	lsls	r3, r3, #1
 8009830:	b29b      	uxth	r3, r3
 8009832:	429a      	cmp	r2, r3
 8009834:	d206      	bcs.n	8009844 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009838:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800983a:	005b      	lsls	r3, r3, #1
 800983c:	b29a      	uxth	r2, r3
 800983e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009840:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8009844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009846:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800984a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800984e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009850:	2200      	movs	r2, #0
 8009852:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8009856:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009858:	f004 f81c 	bl	800d894 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800985c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800985e:	7d1b      	ldrb	r3, [r3, #20]
 8009860:	2b06      	cmp	r3, #6
 8009862:	d111      	bne.n	8009888 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8009864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009866:	8b5b      	ldrh	r3, [r3, #26]
 8009868:	f003 0310 	and.w	r3, r3, #16
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00b      	beq.n	8009888 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009870:	4b9c      	ldr	r3, [pc, #624]	; (8009ae4 <tcp_slowtmr+0x580>)
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009876:	6a1b      	ldr	r3, [r3, #32]
 8009878:	1ad3      	subs	r3, r2, r3
 800987a:	2b28      	cmp	r3, #40	; 0x28
 800987c:	d904      	bls.n	8009888 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800987e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009882:	3301      	adds	r3, #1
 8009884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988a:	7a5b      	ldrb	r3, [r3, #9]
 800988c:	f003 0308 	and.w	r3, r3, #8
 8009890:	2b00      	cmp	r3, #0
 8009892:	d04a      	beq.n	800992a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8009894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009896:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009898:	2b04      	cmp	r3, #4
 800989a:	d003      	beq.n	80098a4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800989c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80098a0:	2b07      	cmp	r3, #7
 80098a2:	d142      	bne.n	800992a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80098a4:	4b8f      	ldr	r3, [pc, #572]	; (8009ae4 <tcp_slowtmr+0x580>)
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098aa:	6a1b      	ldr	r3, [r3, #32]
 80098ac:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80098ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80098b4:	4b8c      	ldr	r3, [pc, #560]	; (8009ae8 <tcp_slowtmr+0x584>)
 80098b6:	440b      	add	r3, r1
 80098b8:	498c      	ldr	r1, [pc, #560]	; (8009aec <tcp_slowtmr+0x588>)
 80098ba:	fba1 1303 	umull	r1, r3, r1, r3
 80098be:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d90a      	bls.n	80098da <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80098c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098c8:	3301      	adds	r3, #1
 80098ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80098ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80098d2:	3301      	adds	r3, #1
 80098d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80098d8:	e027      	b.n	800992a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80098da:	4b82      	ldr	r3, [pc, #520]	; (8009ae4 <tcp_slowtmr+0x580>)
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e0:	6a1b      	ldr	r3, [r3, #32]
 80098e2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80098e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80098ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ec:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80098f0:	4618      	mov	r0, r3
 80098f2:	4b7f      	ldr	r3, [pc, #508]	; (8009af0 <tcp_slowtmr+0x58c>)
 80098f4:	fb00 f303 	mul.w	r3, r0, r3
 80098f8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80098fa:	497c      	ldr	r1, [pc, #496]	; (8009aec <tcp_slowtmr+0x588>)
 80098fc:	fba1 1303 	umull	r1, r3, r1, r3
 8009900:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009902:	429a      	cmp	r2, r3
 8009904:	d911      	bls.n	800992a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8009906:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009908:	f004 faca 	bl	800dea0 <tcp_keepalive>
 800990c:	4603      	mov	r3, r0
 800990e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8009912:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009916:	2b00      	cmp	r3, #0
 8009918:	d107      	bne.n	800992a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800991a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009920:	3301      	adds	r3, #1
 8009922:	b2da      	uxtb	r2, r3
 8009924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009926:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800992a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800992e:	2b00      	cmp	r3, #0
 8009930:	d011      	beq.n	8009956 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009932:	4b6c      	ldr	r3, [pc, #432]	; (8009ae4 <tcp_slowtmr+0x580>)
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	1ad2      	subs	r2, r2, r3
 800993c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009942:	4619      	mov	r1, r3
 8009944:	460b      	mov	r3, r1
 8009946:	005b      	lsls	r3, r3, #1
 8009948:	440b      	add	r3, r1
 800994a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800994c:	429a      	cmp	r2, r3
 800994e:	d302      	bcc.n	8009956 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8009950:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009952:	f000 fddd 	bl	800a510 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8009956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009958:	7d1b      	ldrb	r3, [r3, #20]
 800995a:	2b03      	cmp	r3, #3
 800995c:	d10b      	bne.n	8009976 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800995e:	4b61      	ldr	r3, [pc, #388]	; (8009ae4 <tcp_slowtmr+0x580>)
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009964:	6a1b      	ldr	r3, [r3, #32]
 8009966:	1ad3      	subs	r3, r2, r3
 8009968:	2b28      	cmp	r3, #40	; 0x28
 800996a:	d904      	bls.n	8009976 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800996c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009970:	3301      	adds	r3, #1
 8009972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8009976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009978:	7d1b      	ldrb	r3, [r3, #20]
 800997a:	2b09      	cmp	r3, #9
 800997c:	d10b      	bne.n	8009996 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800997e:	4b59      	ldr	r3, [pc, #356]	; (8009ae4 <tcp_slowtmr+0x580>)
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009984:	6a1b      	ldr	r3, [r3, #32]
 8009986:	1ad3      	subs	r3, r2, r3
 8009988:	2bf0      	cmp	r3, #240	; 0xf0
 800998a:	d904      	bls.n	8009996 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800998c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009990:	3301      	adds	r3, #1
 8009992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009996:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800999a:	2b00      	cmp	r3, #0
 800999c:	d060      	beq.n	8009a60 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800999e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099a4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80099a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099a8:	f000 fbfe 	bl	800a1a8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80099ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d010      	beq.n	80099d4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80099b2:	4b50      	ldr	r3, [pc, #320]	; (8009af4 <tcp_slowtmr+0x590>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d106      	bne.n	80099ca <tcp_slowtmr+0x466>
 80099bc:	4b4e      	ldr	r3, [pc, #312]	; (8009af8 <tcp_slowtmr+0x594>)
 80099be:	f240 526d 	movw	r2, #1389	; 0x56d
 80099c2:	494e      	ldr	r1, [pc, #312]	; (8009afc <tcp_slowtmr+0x598>)
 80099c4:	484e      	ldr	r0, [pc, #312]	; (8009b00 <tcp_slowtmr+0x59c>)
 80099c6:	f007 fcd7 	bl	8011378 <iprintf>
        prev->next = pcb->next;
 80099ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099cc:	68da      	ldr	r2, [r3, #12]
 80099ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d0:	60da      	str	r2, [r3, #12]
 80099d2:	e00f      	b.n	80099f4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80099d4:	4b47      	ldr	r3, [pc, #284]	; (8009af4 <tcp_slowtmr+0x590>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099da:	429a      	cmp	r2, r3
 80099dc:	d006      	beq.n	80099ec <tcp_slowtmr+0x488>
 80099de:	4b46      	ldr	r3, [pc, #280]	; (8009af8 <tcp_slowtmr+0x594>)
 80099e0:	f240 5271 	movw	r2, #1393	; 0x571
 80099e4:	4947      	ldr	r1, [pc, #284]	; (8009b04 <tcp_slowtmr+0x5a0>)
 80099e6:	4846      	ldr	r0, [pc, #280]	; (8009b00 <tcp_slowtmr+0x59c>)
 80099e8:	f007 fcc6 	bl	8011378 <iprintf>
        tcp_active_pcbs = pcb->next;
 80099ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	4a40      	ldr	r2, [pc, #256]	; (8009af4 <tcp_slowtmr+0x590>)
 80099f2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80099f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d013      	beq.n	8009a24 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80099fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fe:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a02:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009a04:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8009a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a08:	3304      	adds	r3, #4
 8009a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a0c:	8ad2      	ldrh	r2, [r2, #22]
 8009a0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a10:	8b09      	ldrh	r1, [r1, #24]
 8009a12:	9102      	str	r1, [sp, #8]
 8009a14:	9201      	str	r2, [sp, #4]
 8009a16:	9300      	str	r3, [sp, #0]
 8009a18:	462b      	mov	r3, r5
 8009a1a:	4622      	mov	r2, r4
 8009a1c:	4601      	mov	r1, r0
 8009a1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a20:	f004 f98a 	bl	800dd38 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8009a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8009a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2c:	7d1b      	ldrb	r3, [r3, #20]
 8009a2e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a32:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009a3a:	6838      	ldr	r0, [r7, #0]
 8009a3c:	f7ff f9f4 	bl	8008e28 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8009a40:	4b31      	ldr	r3, [pc, #196]	; (8009b08 <tcp_slowtmr+0x5a4>)
 8009a42:	2200      	movs	r2, #0
 8009a44:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d004      	beq.n	8009a56 <tcp_slowtmr+0x4f2>
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f06f 010c 	mvn.w	r1, #12
 8009a52:	68b8      	ldr	r0, [r7, #8]
 8009a54:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009a56:	4b2c      	ldr	r3, [pc, #176]	; (8009b08 <tcp_slowtmr+0x5a4>)
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d037      	beq.n	8009ace <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8009a5e:	e592      	b.n	8009586 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8009a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a62:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8009a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6c:	7f1b      	ldrb	r3, [r3, #28]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	b2da      	uxtb	r2, r3
 8009a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a74:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a78:	7f1a      	ldrb	r2, [r3, #28]
 8009a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7c:	7f5b      	ldrb	r3, [r3, #29]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d325      	bcc.n	8009ace <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8009a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a84:	2200      	movs	r2, #0
 8009a86:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8009a88:	4b1f      	ldr	r3, [pc, #124]	; (8009b08 <tcp_slowtmr+0x5a4>)
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d00b      	beq.n	8009ab0 <tcp_slowtmr+0x54c>
 8009a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009aa0:	6912      	ldr	r2, [r2, #16]
 8009aa2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	4798      	blx	r3
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009aae:	e002      	b.n	8009ab6 <tcp_slowtmr+0x552>
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8009ab6:	4b14      	ldr	r3, [pc, #80]	; (8009b08 <tcp_slowtmr+0x5a4>)
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d000      	beq.n	8009ac0 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8009abe:	e562      	b.n	8009586 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009ac0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d102      	bne.n	8009ace <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8009ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aca:	f003 fb81 	bl	800d1d0 <tcp_output>
  while (pcb != NULL) {
 8009ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f47f ad5e 	bne.w	8009592 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8009ada:	4b0c      	ldr	r3, [pc, #48]	; (8009b0c <tcp_slowtmr+0x5a8>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009ae0:	e069      	b.n	8009bb6 <tcp_slowtmr+0x652>
 8009ae2:	bf00      	nop
 8009ae4:	2000bc2c 	.word	0x2000bc2c
 8009ae8:	000a4cb8 	.word	0x000a4cb8
 8009aec:	10624dd3 	.word	0x10624dd3
 8009af0:	000124f8 	.word	0x000124f8
 8009af4:	2000bc38 	.word	0x2000bc38
 8009af8:	08013338 	.word	0x08013338
 8009afc:	08013770 	.word	0x08013770
 8009b00:	0801337c 	.word	0x0801337c
 8009b04:	0801379c 	.word	0x0801379c
 8009b08:	2000bc40 	.word	0x2000bc40
 8009b0c:	2000bc3c 	.word	0x2000bc3c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b12:	7d1b      	ldrb	r3, [r3, #20]
 8009b14:	2b0a      	cmp	r3, #10
 8009b16:	d006      	beq.n	8009b26 <tcp_slowtmr+0x5c2>
 8009b18:	4b2b      	ldr	r3, [pc, #172]	; (8009bc8 <tcp_slowtmr+0x664>)
 8009b1a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009b1e:	492b      	ldr	r1, [pc, #172]	; (8009bcc <tcp_slowtmr+0x668>)
 8009b20:	482b      	ldr	r0, [pc, #172]	; (8009bd0 <tcp_slowtmr+0x66c>)
 8009b22:	f007 fc29 	bl	8011378 <iprintf>
    pcb_remove = 0;
 8009b26:	2300      	movs	r3, #0
 8009b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009b2c:	4b29      	ldr	r3, [pc, #164]	; (8009bd4 <tcp_slowtmr+0x670>)
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b32:	6a1b      	ldr	r3, [r3, #32]
 8009b34:	1ad3      	subs	r3, r2, r3
 8009b36:	2bf0      	cmp	r3, #240	; 0xf0
 8009b38:	d904      	bls.n	8009b44 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8009b3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b3e:	3301      	adds	r3, #1
 8009b40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009b44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d02f      	beq.n	8009bac <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009b4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b4e:	f000 fb2b 	bl	800a1a8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d010      	beq.n	8009b7a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009b58:	4b1f      	ldr	r3, [pc, #124]	; (8009bd8 <tcp_slowtmr+0x674>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d106      	bne.n	8009b70 <tcp_slowtmr+0x60c>
 8009b62:	4b19      	ldr	r3, [pc, #100]	; (8009bc8 <tcp_slowtmr+0x664>)
 8009b64:	f240 52af 	movw	r2, #1455	; 0x5af
 8009b68:	491c      	ldr	r1, [pc, #112]	; (8009bdc <tcp_slowtmr+0x678>)
 8009b6a:	4819      	ldr	r0, [pc, #100]	; (8009bd0 <tcp_slowtmr+0x66c>)
 8009b6c:	f007 fc04 	bl	8011378 <iprintf>
        prev->next = pcb->next;
 8009b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b72:	68da      	ldr	r2, [r3, #12]
 8009b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b76:	60da      	str	r2, [r3, #12]
 8009b78:	e00f      	b.n	8009b9a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009b7a:	4b17      	ldr	r3, [pc, #92]	; (8009bd8 <tcp_slowtmr+0x674>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d006      	beq.n	8009b92 <tcp_slowtmr+0x62e>
 8009b84:	4b10      	ldr	r3, [pc, #64]	; (8009bc8 <tcp_slowtmr+0x664>)
 8009b86:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009b8a:	4915      	ldr	r1, [pc, #84]	; (8009be0 <tcp_slowtmr+0x67c>)
 8009b8c:	4810      	ldr	r0, [pc, #64]	; (8009bd0 <tcp_slowtmr+0x66c>)
 8009b8e:	f007 fbf3 	bl	8011378 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	4a10      	ldr	r2, [pc, #64]	; (8009bd8 <tcp_slowtmr+0x674>)
 8009b98:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b9c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8009b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009ba4:	69f8      	ldr	r0, [r7, #28]
 8009ba6:	f7ff f93f 	bl	8008e28 <tcp_free>
 8009baa:	e004      	b.n	8009bb6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8009bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1a9      	bne.n	8009b10 <tcp_slowtmr+0x5ac>
    }
  }
}
 8009bbc:	bf00      	nop
 8009bbe:	bf00      	nop
 8009bc0:	3730      	adds	r7, #48	; 0x30
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bdb0      	pop	{r4, r5, r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	08013338 	.word	0x08013338
 8009bcc:	080137c8 	.word	0x080137c8
 8009bd0:	0801337c 	.word	0x0801337c
 8009bd4:	2000bc2c 	.word	0x2000bc2c
 8009bd8:	2000bc3c 	.word	0x2000bc3c
 8009bdc:	080137f8 	.word	0x080137f8
 8009be0:	08013820 	.word	0x08013820

08009be4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009bea:	4b2d      	ldr	r3, [pc, #180]	; (8009ca0 <tcp_fasttmr+0xbc>)
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	b2da      	uxtb	r2, r3
 8009bf2:	4b2b      	ldr	r3, [pc, #172]	; (8009ca0 <tcp_fasttmr+0xbc>)
 8009bf4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009bf6:	4b2b      	ldr	r3, [pc, #172]	; (8009ca4 <tcp_fasttmr+0xc0>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009bfc:	e048      	b.n	8009c90 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	7f9a      	ldrb	r2, [r3, #30]
 8009c02:	4b27      	ldr	r3, [pc, #156]	; (8009ca0 <tcp_fasttmr+0xbc>)
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d03f      	beq.n	8009c8a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009c0a:	4b25      	ldr	r3, [pc, #148]	; (8009ca0 <tcp_fasttmr+0xbc>)
 8009c0c:	781a      	ldrb	r2, [r3, #0]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	8b5b      	ldrh	r3, [r3, #26]
 8009c16:	f003 0301 	and.w	r3, r3, #1
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d010      	beq.n	8009c40 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	8b5b      	ldrh	r3, [r3, #26]
 8009c22:	f043 0302 	orr.w	r3, r3, #2
 8009c26:	b29a      	uxth	r2, r3
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f003 facf 	bl	800d1d0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	8b5b      	ldrh	r3, [r3, #26]
 8009c36:	f023 0303 	bic.w	r3, r3, #3
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	8b5b      	ldrh	r3, [r3, #26]
 8009c44:	f003 0308 	and.w	r3, r3, #8
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d009      	beq.n	8009c60 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	8b5b      	ldrh	r3, [r3, #26]
 8009c50:	f023 0308 	bic.w	r3, r3, #8
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f7ff fa78 	bl	8009150 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00a      	beq.n	8009c84 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009c6e:	4b0e      	ldr	r3, [pc, #56]	; (8009ca8 <tcp_fasttmr+0xc4>)
 8009c70:	2200      	movs	r2, #0
 8009c72:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 f819 	bl	8009cac <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009c7a:	4b0b      	ldr	r3, [pc, #44]	; (8009ca8 <tcp_fasttmr+0xc4>)
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d000      	beq.n	8009c84 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009c82:	e7b8      	b.n	8009bf6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	607b      	str	r3, [r7, #4]
 8009c88:	e002      	b.n	8009c90 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d1b3      	bne.n	8009bfe <tcp_fasttmr+0x1a>
    }
  }
}
 8009c96:	bf00      	nop
 8009c98:	bf00      	nop
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	2000bc42 	.word	0x2000bc42
 8009ca4:	2000bc38 	.word	0x2000bc38
 8009ca8:	2000bc40 	.word	0x2000bc40

08009cac <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009cac:	b590      	push	{r4, r7, lr}
 8009cae:	b085      	sub	sp, #20
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d109      	bne.n	8009cce <tcp_process_refused_data+0x22>
 8009cba:	4b37      	ldr	r3, [pc, #220]	; (8009d98 <tcp_process_refused_data+0xec>)
 8009cbc:	f240 6209 	movw	r2, #1545	; 0x609
 8009cc0:	4936      	ldr	r1, [pc, #216]	; (8009d9c <tcp_process_refused_data+0xf0>)
 8009cc2:	4837      	ldr	r0, [pc, #220]	; (8009da0 <tcp_process_refused_data+0xf4>)
 8009cc4:	f007 fb58 	bl	8011378 <iprintf>
 8009cc8:	f06f 030f 	mvn.w	r3, #15
 8009ccc:	e060      	b.n	8009d90 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009cd2:	7b5b      	ldrb	r3, [r3, #13]
 8009cd4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009cda:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d00b      	beq.n	8009d04 <tcp_process_refused_data+0x58>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6918      	ldr	r0, [r3, #16]
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	68ba      	ldr	r2, [r7, #8]
 8009cfa:	6879      	ldr	r1, [r7, #4]
 8009cfc:	47a0      	blx	r4
 8009cfe:	4603      	mov	r3, r0
 8009d00:	73fb      	strb	r3, [r7, #15]
 8009d02:	e007      	b.n	8009d14 <tcp_process_refused_data+0x68>
 8009d04:	2300      	movs	r3, #0
 8009d06:	68ba      	ldr	r2, [r7, #8]
 8009d08:	6879      	ldr	r1, [r7, #4]
 8009d0a:	2000      	movs	r0, #0
 8009d0c:	f000 f8a4 	bl	8009e58 <tcp_recv_null>
 8009d10:	4603      	mov	r3, r0
 8009d12:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d12a      	bne.n	8009d72 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009d1c:	7bbb      	ldrb	r3, [r7, #14]
 8009d1e:	f003 0320 	and.w	r3, r3, #32
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d033      	beq.n	8009d8e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d2a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009d2e:	d005      	beq.n	8009d3c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d34:	3301      	adds	r3, #1
 8009d36:	b29a      	uxth	r2, r3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00b      	beq.n	8009d5e <tcp_process_refused_data+0xb2>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6918      	ldr	r0, [r3, #16]
 8009d50:	2300      	movs	r3, #0
 8009d52:	2200      	movs	r2, #0
 8009d54:	6879      	ldr	r1, [r7, #4]
 8009d56:	47a0      	blx	r4
 8009d58:	4603      	mov	r3, r0
 8009d5a:	73fb      	strb	r3, [r7, #15]
 8009d5c:	e001      	b.n	8009d62 <tcp_process_refused_data+0xb6>
 8009d5e:	2300      	movs	r3, #0
 8009d60:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d66:	f113 0f0d 	cmn.w	r3, #13
 8009d6a:	d110      	bne.n	8009d8e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009d6c:	f06f 030c 	mvn.w	r3, #12
 8009d70:	e00e      	b.n	8009d90 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d76:	f113 0f0d 	cmn.w	r3, #13
 8009d7a:	d102      	bne.n	8009d82 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009d7c:	f06f 030c 	mvn.w	r3, #12
 8009d80:	e006      	b.n	8009d90 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	68ba      	ldr	r2, [r7, #8]
 8009d86:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8009d88:	f06f 0304 	mvn.w	r3, #4
 8009d8c:	e000      	b.n	8009d90 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009d8e:	2300      	movs	r3, #0
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3714      	adds	r7, #20
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd90      	pop	{r4, r7, pc}
 8009d98:	08013338 	.word	0x08013338
 8009d9c:	08013848 	.word	0x08013848
 8009da0:	0801337c 	.word	0x0801337c

08009da4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009dac:	e007      	b.n	8009dbe <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 f80a 	bl	8009dce <tcp_seg_free>
    seg = next;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d1f4      	bne.n	8009dae <tcp_segs_free+0xa>
  }
}
 8009dc4:	bf00      	nop
 8009dc6:	bf00      	nop
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b082      	sub	sp, #8
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d00c      	beq.n	8009df6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d004      	beq.n	8009dee <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7fe fcdb 	bl	80087a4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009dee:	6879      	ldr	r1, [r7, #4]
 8009df0:	2003      	movs	r0, #3
 8009df2:	f7fd fe61 	bl	8007ab8 <memp_free>
  }
}
 8009df6:	bf00      	nop
 8009df8:	3708      	adds	r7, #8
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
	...

08009e00 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d106      	bne.n	8009e1c <tcp_seg_copy+0x1c>
 8009e0e:	4b0f      	ldr	r3, [pc, #60]	; (8009e4c <tcp_seg_copy+0x4c>)
 8009e10:	f240 6282 	movw	r2, #1666	; 0x682
 8009e14:	490e      	ldr	r1, [pc, #56]	; (8009e50 <tcp_seg_copy+0x50>)
 8009e16:	480f      	ldr	r0, [pc, #60]	; (8009e54 <tcp_seg_copy+0x54>)
 8009e18:	f007 faae 	bl	8011378 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009e1c:	2003      	movs	r0, #3
 8009e1e:	f7fd fddb 	bl	80079d8 <memp_malloc>
 8009e22:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d101      	bne.n	8009e2e <tcp_seg_copy+0x2e>
    return NULL;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	e00a      	b.n	8009e44 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009e2e:	2210      	movs	r2, #16
 8009e30:	6879      	ldr	r1, [r7, #4]
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	f007 fa70 	bl	8011318 <memcpy>
  pbuf_ref(cseg->p);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7fe fd51 	bl	80088e4 <pbuf_ref>
  return cseg;
 8009e42:	68fb      	ldr	r3, [r7, #12]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3710      	adds	r7, #16
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	08013338 	.word	0x08013338
 8009e50:	0801388c 	.word	0x0801388c
 8009e54:	0801337c 	.word	0x0801337c

08009e58 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	607a      	str	r2, [r7, #4]
 8009e64:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d109      	bne.n	8009e80 <tcp_recv_null+0x28>
 8009e6c:	4b12      	ldr	r3, [pc, #72]	; (8009eb8 <tcp_recv_null+0x60>)
 8009e6e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009e72:	4912      	ldr	r1, [pc, #72]	; (8009ebc <tcp_recv_null+0x64>)
 8009e74:	4812      	ldr	r0, [pc, #72]	; (8009ec0 <tcp_recv_null+0x68>)
 8009e76:	f007 fa7f 	bl	8011378 <iprintf>
 8009e7a:	f06f 030f 	mvn.w	r3, #15
 8009e7e:	e016      	b.n	8009eae <tcp_recv_null+0x56>

  if (p != NULL) {
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d009      	beq.n	8009e9a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	891b      	ldrh	r3, [r3, #8]
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	68b8      	ldr	r0, [r7, #8]
 8009e8e:	f7ff fb19 	bl	80094c4 <tcp_recved>
    pbuf_free(p);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f7fe fc86 	bl	80087a4 <pbuf_free>
 8009e98:	e008      	b.n	8009eac <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009e9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d104      	bne.n	8009eac <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009ea2:	68b8      	ldr	r0, [r7, #8]
 8009ea4:	f7ff f9be 	bl	8009224 <tcp_close>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	e000      	b.n	8009eae <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	08013338 	.word	0x08013338
 8009ebc:	080138a8 	.word	0x080138a8
 8009ec0:	0801337c 	.word	0x0801337c

08009ec4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b086      	sub	sp, #24
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	4603      	mov	r3, r0
 8009ecc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	db01      	blt.n	8009eda <tcp_kill_prio+0x16>
 8009ed6:	79fb      	ldrb	r3, [r7, #7]
 8009ed8:	e000      	b.n	8009edc <tcp_kill_prio+0x18>
 8009eda:	237f      	movs	r3, #127	; 0x7f
 8009edc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009ede:	7afb      	ldrb	r3, [r7, #11]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d034      	beq.n	8009f4e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009ee4:	7afb      	ldrb	r3, [r7, #11]
 8009ee6:	3b01      	subs	r3, #1
 8009ee8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009eea:	2300      	movs	r3, #0
 8009eec:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ef2:	4b19      	ldr	r3, [pc, #100]	; (8009f58 <tcp_kill_prio+0x94>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	617b      	str	r3, [r7, #20]
 8009ef8:	e01f      	b.n	8009f3a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	7d5b      	ldrb	r3, [r3, #21]
 8009efe:	7afa      	ldrb	r2, [r7, #11]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d80c      	bhi.n	8009f1e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009f08:	7afa      	ldrb	r2, [r7, #11]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d112      	bne.n	8009f34 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009f0e:	4b13      	ldr	r3, [pc, #76]	; (8009f5c <tcp_kill_prio+0x98>)
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	6a1b      	ldr	r3, [r3, #32]
 8009f16:	1ad3      	subs	r3, r2, r3
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d80a      	bhi.n	8009f34 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009f1e:	4b0f      	ldr	r3, [pc, #60]	; (8009f5c <tcp_kill_prio+0x98>)
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	6a1b      	ldr	r3, [r3, #32]
 8009f26:	1ad3      	subs	r3, r2, r3
 8009f28:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	7d5b      	ldrb	r3, [r3, #21]
 8009f32:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	617b      	str	r3, [r7, #20]
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1dc      	bne.n	8009efa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d004      	beq.n	8009f50 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009f46:	6938      	ldr	r0, [r7, #16]
 8009f48:	f7ff fa56 	bl	80093f8 <tcp_abort>
 8009f4c:	e000      	b.n	8009f50 <tcp_kill_prio+0x8c>
    return;
 8009f4e:	bf00      	nop
  }
}
 8009f50:	3718      	adds	r7, #24
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	2000bc38 	.word	0x2000bc38
 8009f5c:	2000bc2c 	.word	0x2000bc2c

08009f60 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b086      	sub	sp, #24
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	4603      	mov	r3, r0
 8009f68:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009f6a:	79fb      	ldrb	r3, [r7, #7]
 8009f6c:	2b08      	cmp	r3, #8
 8009f6e:	d009      	beq.n	8009f84 <tcp_kill_state+0x24>
 8009f70:	79fb      	ldrb	r3, [r7, #7]
 8009f72:	2b09      	cmp	r3, #9
 8009f74:	d006      	beq.n	8009f84 <tcp_kill_state+0x24>
 8009f76:	4b1a      	ldr	r3, [pc, #104]	; (8009fe0 <tcp_kill_state+0x80>)
 8009f78:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009f7c:	4919      	ldr	r1, [pc, #100]	; (8009fe4 <tcp_kill_state+0x84>)
 8009f7e:	481a      	ldr	r0, [pc, #104]	; (8009fe8 <tcp_kill_state+0x88>)
 8009f80:	f007 f9fa 	bl	8011378 <iprintf>

  inactivity = 0;
 8009f84:	2300      	movs	r3, #0
 8009f86:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f8c:	4b17      	ldr	r3, [pc, #92]	; (8009fec <tcp_kill_state+0x8c>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	617b      	str	r3, [r7, #20]
 8009f92:	e017      	b.n	8009fc4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	7d1b      	ldrb	r3, [r3, #20]
 8009f98:	79fa      	ldrb	r2, [r7, #7]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d10f      	bne.n	8009fbe <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009f9e:	4b14      	ldr	r3, [pc, #80]	; (8009ff0 <tcp_kill_state+0x90>)
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	1ad3      	subs	r3, r2, r3
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d807      	bhi.n	8009fbe <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009fae:	4b10      	ldr	r3, [pc, #64]	; (8009ff0 <tcp_kill_state+0x90>)
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	6a1b      	ldr	r3, [r3, #32]
 8009fb6:	1ad3      	subs	r3, r2, r3
 8009fb8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	617b      	str	r3, [r7, #20]
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d1e4      	bne.n	8009f94 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d003      	beq.n	8009fd8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	6938      	ldr	r0, [r7, #16]
 8009fd4:	f7ff f952 	bl	800927c <tcp_abandon>
  }
}
 8009fd8:	bf00      	nop
 8009fda:	3718      	adds	r7, #24
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	08013338 	.word	0x08013338
 8009fe4:	080138c4 	.word	0x080138c4
 8009fe8:	0801337c 	.word	0x0801337c
 8009fec:	2000bc38 	.word	0x2000bc38
 8009ff0:	2000bc2c 	.word	0x2000bc2c

08009ff4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009ffe:	2300      	movs	r3, #0
 800a000:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a002:	4b12      	ldr	r3, [pc, #72]	; (800a04c <tcp_kill_timewait+0x58>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	60fb      	str	r3, [r7, #12]
 800a008:	e012      	b.n	800a030 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a00a:	4b11      	ldr	r3, [pc, #68]	; (800a050 <tcp_kill_timewait+0x5c>)
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	6a1b      	ldr	r3, [r3, #32]
 800a012:	1ad3      	subs	r3, r2, r3
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	429a      	cmp	r2, r3
 800a018:	d807      	bhi.n	800a02a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a01a:	4b0d      	ldr	r3, [pc, #52]	; (800a050 <tcp_kill_timewait+0x5c>)
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	6a1b      	ldr	r3, [r3, #32]
 800a022:	1ad3      	subs	r3, r2, r3
 800a024:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	60fb      	str	r3, [r7, #12]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1e9      	bne.n	800a00a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d002      	beq.n	800a042 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a03c:	68b8      	ldr	r0, [r7, #8]
 800a03e:	f7ff f9db 	bl	80093f8 <tcp_abort>
  }
}
 800a042:	bf00      	nop
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	2000bc3c 	.word	0x2000bc3c
 800a050:	2000bc2c 	.word	0x2000bc2c

0800a054 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a05a:	4b10      	ldr	r3, [pc, #64]	; (800a09c <tcp_handle_closepend+0x48>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a060:	e014      	b.n	800a08c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	8b5b      	ldrh	r3, [r3, #26]
 800a06c:	f003 0308 	and.w	r3, r3, #8
 800a070:	2b00      	cmp	r3, #0
 800a072:	d009      	beq.n	800a088 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	8b5b      	ldrh	r3, [r3, #26]
 800a078:	f023 0308 	bic.w	r3, r3, #8
 800a07c:	b29a      	uxth	r2, r3
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f7ff f864 	bl	8009150 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d1e7      	bne.n	800a062 <tcp_handle_closepend+0xe>
  }
}
 800a092:	bf00      	nop
 800a094:	bf00      	nop
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	2000bc38 	.word	0x2000bc38

0800a0a0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a0aa:	2001      	movs	r0, #1
 800a0ac:	f7fd fc94 	bl	80079d8 <memp_malloc>
 800a0b0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d126      	bne.n	800a106 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800a0b8:	f7ff ffcc 	bl	800a054 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a0bc:	f7ff ff9a 	bl	8009ff4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a0c0:	2001      	movs	r0, #1
 800a0c2:	f7fd fc89 	bl	80079d8 <memp_malloc>
 800a0c6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d11b      	bne.n	800a106 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a0ce:	2009      	movs	r0, #9
 800a0d0:	f7ff ff46 	bl	8009f60 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a0d4:	2001      	movs	r0, #1
 800a0d6:	f7fd fc7f 	bl	80079d8 <memp_malloc>
 800a0da:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d111      	bne.n	800a106 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a0e2:	2008      	movs	r0, #8
 800a0e4:	f7ff ff3c 	bl	8009f60 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a0e8:	2001      	movs	r0, #1
 800a0ea:	f7fd fc75 	bl	80079d8 <memp_malloc>
 800a0ee:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d107      	bne.n	800a106 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a0f6:	79fb      	ldrb	r3, [r7, #7]
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7ff fee3 	bl	8009ec4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a0fe:	2001      	movs	r0, #1
 800a100:	f7fd fc6a 	bl	80079d8 <memp_malloc>
 800a104:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d03f      	beq.n	800a18c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a10c:	229c      	movs	r2, #156	; 0x9c
 800a10e:	2100      	movs	r1, #0
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f007 f929 	bl	8011368 <memset>
    pcb->prio = prio;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	79fa      	ldrb	r2, [r7, #7]
 800a11a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a122:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a12c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	22ff      	movs	r2, #255	; 0xff
 800a13a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a142:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2206      	movs	r2, #6
 800a148:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2206      	movs	r2, #6
 800a150:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a158:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2201      	movs	r2, #1
 800a15e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800a162:	4b0d      	ldr	r3, [pc, #52]	; (800a198 <tcp_alloc+0xf8>)
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a16a:	4b0c      	ldr	r3, [pc, #48]	; (800a19c <tcp_alloc+0xfc>)
 800a16c:	781a      	ldrb	r2, [r3, #0]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a178:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	4a08      	ldr	r2, [pc, #32]	; (800a1a0 <tcp_alloc+0x100>)
 800a180:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	4a07      	ldr	r2, [pc, #28]	; (800a1a4 <tcp_alloc+0x104>)
 800a188:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a18c:	68fb      	ldr	r3, [r7, #12]
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	2000bc2c 	.word	0x2000bc2c
 800a19c:	2000bc42 	.word	0x2000bc42
 800a1a0:	08009e59 	.word	0x08009e59
 800a1a4:	006ddd00 	.word	0x006ddd00

0800a1a8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d107      	bne.n	800a1c6 <tcp_pcb_purge+0x1e>
 800a1b6:	4b21      	ldr	r3, [pc, #132]	; (800a23c <tcp_pcb_purge+0x94>)
 800a1b8:	f640 0251 	movw	r2, #2129	; 0x851
 800a1bc:	4920      	ldr	r1, [pc, #128]	; (800a240 <tcp_pcb_purge+0x98>)
 800a1be:	4821      	ldr	r0, [pc, #132]	; (800a244 <tcp_pcb_purge+0x9c>)
 800a1c0:	f007 f8da 	bl	8011378 <iprintf>
 800a1c4:	e037      	b.n	800a236 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	7d1b      	ldrb	r3, [r3, #20]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d033      	beq.n	800a236 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a1d2:	2b0a      	cmp	r3, #10
 800a1d4:	d02f      	beq.n	800a236 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d02b      	beq.n	800a236 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d007      	beq.n	800a1f6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7fe fada 	bl	80087a4 <pbuf_free>
      pcb->refused_data = NULL;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d002      	beq.n	800a204 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 f986 	bl	800a510 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a20a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a210:	4618      	mov	r0, r3
 800a212:	f7ff fdc7 	bl	8009da4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7ff fdc2 	bl	8009da4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	66da      	str	r2, [r3, #108]	; 0x6c
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a236:	3708      	adds	r7, #8
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	08013338 	.word	0x08013338
 800a240:	08013984 	.word	0x08013984
 800a244:	0801337c 	.word	0x0801337c

0800a248 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d106      	bne.n	800a266 <tcp_pcb_remove+0x1e>
 800a258:	4b3e      	ldr	r3, [pc, #248]	; (800a354 <tcp_pcb_remove+0x10c>)
 800a25a:	f640 0283 	movw	r2, #2179	; 0x883
 800a25e:	493e      	ldr	r1, [pc, #248]	; (800a358 <tcp_pcb_remove+0x110>)
 800a260:	483e      	ldr	r0, [pc, #248]	; (800a35c <tcp_pcb_remove+0x114>)
 800a262:	f007 f889 	bl	8011378 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d106      	bne.n	800a27a <tcp_pcb_remove+0x32>
 800a26c:	4b39      	ldr	r3, [pc, #228]	; (800a354 <tcp_pcb_remove+0x10c>)
 800a26e:	f640 0284 	movw	r2, #2180	; 0x884
 800a272:	493b      	ldr	r1, [pc, #236]	; (800a360 <tcp_pcb_remove+0x118>)
 800a274:	4839      	ldr	r0, [pc, #228]	; (800a35c <tcp_pcb_remove+0x114>)
 800a276:	f007 f87f 	bl	8011378 <iprintf>

  TCP_RMV(pcblist, pcb);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	429a      	cmp	r2, r3
 800a282:	d105      	bne.n	800a290 <tcp_pcb_remove+0x48>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68da      	ldr	r2, [r3, #12]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	601a      	str	r2, [r3, #0]
 800a28e:	e013      	b.n	800a2b8 <tcp_pcb_remove+0x70>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	60fb      	str	r3, [r7, #12]
 800a296:	e00c      	b.n	800a2b2 <tcp_pcb_remove+0x6a>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	68db      	ldr	r3, [r3, #12]
 800a29c:	683a      	ldr	r2, [r7, #0]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d104      	bne.n	800a2ac <tcp_pcb_remove+0x64>
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	68da      	ldr	r2, [r3, #12]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	60da      	str	r2, [r3, #12]
 800a2aa:	e005      	b.n	800a2b8 <tcp_pcb_remove+0x70>
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	60fb      	str	r3, [r7, #12]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1ef      	bne.n	800a298 <tcp_pcb_remove+0x50>
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a2be:	6838      	ldr	r0, [r7, #0]
 800a2c0:	f7ff ff72 	bl	800a1a8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	7d1b      	ldrb	r3, [r3, #20]
 800a2c8:	2b0a      	cmp	r3, #10
 800a2ca:	d013      	beq.n	800a2f4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d00f      	beq.n	800a2f4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	8b5b      	ldrh	r3, [r3, #26]
 800a2d8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d009      	beq.n	800a2f4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	8b5b      	ldrh	r3, [r3, #26]
 800a2e4:	f043 0302 	orr.w	r3, r3, #2
 800a2e8:	b29a      	uxth	r2, r3
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a2ee:	6838      	ldr	r0, [r7, #0]
 800a2f0:	f002 ff6e 	bl	800d1d0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	7d1b      	ldrb	r3, [r3, #20]
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d020      	beq.n	800a33e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a300:	2b00      	cmp	r3, #0
 800a302:	d006      	beq.n	800a312 <tcp_pcb_remove+0xca>
 800a304:	4b13      	ldr	r3, [pc, #76]	; (800a354 <tcp_pcb_remove+0x10c>)
 800a306:	f640 0293 	movw	r2, #2195	; 0x893
 800a30a:	4916      	ldr	r1, [pc, #88]	; (800a364 <tcp_pcb_remove+0x11c>)
 800a30c:	4813      	ldr	r0, [pc, #76]	; (800a35c <tcp_pcb_remove+0x114>)
 800a30e:	f007 f833 	bl	8011378 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a316:	2b00      	cmp	r3, #0
 800a318:	d006      	beq.n	800a328 <tcp_pcb_remove+0xe0>
 800a31a:	4b0e      	ldr	r3, [pc, #56]	; (800a354 <tcp_pcb_remove+0x10c>)
 800a31c:	f640 0294 	movw	r2, #2196	; 0x894
 800a320:	4911      	ldr	r1, [pc, #68]	; (800a368 <tcp_pcb_remove+0x120>)
 800a322:	480e      	ldr	r0, [pc, #56]	; (800a35c <tcp_pcb_remove+0x114>)
 800a324:	f007 f828 	bl	8011378 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d006      	beq.n	800a33e <tcp_pcb_remove+0xf6>
 800a330:	4b08      	ldr	r3, [pc, #32]	; (800a354 <tcp_pcb_remove+0x10c>)
 800a332:	f640 0296 	movw	r2, #2198	; 0x896
 800a336:	490d      	ldr	r1, [pc, #52]	; (800a36c <tcp_pcb_remove+0x124>)
 800a338:	4808      	ldr	r0, [pc, #32]	; (800a35c <tcp_pcb_remove+0x114>)
 800a33a:	f007 f81d 	bl	8011378 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	2200      	movs	r2, #0
 800a342:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	2200      	movs	r2, #0
 800a348:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a34a:	bf00      	nop
 800a34c:	3710      	adds	r7, #16
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	08013338 	.word	0x08013338
 800a358:	080139a0 	.word	0x080139a0
 800a35c:	0801337c 	.word	0x0801337c
 800a360:	080139bc 	.word	0x080139bc
 800a364:	080139dc 	.word	0x080139dc
 800a368:	080139f4 	.word	0x080139f4
 800a36c:	08013a10 	.word	0x08013a10

0800a370 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d106      	bne.n	800a38c <tcp_next_iss+0x1c>
 800a37e:	4b0a      	ldr	r3, [pc, #40]	; (800a3a8 <tcp_next_iss+0x38>)
 800a380:	f640 02af 	movw	r2, #2223	; 0x8af
 800a384:	4909      	ldr	r1, [pc, #36]	; (800a3ac <tcp_next_iss+0x3c>)
 800a386:	480a      	ldr	r0, [pc, #40]	; (800a3b0 <tcp_next_iss+0x40>)
 800a388:	f006 fff6 	bl	8011378 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a38c:	4b09      	ldr	r3, [pc, #36]	; (800a3b4 <tcp_next_iss+0x44>)
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	4b09      	ldr	r3, [pc, #36]	; (800a3b8 <tcp_next_iss+0x48>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4413      	add	r3, r2
 800a396:	4a07      	ldr	r2, [pc, #28]	; (800a3b4 <tcp_next_iss+0x44>)
 800a398:	6013      	str	r3, [r2, #0]
  return iss;
 800a39a:	4b06      	ldr	r3, [pc, #24]	; (800a3b4 <tcp_next_iss+0x44>)
 800a39c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	08013338 	.word	0x08013338
 800a3ac:	08013a28 	.word	0x08013a28
 800a3b0:	0801337c 	.word	0x0801337c
 800a3b4:	20000024 	.word	0x20000024
 800a3b8:	2000bc2c 	.word	0x2000bc2c

0800a3bc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b086      	sub	sp, #24
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	607a      	str	r2, [r7, #4]
 800a3c8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d106      	bne.n	800a3de <tcp_eff_send_mss_netif+0x22>
 800a3d0:	4b14      	ldr	r3, [pc, #80]	; (800a424 <tcp_eff_send_mss_netif+0x68>)
 800a3d2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800a3d6:	4914      	ldr	r1, [pc, #80]	; (800a428 <tcp_eff_send_mss_netif+0x6c>)
 800a3d8:	4814      	ldr	r0, [pc, #80]	; (800a42c <tcp_eff_send_mss_netif+0x70>)
 800a3da:	f006 ffcd 	bl	8011378 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d101      	bne.n	800a3e8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a3e4:	89fb      	ldrh	r3, [r7, #14]
 800a3e6:	e019      	b.n	800a41c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a3ec:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a3ee:	8afb      	ldrh	r3, [r7, #22]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d012      	beq.n	800a41a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a3f4:	2328      	movs	r3, #40	; 0x28
 800a3f6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a3f8:	8afa      	ldrh	r2, [r7, #22]
 800a3fa:	8abb      	ldrh	r3, [r7, #20]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d904      	bls.n	800a40a <tcp_eff_send_mss_netif+0x4e>
 800a400:	8afa      	ldrh	r2, [r7, #22]
 800a402:	8abb      	ldrh	r3, [r7, #20]
 800a404:	1ad3      	subs	r3, r2, r3
 800a406:	b29b      	uxth	r3, r3
 800a408:	e000      	b.n	800a40c <tcp_eff_send_mss_netif+0x50>
 800a40a:	2300      	movs	r3, #0
 800a40c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a40e:	8a7a      	ldrh	r2, [r7, #18]
 800a410:	89fb      	ldrh	r3, [r7, #14]
 800a412:	4293      	cmp	r3, r2
 800a414:	bf28      	it	cs
 800a416:	4613      	movcs	r3, r2
 800a418:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a41a:	89fb      	ldrh	r3, [r7, #14]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3718      	adds	r7, #24
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	08013338 	.word	0x08013338
 800a428:	08013a44 	.word	0x08013a44
 800a42c:	0801337c 	.word	0x0801337c

0800a430 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d119      	bne.n	800a478 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a444:	4b10      	ldr	r3, [pc, #64]	; (800a488 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a446:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800a44a:	4910      	ldr	r1, [pc, #64]	; (800a48c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a44c:	4810      	ldr	r0, [pc, #64]	; (800a490 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a44e:	f006 ff93 	bl	8011378 <iprintf>

  while (pcb != NULL) {
 800a452:	e011      	b.n	800a478 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d108      	bne.n	800a472 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	f7fe ffc6 	bl	80093f8 <tcp_abort>
      pcb = next;
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	60fb      	str	r3, [r7, #12]
 800a470:	e002      	b.n	800a478 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	68db      	ldr	r3, [r3, #12]
 800a476:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d1ea      	bne.n	800a454 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a47e:	bf00      	nop
 800a480:	bf00      	nop
 800a482:	3710      	adds	r7, #16
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}
 800a488:	08013338 	.word	0x08013338
 800a48c:	08013a6c 	.word	0x08013a6c
 800a490:	0801337c 	.word	0x0801337c

0800a494 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d02a      	beq.n	800a4fa <tcp_netif_ip_addr_changed+0x66>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d026      	beq.n	800a4fa <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a4ac:	4b15      	ldr	r3, [pc, #84]	; (800a504 <tcp_netif_ip_addr_changed+0x70>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f7ff ffbc 	bl	800a430 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a4b8:	4b13      	ldr	r3, [pc, #76]	; (800a508 <tcp_netif_ip_addr_changed+0x74>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4619      	mov	r1, r3
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f7ff ffb6 	bl	800a430 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d017      	beq.n	800a4fa <tcp_netif_ip_addr_changed+0x66>
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d013      	beq.n	800a4fa <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a4d2:	4b0e      	ldr	r3, [pc, #56]	; (800a50c <tcp_netif_ip_addr_changed+0x78>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	60fb      	str	r3, [r7, #12]
 800a4d8:	e00c      	b.n	800a4f4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d103      	bne.n	800a4ee <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	60fb      	str	r3, [r7, #12]
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d1ef      	bne.n	800a4da <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a4fa:	bf00      	nop
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	2000bc38 	.word	0x2000bc38
 800a508:	2000bc30 	.word	0x2000bc30
 800a50c:	2000bc34 	.word	0x2000bc34

0800a510 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d007      	beq.n	800a530 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a524:	4618      	mov	r0, r3
 800a526:	f7ff fc3d 	bl	8009da4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a530:	bf00      	nop
 800a532:	3708      	adds	r7, #8
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a538:	b590      	push	{r4, r7, lr}
 800a53a:	b08d      	sub	sp, #52	; 0x34
 800a53c:	af04      	add	r7, sp, #16
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d105      	bne.n	800a554 <tcp_input+0x1c>
 800a548:	4b9b      	ldr	r3, [pc, #620]	; (800a7b8 <tcp_input+0x280>)
 800a54a:	2283      	movs	r2, #131	; 0x83
 800a54c:	499b      	ldr	r1, [pc, #620]	; (800a7bc <tcp_input+0x284>)
 800a54e:	489c      	ldr	r0, [pc, #624]	; (800a7c0 <tcp_input+0x288>)
 800a550:	f006 ff12 	bl	8011378 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	4a9a      	ldr	r2, [pc, #616]	; (800a7c4 <tcp_input+0x28c>)
 800a55a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	895b      	ldrh	r3, [r3, #10]
 800a560:	2b13      	cmp	r3, #19
 800a562:	f240 83d1 	bls.w	800ad08 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a566:	4b98      	ldr	r3, [pc, #608]	; (800a7c8 <tcp_input+0x290>)
 800a568:	695b      	ldr	r3, [r3, #20]
 800a56a:	4a97      	ldr	r2, [pc, #604]	; (800a7c8 <tcp_input+0x290>)
 800a56c:	6812      	ldr	r2, [r2, #0]
 800a56e:	4611      	mov	r1, r2
 800a570:	4618      	mov	r0, r3
 800a572:	f005 ff47 	bl	8010404 <ip4_addr_isbroadcast_u32>
 800a576:	4603      	mov	r3, r0
 800a578:	2b00      	cmp	r3, #0
 800a57a:	f040 83c7 	bne.w	800ad0c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a57e:	4b92      	ldr	r3, [pc, #584]	; (800a7c8 <tcp_input+0x290>)
 800a580:	695b      	ldr	r3, [r3, #20]
 800a582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a586:	2be0      	cmp	r3, #224	; 0xe0
 800a588:	f000 83c0 	beq.w	800ad0c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a58c:	4b8d      	ldr	r3, [pc, #564]	; (800a7c4 <tcp_input+0x28c>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	899b      	ldrh	r3, [r3, #12]
 800a592:	b29b      	uxth	r3, r3
 800a594:	4618      	mov	r0, r3
 800a596:	f7fc fda7 	bl	80070e8 <lwip_htons>
 800a59a:	4603      	mov	r3, r0
 800a59c:	0b1b      	lsrs	r3, r3, #12
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a5a6:	7cbb      	ldrb	r3, [r7, #18]
 800a5a8:	2b13      	cmp	r3, #19
 800a5aa:	f240 83b1 	bls.w	800ad10 <tcp_input+0x7d8>
 800a5ae:	7cbb      	ldrb	r3, [r7, #18]
 800a5b0:	b29a      	uxth	r2, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	891b      	ldrh	r3, [r3, #8]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	f200 83aa 	bhi.w	800ad10 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a5bc:	7cbb      	ldrb	r3, [r7, #18]
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	3b14      	subs	r3, #20
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	4b81      	ldr	r3, [pc, #516]	; (800a7cc <tcp_input+0x294>)
 800a5c6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a5c8:	4b81      	ldr	r3, [pc, #516]	; (800a7d0 <tcp_input+0x298>)
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	895a      	ldrh	r2, [r3, #10]
 800a5d2:	7cbb      	ldrb	r3, [r7, #18]
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d309      	bcc.n	800a5ee <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a5da:	4b7c      	ldr	r3, [pc, #496]	; (800a7cc <tcp_input+0x294>)
 800a5dc:	881a      	ldrh	r2, [r3, #0]
 800a5de:	4b7d      	ldr	r3, [pc, #500]	; (800a7d4 <tcp_input+0x29c>)
 800a5e0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a5e2:	7cbb      	ldrb	r3, [r7, #18]
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f7fe f856 	bl	8008698 <pbuf_remove_header>
 800a5ec:	e04e      	b.n	800a68c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d105      	bne.n	800a602 <tcp_input+0xca>
 800a5f6:	4b70      	ldr	r3, [pc, #448]	; (800a7b8 <tcp_input+0x280>)
 800a5f8:	22c2      	movs	r2, #194	; 0xc2
 800a5fa:	4977      	ldr	r1, [pc, #476]	; (800a7d8 <tcp_input+0x2a0>)
 800a5fc:	4870      	ldr	r0, [pc, #448]	; (800a7c0 <tcp_input+0x288>)
 800a5fe:	f006 febb 	bl	8011378 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a602:	2114      	movs	r1, #20
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f7fe f847 	bl	8008698 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	895a      	ldrh	r2, [r3, #10]
 800a60e:	4b71      	ldr	r3, [pc, #452]	; (800a7d4 <tcp_input+0x29c>)
 800a610:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a612:	4b6e      	ldr	r3, [pc, #440]	; (800a7cc <tcp_input+0x294>)
 800a614:	881a      	ldrh	r2, [r3, #0]
 800a616:	4b6f      	ldr	r3, [pc, #444]	; (800a7d4 <tcp_input+0x29c>)
 800a618:	881b      	ldrh	r3, [r3, #0]
 800a61a:	1ad3      	subs	r3, r2, r3
 800a61c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a61e:	4b6d      	ldr	r3, [pc, #436]	; (800a7d4 <tcp_input+0x29c>)
 800a620:	881b      	ldrh	r3, [r3, #0]
 800a622:	4619      	mov	r1, r3
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f7fe f837 	bl	8008698 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	895b      	ldrh	r3, [r3, #10]
 800a630:	8a3a      	ldrh	r2, [r7, #16]
 800a632:	429a      	cmp	r2, r3
 800a634:	f200 836e 	bhi.w	800ad14 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	4a64      	ldr	r2, [pc, #400]	; (800a7d0 <tcp_input+0x298>)
 800a640:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	8a3a      	ldrh	r2, [r7, #16]
 800a648:	4611      	mov	r1, r2
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7fe f824 	bl	8008698 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	891a      	ldrh	r2, [r3, #8]
 800a654:	8a3b      	ldrh	r3, [r7, #16]
 800a656:	1ad3      	subs	r3, r2, r3
 800a658:	b29a      	uxth	r2, r3
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	895b      	ldrh	r3, [r3, #10]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d005      	beq.n	800a672 <tcp_input+0x13a>
 800a666:	4b54      	ldr	r3, [pc, #336]	; (800a7b8 <tcp_input+0x280>)
 800a668:	22df      	movs	r2, #223	; 0xdf
 800a66a:	495c      	ldr	r1, [pc, #368]	; (800a7dc <tcp_input+0x2a4>)
 800a66c:	4854      	ldr	r0, [pc, #336]	; (800a7c0 <tcp_input+0x288>)
 800a66e:	f006 fe83 	bl	8011378 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	891a      	ldrh	r2, [r3, #8]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	891b      	ldrh	r3, [r3, #8]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d005      	beq.n	800a68c <tcp_input+0x154>
 800a680:	4b4d      	ldr	r3, [pc, #308]	; (800a7b8 <tcp_input+0x280>)
 800a682:	22e0      	movs	r2, #224	; 0xe0
 800a684:	4956      	ldr	r1, [pc, #344]	; (800a7e0 <tcp_input+0x2a8>)
 800a686:	484e      	ldr	r0, [pc, #312]	; (800a7c0 <tcp_input+0x288>)
 800a688:	f006 fe76 	bl	8011378 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a68c:	4b4d      	ldr	r3, [pc, #308]	; (800a7c4 <tcp_input+0x28c>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	881b      	ldrh	r3, [r3, #0]
 800a692:	b29b      	uxth	r3, r3
 800a694:	4a4b      	ldr	r2, [pc, #300]	; (800a7c4 <tcp_input+0x28c>)
 800a696:	6814      	ldr	r4, [r2, #0]
 800a698:	4618      	mov	r0, r3
 800a69a:	f7fc fd25 	bl	80070e8 <lwip_htons>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a6a2:	4b48      	ldr	r3, [pc, #288]	; (800a7c4 <tcp_input+0x28c>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	885b      	ldrh	r3, [r3, #2]
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	4a46      	ldr	r2, [pc, #280]	; (800a7c4 <tcp_input+0x28c>)
 800a6ac:	6814      	ldr	r4, [r2, #0]
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7fc fd1a 	bl	80070e8 <lwip_htons>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a6b8:	4b42      	ldr	r3, [pc, #264]	; (800a7c4 <tcp_input+0x28c>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	4a41      	ldr	r2, [pc, #260]	; (800a7c4 <tcp_input+0x28c>)
 800a6c0:	6814      	ldr	r4, [r2, #0]
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7fc fd25 	bl	8007112 <lwip_htonl>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	6063      	str	r3, [r4, #4]
 800a6cc:	6863      	ldr	r3, [r4, #4]
 800a6ce:	4a45      	ldr	r2, [pc, #276]	; (800a7e4 <tcp_input+0x2ac>)
 800a6d0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a6d2:	4b3c      	ldr	r3, [pc, #240]	; (800a7c4 <tcp_input+0x28c>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	4a3a      	ldr	r2, [pc, #232]	; (800a7c4 <tcp_input+0x28c>)
 800a6da:	6814      	ldr	r4, [r2, #0]
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7fc fd18 	bl	8007112 <lwip_htonl>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	60a3      	str	r3, [r4, #8]
 800a6e6:	68a3      	ldr	r3, [r4, #8]
 800a6e8:	4a3f      	ldr	r2, [pc, #252]	; (800a7e8 <tcp_input+0x2b0>)
 800a6ea:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a6ec:	4b35      	ldr	r3, [pc, #212]	; (800a7c4 <tcp_input+0x28c>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	89db      	ldrh	r3, [r3, #14]
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	4a33      	ldr	r2, [pc, #204]	; (800a7c4 <tcp_input+0x28c>)
 800a6f6:	6814      	ldr	r4, [r2, #0]
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7fc fcf5 	bl	80070e8 <lwip_htons>
 800a6fe:	4603      	mov	r3, r0
 800a700:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a702:	4b30      	ldr	r3, [pc, #192]	; (800a7c4 <tcp_input+0x28c>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	899b      	ldrh	r3, [r3, #12]
 800a708:	b29b      	uxth	r3, r3
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7fc fcec 	bl	80070e8 <lwip_htons>
 800a710:	4603      	mov	r3, r0
 800a712:	b2db      	uxtb	r3, r3
 800a714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a718:	b2da      	uxtb	r2, r3
 800a71a:	4b34      	ldr	r3, [pc, #208]	; (800a7ec <tcp_input+0x2b4>)
 800a71c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	891a      	ldrh	r2, [r3, #8]
 800a722:	4b33      	ldr	r3, [pc, #204]	; (800a7f0 <tcp_input+0x2b8>)
 800a724:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a726:	4b31      	ldr	r3, [pc, #196]	; (800a7ec <tcp_input+0x2b4>)
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	f003 0303 	and.w	r3, r3, #3
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d00c      	beq.n	800a74c <tcp_input+0x214>
    tcplen++;
 800a732:	4b2f      	ldr	r3, [pc, #188]	; (800a7f0 <tcp_input+0x2b8>)
 800a734:	881b      	ldrh	r3, [r3, #0]
 800a736:	3301      	adds	r3, #1
 800a738:	b29a      	uxth	r2, r3
 800a73a:	4b2d      	ldr	r3, [pc, #180]	; (800a7f0 <tcp_input+0x2b8>)
 800a73c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	891a      	ldrh	r2, [r3, #8]
 800a742:	4b2b      	ldr	r3, [pc, #172]	; (800a7f0 <tcp_input+0x2b8>)
 800a744:	881b      	ldrh	r3, [r3, #0]
 800a746:	429a      	cmp	r2, r3
 800a748:	f200 82e6 	bhi.w	800ad18 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a74c:	2300      	movs	r3, #0
 800a74e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a750:	4b28      	ldr	r3, [pc, #160]	; (800a7f4 <tcp_input+0x2bc>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	61fb      	str	r3, [r7, #28]
 800a756:	e09d      	b.n	800a894 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	7d1b      	ldrb	r3, [r3, #20]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d105      	bne.n	800a76c <tcp_input+0x234>
 800a760:	4b15      	ldr	r3, [pc, #84]	; (800a7b8 <tcp_input+0x280>)
 800a762:	22fb      	movs	r2, #251	; 0xfb
 800a764:	4924      	ldr	r1, [pc, #144]	; (800a7f8 <tcp_input+0x2c0>)
 800a766:	4816      	ldr	r0, [pc, #88]	; (800a7c0 <tcp_input+0x288>)
 800a768:	f006 fe06 	bl	8011378 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	7d1b      	ldrb	r3, [r3, #20]
 800a770:	2b0a      	cmp	r3, #10
 800a772:	d105      	bne.n	800a780 <tcp_input+0x248>
 800a774:	4b10      	ldr	r3, [pc, #64]	; (800a7b8 <tcp_input+0x280>)
 800a776:	22fc      	movs	r2, #252	; 0xfc
 800a778:	4920      	ldr	r1, [pc, #128]	; (800a7fc <tcp_input+0x2c4>)
 800a77a:	4811      	ldr	r0, [pc, #68]	; (800a7c0 <tcp_input+0x288>)
 800a77c:	f006 fdfc 	bl	8011378 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	7d1b      	ldrb	r3, [r3, #20]
 800a784:	2b01      	cmp	r3, #1
 800a786:	d105      	bne.n	800a794 <tcp_input+0x25c>
 800a788:	4b0b      	ldr	r3, [pc, #44]	; (800a7b8 <tcp_input+0x280>)
 800a78a:	22fd      	movs	r2, #253	; 0xfd
 800a78c:	491c      	ldr	r1, [pc, #112]	; (800a800 <tcp_input+0x2c8>)
 800a78e:	480c      	ldr	r0, [pc, #48]	; (800a7c0 <tcp_input+0x288>)
 800a790:	f006 fdf2 	bl	8011378 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	7a1b      	ldrb	r3, [r3, #8]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d033      	beq.n	800a804 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a79c:	69fb      	ldr	r3, [r7, #28]
 800a79e:	7a1a      	ldrb	r2, [r3, #8]
 800a7a0:	4b09      	ldr	r3, [pc, #36]	; (800a7c8 <tcp_input+0x290>)
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d029      	beq.n	800a804 <tcp_input+0x2cc>
      prev = pcb;
 800a7b0:	69fb      	ldr	r3, [r7, #28]
 800a7b2:	61bb      	str	r3, [r7, #24]
      continue;
 800a7b4:	e06b      	b.n	800a88e <tcp_input+0x356>
 800a7b6:	bf00      	nop
 800a7b8:	08013aa0 	.word	0x08013aa0
 800a7bc:	08013ad4 	.word	0x08013ad4
 800a7c0:	08013aec 	.word	0x08013aec
 800a7c4:	2000bc54 	.word	0x2000bc54
 800a7c8:	200064fc 	.word	0x200064fc
 800a7cc:	2000bc58 	.word	0x2000bc58
 800a7d0:	2000bc5c 	.word	0x2000bc5c
 800a7d4:	2000bc5a 	.word	0x2000bc5a
 800a7d8:	08013b14 	.word	0x08013b14
 800a7dc:	08013b24 	.word	0x08013b24
 800a7e0:	08013b30 	.word	0x08013b30
 800a7e4:	2000bc64 	.word	0x2000bc64
 800a7e8:	2000bc68 	.word	0x2000bc68
 800a7ec:	2000bc70 	.word	0x2000bc70
 800a7f0:	2000bc6e 	.word	0x2000bc6e
 800a7f4:	2000bc38 	.word	0x2000bc38
 800a7f8:	08013b50 	.word	0x08013b50
 800a7fc:	08013b78 	.word	0x08013b78
 800a800:	08013ba4 	.word	0x08013ba4
    }

    if (pcb->remote_port == tcphdr->src &&
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	8b1a      	ldrh	r2, [r3, #24]
 800a808:	4b72      	ldr	r3, [pc, #456]	; (800a9d4 <tcp_input+0x49c>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	881b      	ldrh	r3, [r3, #0]
 800a80e:	b29b      	uxth	r3, r3
 800a810:	429a      	cmp	r2, r3
 800a812:	d13a      	bne.n	800a88a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	8ada      	ldrh	r2, [r3, #22]
 800a818:	4b6e      	ldr	r3, [pc, #440]	; (800a9d4 <tcp_input+0x49c>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	885b      	ldrh	r3, [r3, #2]
 800a81e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a820:	429a      	cmp	r2, r3
 800a822:	d132      	bne.n	800a88a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	685a      	ldr	r2, [r3, #4]
 800a828:	4b6b      	ldr	r3, [pc, #428]	; (800a9d8 <tcp_input+0x4a0>)
 800a82a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d12c      	bne.n	800a88a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	4b68      	ldr	r3, [pc, #416]	; (800a9d8 <tcp_input+0x4a0>)
 800a836:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a838:	429a      	cmp	r2, r3
 800a83a:	d126      	bne.n	800a88a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	69fa      	ldr	r2, [r7, #28]
 800a842:	429a      	cmp	r2, r3
 800a844:	d106      	bne.n	800a854 <tcp_input+0x31c>
 800a846:	4b65      	ldr	r3, [pc, #404]	; (800a9dc <tcp_input+0x4a4>)
 800a848:	f240 120d 	movw	r2, #269	; 0x10d
 800a84c:	4964      	ldr	r1, [pc, #400]	; (800a9e0 <tcp_input+0x4a8>)
 800a84e:	4865      	ldr	r0, [pc, #404]	; (800a9e4 <tcp_input+0x4ac>)
 800a850:	f006 fd92 	bl	8011378 <iprintf>
      if (prev != NULL) {
 800a854:	69bb      	ldr	r3, [r7, #24]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d00a      	beq.n	800a870 <tcp_input+0x338>
        prev->next = pcb->next;
 800a85a:	69fb      	ldr	r3, [r7, #28]
 800a85c:	68da      	ldr	r2, [r3, #12]
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a862:	4b61      	ldr	r3, [pc, #388]	; (800a9e8 <tcp_input+0x4b0>)
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a86a:	4a5f      	ldr	r2, [pc, #380]	; (800a9e8 <tcp_input+0x4b0>)
 800a86c:	69fb      	ldr	r3, [r7, #28]
 800a86e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	68db      	ldr	r3, [r3, #12]
 800a874:	69fa      	ldr	r2, [r7, #28]
 800a876:	429a      	cmp	r2, r3
 800a878:	d111      	bne.n	800a89e <tcp_input+0x366>
 800a87a:	4b58      	ldr	r3, [pc, #352]	; (800a9dc <tcp_input+0x4a4>)
 800a87c:	f240 1215 	movw	r2, #277	; 0x115
 800a880:	495a      	ldr	r1, [pc, #360]	; (800a9ec <tcp_input+0x4b4>)
 800a882:	4858      	ldr	r0, [pc, #352]	; (800a9e4 <tcp_input+0x4ac>)
 800a884:	f006 fd78 	bl	8011378 <iprintf>
      break;
 800a888:	e009      	b.n	800a89e <tcp_input+0x366>
    }
    prev = pcb;
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	61fb      	str	r3, [r7, #28]
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	2b00      	cmp	r3, #0
 800a898:	f47f af5e 	bne.w	800a758 <tcp_input+0x220>
 800a89c:	e000      	b.n	800a8a0 <tcp_input+0x368>
      break;
 800a89e:	bf00      	nop
  }

  if (pcb == NULL) {
 800a8a0:	69fb      	ldr	r3, [r7, #28]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	f040 80aa 	bne.w	800a9fc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8a8:	4b51      	ldr	r3, [pc, #324]	; (800a9f0 <tcp_input+0x4b8>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	61fb      	str	r3, [r7, #28]
 800a8ae:	e03f      	b.n	800a930 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	7d1b      	ldrb	r3, [r3, #20]
 800a8b4:	2b0a      	cmp	r3, #10
 800a8b6:	d006      	beq.n	800a8c6 <tcp_input+0x38e>
 800a8b8:	4b48      	ldr	r3, [pc, #288]	; (800a9dc <tcp_input+0x4a4>)
 800a8ba:	f240 121f 	movw	r2, #287	; 0x11f
 800a8be:	494d      	ldr	r1, [pc, #308]	; (800a9f4 <tcp_input+0x4bc>)
 800a8c0:	4848      	ldr	r0, [pc, #288]	; (800a9e4 <tcp_input+0x4ac>)
 800a8c2:	f006 fd59 	bl	8011378 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a8c6:	69fb      	ldr	r3, [r7, #28]
 800a8c8:	7a1b      	ldrb	r3, [r3, #8]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d009      	beq.n	800a8e2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	7a1a      	ldrb	r2, [r3, #8]
 800a8d2:	4b41      	ldr	r3, [pc, #260]	; (800a9d8 <tcp_input+0x4a0>)
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a8da:	3301      	adds	r3, #1
 800a8dc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d122      	bne.n	800a928 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a8e2:	69fb      	ldr	r3, [r7, #28]
 800a8e4:	8b1a      	ldrh	r2, [r3, #24]
 800a8e6:	4b3b      	ldr	r3, [pc, #236]	; (800a9d4 <tcp_input+0x49c>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	881b      	ldrh	r3, [r3, #0]
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d11b      	bne.n	800a92a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	8ada      	ldrh	r2, [r3, #22]
 800a8f6:	4b37      	ldr	r3, [pc, #220]	; (800a9d4 <tcp_input+0x49c>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	885b      	ldrh	r3, [r3, #2]
 800a8fc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d113      	bne.n	800a92a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	685a      	ldr	r2, [r3, #4]
 800a906:	4b34      	ldr	r3, [pc, #208]	; (800a9d8 <tcp_input+0x4a0>)
 800a908:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d10d      	bne.n	800a92a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	4b31      	ldr	r3, [pc, #196]	; (800a9d8 <tcp_input+0x4a0>)
 800a914:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a916:	429a      	cmp	r2, r3
 800a918:	d107      	bne.n	800a92a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a91a:	69f8      	ldr	r0, [r7, #28]
 800a91c:	f000 fb56 	bl	800afcc <tcp_timewait_input>
        }
        pbuf_free(p);
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f7fd ff3f 	bl	80087a4 <pbuf_free>
        return;
 800a926:	e1fd      	b.n	800ad24 <tcp_input+0x7ec>
        continue;
 800a928:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a92a:	69fb      	ldr	r3, [r7, #28]
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	61fb      	str	r3, [r7, #28]
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d1bc      	bne.n	800a8b0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a936:	2300      	movs	r3, #0
 800a938:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a93a:	4b2f      	ldr	r3, [pc, #188]	; (800a9f8 <tcp_input+0x4c0>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	617b      	str	r3, [r7, #20]
 800a940:	e02a      	b.n	800a998 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	7a1b      	ldrb	r3, [r3, #8]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d00c      	beq.n	800a964 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	7a1a      	ldrb	r2, [r3, #8]
 800a94e:	4b22      	ldr	r3, [pc, #136]	; (800a9d8 <tcp_input+0x4a0>)
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a956:	3301      	adds	r3, #1
 800a958:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d002      	beq.n	800a964 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	61bb      	str	r3, [r7, #24]
        continue;
 800a962:	e016      	b.n	800a992 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	8ada      	ldrh	r2, [r3, #22]
 800a968:	4b1a      	ldr	r3, [pc, #104]	; (800a9d4 <tcp_input+0x49c>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	885b      	ldrh	r3, [r3, #2]
 800a96e:	b29b      	uxth	r3, r3
 800a970:	429a      	cmp	r2, r3
 800a972:	d10c      	bne.n	800a98e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	4b17      	ldr	r3, [pc, #92]	; (800a9d8 <tcp_input+0x4a0>)
 800a97a:	695b      	ldr	r3, [r3, #20]
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d00f      	beq.n	800a9a0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00d      	beq.n	800a9a2 <tcp_input+0x46a>
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d009      	beq.n	800a9a2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	617b      	str	r3, [r7, #20]
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d1d1      	bne.n	800a942 <tcp_input+0x40a>
 800a99e:	e000      	b.n	800a9a2 <tcp_input+0x46a>
            break;
 800a9a0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d029      	beq.n	800a9fc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a9a8:	69bb      	ldr	r3, [r7, #24]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00a      	beq.n	800a9c4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	68da      	ldr	r2, [r3, #12]
 800a9b2:	69bb      	ldr	r3, [r7, #24]
 800a9b4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a9b6:	4b10      	ldr	r3, [pc, #64]	; (800a9f8 <tcp_input+0x4c0>)
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a9be:	4a0e      	ldr	r2, [pc, #56]	; (800a9f8 <tcp_input+0x4c0>)
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a9c4:	6978      	ldr	r0, [r7, #20]
 800a9c6:	f000 fa03 	bl	800add0 <tcp_listen_input>
      }
      pbuf_free(p);
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f7fd feea 	bl	80087a4 <pbuf_free>
      return;
 800a9d0:	e1a8      	b.n	800ad24 <tcp_input+0x7ec>
 800a9d2:	bf00      	nop
 800a9d4:	2000bc54 	.word	0x2000bc54
 800a9d8:	200064fc 	.word	0x200064fc
 800a9dc:	08013aa0 	.word	0x08013aa0
 800a9e0:	08013bcc 	.word	0x08013bcc
 800a9e4:	08013aec 	.word	0x08013aec
 800a9e8:	2000bc38 	.word	0x2000bc38
 800a9ec:	08013bf8 	.word	0x08013bf8
 800a9f0:	2000bc3c 	.word	0x2000bc3c
 800a9f4:	08013c24 	.word	0x08013c24
 800a9f8:	2000bc34 	.word	0x2000bc34
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a9fc:	69fb      	ldr	r3, [r7, #28]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	f000 8158 	beq.w	800acb4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800aa04:	4b95      	ldr	r3, [pc, #596]	; (800ac5c <tcp_input+0x724>)
 800aa06:	2200      	movs	r2, #0
 800aa08:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	891a      	ldrh	r2, [r3, #8]
 800aa0e:	4b93      	ldr	r3, [pc, #588]	; (800ac5c <tcp_input+0x724>)
 800aa10:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800aa12:	4a92      	ldr	r2, [pc, #584]	; (800ac5c <tcp_input+0x724>)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800aa18:	4b91      	ldr	r3, [pc, #580]	; (800ac60 <tcp_input+0x728>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a8f      	ldr	r2, [pc, #572]	; (800ac5c <tcp_input+0x724>)
 800aa1e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800aa20:	4b90      	ldr	r3, [pc, #576]	; (800ac64 <tcp_input+0x72c>)
 800aa22:	2200      	movs	r2, #0
 800aa24:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800aa26:	4b90      	ldr	r3, [pc, #576]	; (800ac68 <tcp_input+0x730>)
 800aa28:	2200      	movs	r2, #0
 800aa2a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800aa2c:	4b8f      	ldr	r3, [pc, #572]	; (800ac6c <tcp_input+0x734>)
 800aa2e:	2200      	movs	r2, #0
 800aa30:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800aa32:	4b8f      	ldr	r3, [pc, #572]	; (800ac70 <tcp_input+0x738>)
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	f003 0308 	and.w	r3, r3, #8
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d006      	beq.n	800aa4c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	7b5b      	ldrb	r3, [r3, #13]
 800aa42:	f043 0301 	orr.w	r3, r3, #1
 800aa46:	b2da      	uxtb	r2, r3
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d017      	beq.n	800aa84 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800aa54:	69f8      	ldr	r0, [r7, #28]
 800aa56:	f7ff f929 	bl	8009cac <tcp_process_refused_data>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	f113 0f0d 	cmn.w	r3, #13
 800aa60:	d007      	beq.n	800aa72 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d00c      	beq.n	800aa84 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800aa6a:	4b82      	ldr	r3, [pc, #520]	; (800ac74 <tcp_input+0x73c>)
 800aa6c:	881b      	ldrh	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d008      	beq.n	800aa84 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	f040 80e3 	bne.w	800ac42 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800aa7c:	69f8      	ldr	r0, [r7, #28]
 800aa7e:	f003 f9ad 	bl	800dddc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800aa82:	e0de      	b.n	800ac42 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800aa84:	4a7c      	ldr	r2, [pc, #496]	; (800ac78 <tcp_input+0x740>)
 800aa86:	69fb      	ldr	r3, [r7, #28]
 800aa88:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800aa8a:	69f8      	ldr	r0, [r7, #28]
 800aa8c:	f000 fb18 	bl	800b0c0 <tcp_process>
 800aa90:	4603      	mov	r3, r0
 800aa92:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800aa94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa98:	f113 0f0d 	cmn.w	r3, #13
 800aa9c:	f000 80d3 	beq.w	800ac46 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800aaa0:	4b71      	ldr	r3, [pc, #452]	; (800ac68 <tcp_input+0x730>)
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	f003 0308 	and.w	r3, r3, #8
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d015      	beq.n	800aad8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d008      	beq.n	800aac8 <tcp_input+0x590>
 800aab6:	69fb      	ldr	r3, [r7, #28]
 800aab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aabc:	69fa      	ldr	r2, [r7, #28]
 800aabe:	6912      	ldr	r2, [r2, #16]
 800aac0:	f06f 010d 	mvn.w	r1, #13
 800aac4:	4610      	mov	r0, r2
 800aac6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800aac8:	69f9      	ldr	r1, [r7, #28]
 800aaca:	486c      	ldr	r0, [pc, #432]	; (800ac7c <tcp_input+0x744>)
 800aacc:	f7ff fbbc 	bl	800a248 <tcp_pcb_remove>
        tcp_free(pcb);
 800aad0:	69f8      	ldr	r0, [r7, #28]
 800aad2:	f7fe f9a9 	bl	8008e28 <tcp_free>
 800aad6:	e0da      	b.n	800ac8e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800aad8:	2300      	movs	r3, #0
 800aada:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800aadc:	4b63      	ldr	r3, [pc, #396]	; (800ac6c <tcp_input+0x734>)
 800aade:	881b      	ldrh	r3, [r3, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d01d      	beq.n	800ab20 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800aae4:	4b61      	ldr	r3, [pc, #388]	; (800ac6c <tcp_input+0x734>)
 800aae6:	881b      	ldrh	r3, [r3, #0]
 800aae8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800aaea:	69fb      	ldr	r3, [r7, #28]
 800aaec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d00a      	beq.n	800ab0a <tcp_input+0x5d2>
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aafa:	69fa      	ldr	r2, [r7, #28]
 800aafc:	6910      	ldr	r0, [r2, #16]
 800aafe:	89fa      	ldrh	r2, [r7, #14]
 800ab00:	69f9      	ldr	r1, [r7, #28]
 800ab02:	4798      	blx	r3
 800ab04:	4603      	mov	r3, r0
 800ab06:	74fb      	strb	r3, [r7, #19]
 800ab08:	e001      	b.n	800ab0e <tcp_input+0x5d6>
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ab0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab12:	f113 0f0d 	cmn.w	r3, #13
 800ab16:	f000 8098 	beq.w	800ac4a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ab1a:	4b54      	ldr	r3, [pc, #336]	; (800ac6c <tcp_input+0x734>)
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ab20:	69f8      	ldr	r0, [r7, #28]
 800ab22:	f000 f915 	bl	800ad50 <tcp_input_delayed_close>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f040 8090 	bne.w	800ac4e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ab2e:	4b4d      	ldr	r3, [pc, #308]	; (800ac64 <tcp_input+0x72c>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d041      	beq.n	800abba <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d006      	beq.n	800ab4c <tcp_input+0x614>
 800ab3e:	4b50      	ldr	r3, [pc, #320]	; (800ac80 <tcp_input+0x748>)
 800ab40:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ab44:	494f      	ldr	r1, [pc, #316]	; (800ac84 <tcp_input+0x74c>)
 800ab46:	4850      	ldr	r0, [pc, #320]	; (800ac88 <tcp_input+0x750>)
 800ab48:	f006 fc16 	bl	8011378 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ab4c:	69fb      	ldr	r3, [r7, #28]
 800ab4e:	8b5b      	ldrh	r3, [r3, #26]
 800ab50:	f003 0310 	and.w	r3, r3, #16
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d008      	beq.n	800ab6a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ab58:	4b42      	ldr	r3, [pc, #264]	; (800ac64 <tcp_input+0x72c>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7fd fe21 	bl	80087a4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ab62:	69f8      	ldr	r0, [r7, #28]
 800ab64:	f7fe fc48 	bl	80093f8 <tcp_abort>
            goto aborted;
 800ab68:	e091      	b.n	800ac8e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ab6a:	69fb      	ldr	r3, [r7, #28]
 800ab6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00c      	beq.n	800ab8e <tcp_input+0x656>
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	6918      	ldr	r0, [r3, #16]
 800ab7e:	4b39      	ldr	r3, [pc, #228]	; (800ac64 <tcp_input+0x72c>)
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	2300      	movs	r3, #0
 800ab84:	69f9      	ldr	r1, [r7, #28]
 800ab86:	47a0      	blx	r4
 800ab88:	4603      	mov	r3, r0
 800ab8a:	74fb      	strb	r3, [r7, #19]
 800ab8c:	e008      	b.n	800aba0 <tcp_input+0x668>
 800ab8e:	4b35      	ldr	r3, [pc, #212]	; (800ac64 <tcp_input+0x72c>)
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	2300      	movs	r3, #0
 800ab94:	69f9      	ldr	r1, [r7, #28]
 800ab96:	2000      	movs	r0, #0
 800ab98:	f7ff f95e 	bl	8009e58 <tcp_recv_null>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800aba0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aba4:	f113 0f0d 	cmn.w	r3, #13
 800aba8:	d053      	beq.n	800ac52 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800abaa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d003      	beq.n	800abba <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800abb2:	4b2c      	ldr	r3, [pc, #176]	; (800ac64 <tcp_input+0x72c>)
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800abba:	4b2b      	ldr	r3, [pc, #172]	; (800ac68 <tcp_input+0x730>)
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	f003 0320 	and.w	r3, r3, #32
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d030      	beq.n	800ac28 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d009      	beq.n	800abe2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abd2:	7b5a      	ldrb	r2, [r3, #13]
 800abd4:	69fb      	ldr	r3, [r7, #28]
 800abd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abd8:	f042 0220 	orr.w	r2, r2, #32
 800abdc:	b2d2      	uxtb	r2, r2
 800abde:	735a      	strb	r2, [r3, #13]
 800abe0:	e022      	b.n	800ac28 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abe6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800abea:	d005      	beq.n	800abf8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abf0:	3301      	adds	r3, #1
 800abf2:	b29a      	uxth	r2, r3
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00b      	beq.n	800ac1a <tcp_input+0x6e2>
 800ac02:	69fb      	ldr	r3, [r7, #28]
 800ac04:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	6918      	ldr	r0, [r3, #16]
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	2200      	movs	r2, #0
 800ac10:	69f9      	ldr	r1, [r7, #28]
 800ac12:	47a0      	blx	r4
 800ac14:	4603      	mov	r3, r0
 800ac16:	74fb      	strb	r3, [r7, #19]
 800ac18:	e001      	b.n	800ac1e <tcp_input+0x6e6>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ac1e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac22:	f113 0f0d 	cmn.w	r3, #13
 800ac26:	d016      	beq.n	800ac56 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ac28:	4b13      	ldr	r3, [pc, #76]	; (800ac78 <tcp_input+0x740>)
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ac2e:	69f8      	ldr	r0, [r7, #28]
 800ac30:	f000 f88e 	bl	800ad50 <tcp_input_delayed_close>
 800ac34:	4603      	mov	r3, r0
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d128      	bne.n	800ac8c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ac3a:	69f8      	ldr	r0, [r7, #28]
 800ac3c:	f002 fac8 	bl	800d1d0 <tcp_output>
 800ac40:	e025      	b.n	800ac8e <tcp_input+0x756>
        goto aborted;
 800ac42:	bf00      	nop
 800ac44:	e023      	b.n	800ac8e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ac46:	bf00      	nop
 800ac48:	e021      	b.n	800ac8e <tcp_input+0x756>
              goto aborted;
 800ac4a:	bf00      	nop
 800ac4c:	e01f      	b.n	800ac8e <tcp_input+0x756>
          goto aborted;
 800ac4e:	bf00      	nop
 800ac50:	e01d      	b.n	800ac8e <tcp_input+0x756>
            goto aborted;
 800ac52:	bf00      	nop
 800ac54:	e01b      	b.n	800ac8e <tcp_input+0x756>
              goto aborted;
 800ac56:	bf00      	nop
 800ac58:	e019      	b.n	800ac8e <tcp_input+0x756>
 800ac5a:	bf00      	nop
 800ac5c:	2000bc44 	.word	0x2000bc44
 800ac60:	2000bc54 	.word	0x2000bc54
 800ac64:	2000bc74 	.word	0x2000bc74
 800ac68:	2000bc71 	.word	0x2000bc71
 800ac6c:	2000bc6c 	.word	0x2000bc6c
 800ac70:	2000bc70 	.word	0x2000bc70
 800ac74:	2000bc6e 	.word	0x2000bc6e
 800ac78:	2000bc78 	.word	0x2000bc78
 800ac7c:	2000bc38 	.word	0x2000bc38
 800ac80:	08013aa0 	.word	0x08013aa0
 800ac84:	08013c54 	.word	0x08013c54
 800ac88:	08013aec 	.word	0x08013aec
          goto aborted;
 800ac8c:	bf00      	nop
    tcp_input_pcb = NULL;
 800ac8e:	4b27      	ldr	r3, [pc, #156]	; (800ad2c <tcp_input+0x7f4>)
 800ac90:	2200      	movs	r2, #0
 800ac92:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ac94:	4b26      	ldr	r3, [pc, #152]	; (800ad30 <tcp_input+0x7f8>)
 800ac96:	2200      	movs	r2, #0
 800ac98:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ac9a:	4b26      	ldr	r3, [pc, #152]	; (800ad34 <tcp_input+0x7fc>)
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d03f      	beq.n	800ad22 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800aca2:	4b24      	ldr	r3, [pc, #144]	; (800ad34 <tcp_input+0x7fc>)
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7fd fd7c 	bl	80087a4 <pbuf_free>
      inseg.p = NULL;
 800acac:	4b21      	ldr	r3, [pc, #132]	; (800ad34 <tcp_input+0x7fc>)
 800acae:	2200      	movs	r2, #0
 800acb0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800acb2:	e036      	b.n	800ad22 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800acb4:	4b20      	ldr	r3, [pc, #128]	; (800ad38 <tcp_input+0x800>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	899b      	ldrh	r3, [r3, #12]
 800acba:	b29b      	uxth	r3, r3
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7fc fa13 	bl	80070e8 <lwip_htons>
 800acc2:	4603      	mov	r3, r0
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	f003 0304 	and.w	r3, r3, #4
 800acca:	2b00      	cmp	r3, #0
 800accc:	d118      	bne.n	800ad00 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800acce:	4b1b      	ldr	r3, [pc, #108]	; (800ad3c <tcp_input+0x804>)
 800acd0:	6819      	ldr	r1, [r3, #0]
 800acd2:	4b1b      	ldr	r3, [pc, #108]	; (800ad40 <tcp_input+0x808>)
 800acd4:	881b      	ldrh	r3, [r3, #0]
 800acd6:	461a      	mov	r2, r3
 800acd8:	4b1a      	ldr	r3, [pc, #104]	; (800ad44 <tcp_input+0x80c>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800acde:	4b16      	ldr	r3, [pc, #88]	; (800ad38 <tcp_input+0x800>)
 800ace0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ace2:	885b      	ldrh	r3, [r3, #2]
 800ace4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ace6:	4a14      	ldr	r2, [pc, #80]	; (800ad38 <tcp_input+0x800>)
 800ace8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800acea:	8812      	ldrh	r2, [r2, #0]
 800acec:	b292      	uxth	r2, r2
 800acee:	9202      	str	r2, [sp, #8]
 800acf0:	9301      	str	r3, [sp, #4]
 800acf2:	4b15      	ldr	r3, [pc, #84]	; (800ad48 <tcp_input+0x810>)
 800acf4:	9300      	str	r3, [sp, #0]
 800acf6:	4b15      	ldr	r3, [pc, #84]	; (800ad4c <tcp_input+0x814>)
 800acf8:	4602      	mov	r2, r0
 800acfa:	2000      	movs	r0, #0
 800acfc:	f003 f81c 	bl	800dd38 <tcp_rst>
    pbuf_free(p);
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f7fd fd4f 	bl	80087a4 <pbuf_free>
  return;
 800ad06:	e00c      	b.n	800ad22 <tcp_input+0x7ea>
    goto dropped;
 800ad08:	bf00      	nop
 800ad0a:	e006      	b.n	800ad1a <tcp_input+0x7e2>
    goto dropped;
 800ad0c:	bf00      	nop
 800ad0e:	e004      	b.n	800ad1a <tcp_input+0x7e2>
    goto dropped;
 800ad10:	bf00      	nop
 800ad12:	e002      	b.n	800ad1a <tcp_input+0x7e2>
      goto dropped;
 800ad14:	bf00      	nop
 800ad16:	e000      	b.n	800ad1a <tcp_input+0x7e2>
      goto dropped;
 800ad18:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f7fd fd42 	bl	80087a4 <pbuf_free>
 800ad20:	e000      	b.n	800ad24 <tcp_input+0x7ec>
  return;
 800ad22:	bf00      	nop
}
 800ad24:	3724      	adds	r7, #36	; 0x24
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd90      	pop	{r4, r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	2000bc78 	.word	0x2000bc78
 800ad30:	2000bc74 	.word	0x2000bc74
 800ad34:	2000bc44 	.word	0x2000bc44
 800ad38:	2000bc54 	.word	0x2000bc54
 800ad3c:	2000bc68 	.word	0x2000bc68
 800ad40:	2000bc6e 	.word	0x2000bc6e
 800ad44:	2000bc64 	.word	0x2000bc64
 800ad48:	2000650c 	.word	0x2000650c
 800ad4c:	20006510 	.word	0x20006510

0800ad50 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d106      	bne.n	800ad6c <tcp_input_delayed_close+0x1c>
 800ad5e:	4b17      	ldr	r3, [pc, #92]	; (800adbc <tcp_input_delayed_close+0x6c>)
 800ad60:	f240 225a 	movw	r2, #602	; 0x25a
 800ad64:	4916      	ldr	r1, [pc, #88]	; (800adc0 <tcp_input_delayed_close+0x70>)
 800ad66:	4817      	ldr	r0, [pc, #92]	; (800adc4 <tcp_input_delayed_close+0x74>)
 800ad68:	f006 fb06 	bl	8011378 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ad6c:	4b16      	ldr	r3, [pc, #88]	; (800adc8 <tcp_input_delayed_close+0x78>)
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	f003 0310 	and.w	r3, r3, #16
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d01c      	beq.n	800adb2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	8b5b      	ldrh	r3, [r3, #26]
 800ad7c:	f003 0310 	and.w	r3, r3, #16
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d10d      	bne.n	800ada0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d008      	beq.n	800ada0 <tcp_input_delayed_close+0x50>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	6912      	ldr	r2, [r2, #16]
 800ad98:	f06f 010e 	mvn.w	r1, #14
 800ad9c:	4610      	mov	r0, r2
 800ad9e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ada0:	6879      	ldr	r1, [r7, #4]
 800ada2:	480a      	ldr	r0, [pc, #40]	; (800adcc <tcp_input_delayed_close+0x7c>)
 800ada4:	f7ff fa50 	bl	800a248 <tcp_pcb_remove>
    tcp_free(pcb);
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f7fe f83d 	bl	8008e28 <tcp_free>
    return 1;
 800adae:	2301      	movs	r3, #1
 800adb0:	e000      	b.n	800adb4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800adb2:	2300      	movs	r3, #0
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3708      	adds	r7, #8
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	08013aa0 	.word	0x08013aa0
 800adc0:	08013c70 	.word	0x08013c70
 800adc4:	08013aec 	.word	0x08013aec
 800adc8:	2000bc71 	.word	0x2000bc71
 800adcc:	2000bc38 	.word	0x2000bc38

0800add0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800add0:	b590      	push	{r4, r7, lr}
 800add2:	b08b      	sub	sp, #44	; 0x2c
 800add4:	af04      	add	r7, sp, #16
 800add6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800add8:	4b6f      	ldr	r3, [pc, #444]	; (800af98 <tcp_listen_input+0x1c8>)
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	f003 0304 	and.w	r3, r3, #4
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	f040 80d2 	bne.w	800af8a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d106      	bne.n	800adfa <tcp_listen_input+0x2a>
 800adec:	4b6b      	ldr	r3, [pc, #428]	; (800af9c <tcp_listen_input+0x1cc>)
 800adee:	f240 2281 	movw	r2, #641	; 0x281
 800adf2:	496b      	ldr	r1, [pc, #428]	; (800afa0 <tcp_listen_input+0x1d0>)
 800adf4:	486b      	ldr	r0, [pc, #428]	; (800afa4 <tcp_listen_input+0x1d4>)
 800adf6:	f006 fabf 	bl	8011378 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800adfa:	4b67      	ldr	r3, [pc, #412]	; (800af98 <tcp_listen_input+0x1c8>)
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	f003 0310 	and.w	r3, r3, #16
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d019      	beq.n	800ae3a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae06:	4b68      	ldr	r3, [pc, #416]	; (800afa8 <tcp_listen_input+0x1d8>)
 800ae08:	6819      	ldr	r1, [r3, #0]
 800ae0a:	4b68      	ldr	r3, [pc, #416]	; (800afac <tcp_listen_input+0x1dc>)
 800ae0c:	881b      	ldrh	r3, [r3, #0]
 800ae0e:	461a      	mov	r2, r3
 800ae10:	4b67      	ldr	r3, [pc, #412]	; (800afb0 <tcp_listen_input+0x1e0>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ae16:	4b67      	ldr	r3, [pc, #412]	; (800afb4 <tcp_listen_input+0x1e4>)
 800ae18:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae1a:	885b      	ldrh	r3, [r3, #2]
 800ae1c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ae1e:	4a65      	ldr	r2, [pc, #404]	; (800afb4 <tcp_listen_input+0x1e4>)
 800ae20:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae22:	8812      	ldrh	r2, [r2, #0]
 800ae24:	b292      	uxth	r2, r2
 800ae26:	9202      	str	r2, [sp, #8]
 800ae28:	9301      	str	r3, [sp, #4]
 800ae2a:	4b63      	ldr	r3, [pc, #396]	; (800afb8 <tcp_listen_input+0x1e8>)
 800ae2c:	9300      	str	r3, [sp, #0]
 800ae2e:	4b63      	ldr	r3, [pc, #396]	; (800afbc <tcp_listen_input+0x1ec>)
 800ae30:	4602      	mov	r2, r0
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f002 ff80 	bl	800dd38 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ae38:	e0a9      	b.n	800af8e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ae3a:	4b57      	ldr	r3, [pc, #348]	; (800af98 <tcp_listen_input+0x1c8>)
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	f003 0302 	and.w	r3, r3, #2
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	f000 80a3 	beq.w	800af8e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	7d5b      	ldrb	r3, [r3, #21]
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f7ff f927 	bl	800a0a0 <tcp_alloc>
 800ae52:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d111      	bne.n	800ae7e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	699b      	ldr	r3, [r3, #24]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d00a      	beq.n	800ae78 <tcp_listen_input+0xa8>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	699b      	ldr	r3, [r3, #24]
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	6910      	ldr	r0, [r2, #16]
 800ae6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae6e:	2100      	movs	r1, #0
 800ae70:	4798      	blx	r3
 800ae72:	4603      	mov	r3, r0
 800ae74:	73bb      	strb	r3, [r7, #14]
      return;
 800ae76:	e08b      	b.n	800af90 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ae78:	23f0      	movs	r3, #240	; 0xf0
 800ae7a:	73bb      	strb	r3, [r7, #14]
      return;
 800ae7c:	e088      	b.n	800af90 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ae7e:	4b50      	ldr	r3, [pc, #320]	; (800afc0 <tcp_listen_input+0x1f0>)
 800ae80:	695a      	ldr	r2, [r3, #20]
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ae86:	4b4e      	ldr	r3, [pc, #312]	; (800afc0 <tcp_listen_input+0x1f0>)
 800ae88:	691a      	ldr	r2, [r3, #16]
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	8ada      	ldrh	r2, [r3, #22]
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ae96:	4b47      	ldr	r3, [pc, #284]	; (800afb4 <tcp_listen_input+0x1e4>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	881b      	ldrh	r3, [r3, #0]
 800ae9c:	b29a      	uxth	r2, r3
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	2203      	movs	r2, #3
 800aea6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800aea8:	4b41      	ldr	r3, [pc, #260]	; (800afb0 <tcp_listen_input+0x1e0>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	1c5a      	adds	r2, r3, #1
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800aeba:	6978      	ldr	r0, [r7, #20]
 800aebc:	f7ff fa58 	bl	800a370 <tcp_next_iss>
 800aec0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	693a      	ldr	r2, [r7, #16]
 800aec6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	693a      	ldr	r2, [r7, #16]
 800aecc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	693a      	ldr	r2, [r7, #16]
 800aed2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	693a      	ldr	r2, [r7, #16]
 800aed8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800aeda:	4b35      	ldr	r3, [pc, #212]	; (800afb0 <tcp_listen_input+0x1e0>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	1e5a      	subs	r2, r3, #1
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	691a      	ldr	r2, [r3, #16]
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	7a5b      	ldrb	r3, [r3, #9]
 800aef6:	f003 030c 	and.w	r3, r3, #12
 800aefa:	b2da      	uxtb	r2, r3
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	7a1a      	ldrb	r2, [r3, #8]
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800af08:	4b2e      	ldr	r3, [pc, #184]	; (800afc4 <tcp_listen_input+0x1f4>)
 800af0a:	681a      	ldr	r2, [r3, #0]
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	60da      	str	r2, [r3, #12]
 800af10:	4a2c      	ldr	r2, [pc, #176]	; (800afc4 <tcp_listen_input+0x1f4>)
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	6013      	str	r3, [r2, #0]
 800af16:	f003 f8d1 	bl	800e0bc <tcp_timer_needed>
 800af1a:	4b2b      	ldr	r3, [pc, #172]	; (800afc8 <tcp_listen_input+0x1f8>)
 800af1c:	2201      	movs	r2, #1
 800af1e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800af20:	6978      	ldr	r0, [r7, #20]
 800af22:	f001 fd8f 	bl	800ca44 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800af26:	4b23      	ldr	r3, [pc, #140]	; (800afb4 <tcp_listen_input+0x1e4>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	89db      	ldrh	r3, [r3, #14]
 800af2c:	b29a      	uxth	r2, r3
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	3304      	adds	r3, #4
 800af48:	4618      	mov	r0, r3
 800af4a:	f004 ffc5 	bl	800fed8 <ip4_route>
 800af4e:	4601      	mov	r1, r0
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	3304      	adds	r3, #4
 800af54:	461a      	mov	r2, r3
 800af56:	4620      	mov	r0, r4
 800af58:	f7ff fa30 	bl	800a3bc <tcp_eff_send_mss_netif>
 800af5c:	4603      	mov	r3, r0
 800af5e:	461a      	mov	r2, r3
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800af64:	2112      	movs	r1, #18
 800af66:	6978      	ldr	r0, [r7, #20]
 800af68:	f002 f844 	bl	800cff4 <tcp_enqueue_flags>
 800af6c:	4603      	mov	r3, r0
 800af6e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800af70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d004      	beq.n	800af82 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800af78:	2100      	movs	r1, #0
 800af7a:	6978      	ldr	r0, [r7, #20]
 800af7c:	f7fe f97e 	bl	800927c <tcp_abandon>
      return;
 800af80:	e006      	b.n	800af90 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800af82:	6978      	ldr	r0, [r7, #20]
 800af84:	f002 f924 	bl	800d1d0 <tcp_output>
  return;
 800af88:	e001      	b.n	800af8e <tcp_listen_input+0x1be>
    return;
 800af8a:	bf00      	nop
 800af8c:	e000      	b.n	800af90 <tcp_listen_input+0x1c0>
  return;
 800af8e:	bf00      	nop
}
 800af90:	371c      	adds	r7, #28
 800af92:	46bd      	mov	sp, r7
 800af94:	bd90      	pop	{r4, r7, pc}
 800af96:	bf00      	nop
 800af98:	2000bc70 	.word	0x2000bc70
 800af9c:	08013aa0 	.word	0x08013aa0
 800afa0:	08013c98 	.word	0x08013c98
 800afa4:	08013aec 	.word	0x08013aec
 800afa8:	2000bc68 	.word	0x2000bc68
 800afac:	2000bc6e 	.word	0x2000bc6e
 800afb0:	2000bc64 	.word	0x2000bc64
 800afb4:	2000bc54 	.word	0x2000bc54
 800afb8:	2000650c 	.word	0x2000650c
 800afbc:	20006510 	.word	0x20006510
 800afc0:	200064fc 	.word	0x200064fc
 800afc4:	2000bc38 	.word	0x2000bc38
 800afc8:	2000bc40 	.word	0x2000bc40

0800afcc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b086      	sub	sp, #24
 800afd0:	af04      	add	r7, sp, #16
 800afd2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800afd4:	4b2f      	ldr	r3, [pc, #188]	; (800b094 <tcp_timewait_input+0xc8>)
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	f003 0304 	and.w	r3, r3, #4
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d153      	bne.n	800b088 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d106      	bne.n	800aff4 <tcp_timewait_input+0x28>
 800afe6:	4b2c      	ldr	r3, [pc, #176]	; (800b098 <tcp_timewait_input+0xcc>)
 800afe8:	f240 22ee 	movw	r2, #750	; 0x2ee
 800afec:	492b      	ldr	r1, [pc, #172]	; (800b09c <tcp_timewait_input+0xd0>)
 800afee:	482c      	ldr	r0, [pc, #176]	; (800b0a0 <tcp_timewait_input+0xd4>)
 800aff0:	f006 f9c2 	bl	8011378 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800aff4:	4b27      	ldr	r3, [pc, #156]	; (800b094 <tcp_timewait_input+0xc8>)
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	f003 0302 	and.w	r3, r3, #2
 800affc:	2b00      	cmp	r3, #0
 800affe:	d02a      	beq.n	800b056 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b000:	4b28      	ldr	r3, [pc, #160]	; (800b0a4 <tcp_timewait_input+0xd8>)
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b008:	1ad3      	subs	r3, r2, r3
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	db2d      	blt.n	800b06a <tcp_timewait_input+0x9e>
 800b00e:	4b25      	ldr	r3, [pc, #148]	; (800b0a4 <tcp_timewait_input+0xd8>)
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b016:	6879      	ldr	r1, [r7, #4]
 800b018:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b01a:	440b      	add	r3, r1
 800b01c:	1ad3      	subs	r3, r2, r3
 800b01e:	2b00      	cmp	r3, #0
 800b020:	dc23      	bgt.n	800b06a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b022:	4b21      	ldr	r3, [pc, #132]	; (800b0a8 <tcp_timewait_input+0xdc>)
 800b024:	6819      	ldr	r1, [r3, #0]
 800b026:	4b21      	ldr	r3, [pc, #132]	; (800b0ac <tcp_timewait_input+0xe0>)
 800b028:	881b      	ldrh	r3, [r3, #0]
 800b02a:	461a      	mov	r2, r3
 800b02c:	4b1d      	ldr	r3, [pc, #116]	; (800b0a4 <tcp_timewait_input+0xd8>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b032:	4b1f      	ldr	r3, [pc, #124]	; (800b0b0 <tcp_timewait_input+0xe4>)
 800b034:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b036:	885b      	ldrh	r3, [r3, #2]
 800b038:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b03a:	4a1d      	ldr	r2, [pc, #116]	; (800b0b0 <tcp_timewait_input+0xe4>)
 800b03c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b03e:	8812      	ldrh	r2, [r2, #0]
 800b040:	b292      	uxth	r2, r2
 800b042:	9202      	str	r2, [sp, #8]
 800b044:	9301      	str	r3, [sp, #4]
 800b046:	4b1b      	ldr	r3, [pc, #108]	; (800b0b4 <tcp_timewait_input+0xe8>)
 800b048:	9300      	str	r3, [sp, #0]
 800b04a:	4b1b      	ldr	r3, [pc, #108]	; (800b0b8 <tcp_timewait_input+0xec>)
 800b04c:	4602      	mov	r2, r0
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f002 fe72 	bl	800dd38 <tcp_rst>
      return;
 800b054:	e01b      	b.n	800b08e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800b056:	4b0f      	ldr	r3, [pc, #60]	; (800b094 <tcp_timewait_input+0xc8>)
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	f003 0301 	and.w	r3, r3, #1
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d003      	beq.n	800b06a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b062:	4b16      	ldr	r3, [pc, #88]	; (800b0bc <tcp_timewait_input+0xf0>)
 800b064:	681a      	ldr	r2, [r3, #0]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b06a:	4b10      	ldr	r3, [pc, #64]	; (800b0ac <tcp_timewait_input+0xe0>)
 800b06c:	881b      	ldrh	r3, [r3, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d00c      	beq.n	800b08c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	8b5b      	ldrh	r3, [r3, #26]
 800b076:	f043 0302 	orr.w	r3, r3, #2
 800b07a:	b29a      	uxth	r2, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f002 f8a5 	bl	800d1d0 <tcp_output>
  }
  return;
 800b086:	e001      	b.n	800b08c <tcp_timewait_input+0xc0>
    return;
 800b088:	bf00      	nop
 800b08a:	e000      	b.n	800b08e <tcp_timewait_input+0xc2>
  return;
 800b08c:	bf00      	nop
}
 800b08e:	3708      	adds	r7, #8
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	2000bc70 	.word	0x2000bc70
 800b098:	08013aa0 	.word	0x08013aa0
 800b09c:	08013cb8 	.word	0x08013cb8
 800b0a0:	08013aec 	.word	0x08013aec
 800b0a4:	2000bc64 	.word	0x2000bc64
 800b0a8:	2000bc68 	.word	0x2000bc68
 800b0ac:	2000bc6e 	.word	0x2000bc6e
 800b0b0:	2000bc54 	.word	0x2000bc54
 800b0b4:	2000650c 	.word	0x2000650c
 800b0b8:	20006510 	.word	0x20006510
 800b0bc:	2000bc2c 	.word	0x2000bc2c

0800b0c0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b0c0:	b590      	push	{r4, r7, lr}
 800b0c2:	b08d      	sub	sp, #52	; 0x34
 800b0c4:	af04      	add	r7, sp, #16
 800b0c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d106      	bne.n	800b0e4 <tcp_process+0x24>
 800b0d6:	4b9d      	ldr	r3, [pc, #628]	; (800b34c <tcp_process+0x28c>)
 800b0d8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b0dc:	499c      	ldr	r1, [pc, #624]	; (800b350 <tcp_process+0x290>)
 800b0de:	489d      	ldr	r0, [pc, #628]	; (800b354 <tcp_process+0x294>)
 800b0e0:	f006 f94a 	bl	8011378 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b0e4:	4b9c      	ldr	r3, [pc, #624]	; (800b358 <tcp_process+0x298>)
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	f003 0304 	and.w	r3, r3, #4
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d04e      	beq.n	800b18e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	7d1b      	ldrb	r3, [r3, #20]
 800b0f4:	2b02      	cmp	r3, #2
 800b0f6:	d108      	bne.n	800b10a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0fc:	4b97      	ldr	r3, [pc, #604]	; (800b35c <tcp_process+0x29c>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	429a      	cmp	r2, r3
 800b102:	d123      	bne.n	800b14c <tcp_process+0x8c>
        acceptable = 1;
 800b104:	2301      	movs	r3, #1
 800b106:	76fb      	strb	r3, [r7, #27]
 800b108:	e020      	b.n	800b14c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b10e:	4b94      	ldr	r3, [pc, #592]	; (800b360 <tcp_process+0x2a0>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	429a      	cmp	r2, r3
 800b114:	d102      	bne.n	800b11c <tcp_process+0x5c>
        acceptable = 1;
 800b116:	2301      	movs	r3, #1
 800b118:	76fb      	strb	r3, [r7, #27]
 800b11a:	e017      	b.n	800b14c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b11c:	4b90      	ldr	r3, [pc, #576]	; (800b360 <tcp_process+0x2a0>)
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b124:	1ad3      	subs	r3, r2, r3
 800b126:	2b00      	cmp	r3, #0
 800b128:	db10      	blt.n	800b14c <tcp_process+0x8c>
 800b12a:	4b8d      	ldr	r3, [pc, #564]	; (800b360 <tcp_process+0x2a0>)
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b132:	6879      	ldr	r1, [r7, #4]
 800b134:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b136:	440b      	add	r3, r1
 800b138:	1ad3      	subs	r3, r2, r3
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	dc06      	bgt.n	800b14c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	8b5b      	ldrh	r3, [r3, #26]
 800b142:	f043 0302 	orr.w	r3, r3, #2
 800b146:	b29a      	uxth	r2, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b14c:	7efb      	ldrb	r3, [r7, #27]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d01b      	beq.n	800b18a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	7d1b      	ldrb	r3, [r3, #20]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d106      	bne.n	800b168 <tcp_process+0xa8>
 800b15a:	4b7c      	ldr	r3, [pc, #496]	; (800b34c <tcp_process+0x28c>)
 800b15c:	f44f 724e 	mov.w	r2, #824	; 0x338
 800b160:	4980      	ldr	r1, [pc, #512]	; (800b364 <tcp_process+0x2a4>)
 800b162:	487c      	ldr	r0, [pc, #496]	; (800b354 <tcp_process+0x294>)
 800b164:	f006 f908 	bl	8011378 <iprintf>
      recv_flags |= TF_RESET;
 800b168:	4b7f      	ldr	r3, [pc, #508]	; (800b368 <tcp_process+0x2a8>)
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	f043 0308 	orr.w	r3, r3, #8
 800b170:	b2da      	uxtb	r2, r3
 800b172:	4b7d      	ldr	r3, [pc, #500]	; (800b368 <tcp_process+0x2a8>)
 800b174:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	8b5b      	ldrh	r3, [r3, #26]
 800b17a:	f023 0301 	bic.w	r3, r3, #1
 800b17e:	b29a      	uxth	r2, r3
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b184:	f06f 030d 	mvn.w	r3, #13
 800b188:	e37a      	b.n	800b880 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b18a:	2300      	movs	r3, #0
 800b18c:	e378      	b.n	800b880 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b18e:	4b72      	ldr	r3, [pc, #456]	; (800b358 <tcp_process+0x298>)
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	f003 0302 	and.w	r3, r3, #2
 800b196:	2b00      	cmp	r3, #0
 800b198:	d010      	beq.n	800b1bc <tcp_process+0xfc>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	7d1b      	ldrb	r3, [r3, #20]
 800b19e:	2b02      	cmp	r3, #2
 800b1a0:	d00c      	beq.n	800b1bc <tcp_process+0xfc>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	7d1b      	ldrb	r3, [r3, #20]
 800b1a6:	2b03      	cmp	r3, #3
 800b1a8:	d008      	beq.n	800b1bc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	8b5b      	ldrh	r3, [r3, #26]
 800b1ae:	f043 0302 	orr.w	r3, r3, #2
 800b1b2:	b29a      	uxth	r2, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	e361      	b.n	800b880 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	8b5b      	ldrh	r3, [r3, #26]
 800b1c0:	f003 0310 	and.w	r3, r3, #16
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d103      	bne.n	800b1d0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b1c8:	4b68      	ldr	r3, [pc, #416]	; (800b36c <tcp_process+0x2ac>)
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f001 fc2f 	bl	800ca44 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	7d1b      	ldrb	r3, [r3, #20]
 800b1ea:	3b02      	subs	r3, #2
 800b1ec:	2b07      	cmp	r3, #7
 800b1ee:	f200 8337 	bhi.w	800b860 <tcp_process+0x7a0>
 800b1f2:	a201      	add	r2, pc, #4	; (adr r2, 800b1f8 <tcp_process+0x138>)
 800b1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f8:	0800b219 	.word	0x0800b219
 800b1fc:	0800b449 	.word	0x0800b449
 800b200:	0800b5c1 	.word	0x0800b5c1
 800b204:	0800b5eb 	.word	0x0800b5eb
 800b208:	0800b70f 	.word	0x0800b70f
 800b20c:	0800b5c1 	.word	0x0800b5c1
 800b210:	0800b79b 	.word	0x0800b79b
 800b214:	0800b82b 	.word	0x0800b82b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b218:	4b4f      	ldr	r3, [pc, #316]	; (800b358 <tcp_process+0x298>)
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	f003 0310 	and.w	r3, r3, #16
 800b220:	2b00      	cmp	r3, #0
 800b222:	f000 80e4 	beq.w	800b3ee <tcp_process+0x32e>
 800b226:	4b4c      	ldr	r3, [pc, #304]	; (800b358 <tcp_process+0x298>)
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	f003 0302 	and.w	r3, r3, #2
 800b22e:	2b00      	cmp	r3, #0
 800b230:	f000 80dd 	beq.w	800b3ee <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b238:	1c5a      	adds	r2, r3, #1
 800b23a:	4b48      	ldr	r3, [pc, #288]	; (800b35c <tcp_process+0x29c>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	429a      	cmp	r2, r3
 800b240:	f040 80d5 	bne.w	800b3ee <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b244:	4b46      	ldr	r3, [pc, #280]	; (800b360 <tcp_process+0x2a0>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	1c5a      	adds	r2, r3, #1
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800b256:	4b41      	ldr	r3, [pc, #260]	; (800b35c <tcp_process+0x29c>)
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b25e:	4b44      	ldr	r3, [pc, #272]	; (800b370 <tcp_process+0x2b0>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	89db      	ldrh	r3, [r3, #14]
 800b264:	b29a      	uxth	r2, r3
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b278:	4b39      	ldr	r3, [pc, #228]	; (800b360 <tcp_process+0x2a0>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	1e5a      	subs	r2, r3, #1
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2204      	movs	r2, #4
 800b286:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	3304      	adds	r3, #4
 800b290:	4618      	mov	r0, r3
 800b292:	f004 fe21 	bl	800fed8 <ip4_route>
 800b296:	4601      	mov	r1, r0
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	3304      	adds	r3, #4
 800b29c:	461a      	mov	r2, r3
 800b29e:	4620      	mov	r0, r4
 800b2a0:	f7ff f88c 	bl	800a3bc <tcp_eff_send_mss_netif>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2b0:	009a      	lsls	r2, r3, #2
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2b6:	005b      	lsls	r3, r3, #1
 800b2b8:	f241 111c 	movw	r1, #4380	; 0x111c
 800b2bc:	428b      	cmp	r3, r1
 800b2be:	bf38      	it	cc
 800b2c0:	460b      	movcc	r3, r1
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d204      	bcs.n	800b2d0 <tcp_process+0x210>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2ca:	009b      	lsls	r3, r3, #2
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	e00d      	b.n	800b2ec <tcp_process+0x22c>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2d4:	005b      	lsls	r3, r3, #1
 800b2d6:	f241 121c 	movw	r2, #4380	; 0x111c
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d904      	bls.n	800b2e8 <tcp_process+0x228>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2e2:	005b      	lsls	r3, r3, #1
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	e001      	b.n	800b2ec <tcp_process+0x22c>
 800b2e8:	f241 131c 	movw	r3, #4380	; 0x111c
 800b2ec:	687a      	ldr	r2, [r7, #4]
 800b2ee:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d106      	bne.n	800b30a <tcp_process+0x24a>
 800b2fc:	4b13      	ldr	r3, [pc, #76]	; (800b34c <tcp_process+0x28c>)
 800b2fe:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b302:	491c      	ldr	r1, [pc, #112]	; (800b374 <tcp_process+0x2b4>)
 800b304:	4813      	ldr	r0, [pc, #76]	; (800b354 <tcp_process+0x294>)
 800b306:	f006 f837 	bl	8011378 <iprintf>
        --pcb->snd_queuelen;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b310:	3b01      	subs	r3, #1
 800b312:	b29a      	uxth	r2, r3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b31e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d12a      	bne.n	800b37c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b32a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d106      	bne.n	800b340 <tcp_process+0x280>
 800b332:	4b06      	ldr	r3, [pc, #24]	; (800b34c <tcp_process+0x28c>)
 800b334:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b338:	490f      	ldr	r1, [pc, #60]	; (800b378 <tcp_process+0x2b8>)
 800b33a:	4806      	ldr	r0, [pc, #24]	; (800b354 <tcp_process+0x294>)
 800b33c:	f006 f81c 	bl	8011378 <iprintf>
          pcb->unsent = rseg->next;
 800b340:	69fb      	ldr	r3, [r7, #28]
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	66da      	str	r2, [r3, #108]	; 0x6c
 800b348:	e01c      	b.n	800b384 <tcp_process+0x2c4>
 800b34a:	bf00      	nop
 800b34c:	08013aa0 	.word	0x08013aa0
 800b350:	08013cd8 	.word	0x08013cd8
 800b354:	08013aec 	.word	0x08013aec
 800b358:	2000bc70 	.word	0x2000bc70
 800b35c:	2000bc68 	.word	0x2000bc68
 800b360:	2000bc64 	.word	0x2000bc64
 800b364:	08013cf4 	.word	0x08013cf4
 800b368:	2000bc71 	.word	0x2000bc71
 800b36c:	2000bc2c 	.word	0x2000bc2c
 800b370:	2000bc54 	.word	0x2000bc54
 800b374:	08013d14 	.word	0x08013d14
 800b378:	08013d2c 	.word	0x08013d2c
        } else {
          pcb->unacked = rseg->next;
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800b384:	69f8      	ldr	r0, [r7, #28]
 800b386:	f7fe fd22 	bl	8009dce <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d104      	bne.n	800b39c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b398:	861a      	strh	r2, [r3, #48]	; 0x30
 800b39a:	e006      	b.n	800b3aa <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d00a      	beq.n	800b3ca <tcp_process+0x30a>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3ba:	687a      	ldr	r2, [r7, #4]
 800b3bc:	6910      	ldr	r0, [r2, #16]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	6879      	ldr	r1, [r7, #4]
 800b3c2:	4798      	blx	r3
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	76bb      	strb	r3, [r7, #26]
 800b3c8:	e001      	b.n	800b3ce <tcp_process+0x30e>
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b3ce:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b3d2:	f113 0f0d 	cmn.w	r3, #13
 800b3d6:	d102      	bne.n	800b3de <tcp_process+0x31e>
          return ERR_ABRT;
 800b3d8:	f06f 030c 	mvn.w	r3, #12
 800b3dc:	e250      	b.n	800b880 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	8b5b      	ldrh	r3, [r3, #26]
 800b3e2:	f043 0302 	orr.w	r3, r3, #2
 800b3e6:	b29a      	uxth	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b3ec:	e23a      	b.n	800b864 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b3ee:	4b98      	ldr	r3, [pc, #608]	; (800b650 <tcp_process+0x590>)
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	f003 0310 	and.w	r3, r3, #16
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	f000 8234 	beq.w	800b864 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3fc:	4b95      	ldr	r3, [pc, #596]	; (800b654 <tcp_process+0x594>)
 800b3fe:	6819      	ldr	r1, [r3, #0]
 800b400:	4b95      	ldr	r3, [pc, #596]	; (800b658 <tcp_process+0x598>)
 800b402:	881b      	ldrh	r3, [r3, #0]
 800b404:	461a      	mov	r2, r3
 800b406:	4b95      	ldr	r3, [pc, #596]	; (800b65c <tcp_process+0x59c>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b40c:	4b94      	ldr	r3, [pc, #592]	; (800b660 <tcp_process+0x5a0>)
 800b40e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b410:	885b      	ldrh	r3, [r3, #2]
 800b412:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b414:	4a92      	ldr	r2, [pc, #584]	; (800b660 <tcp_process+0x5a0>)
 800b416:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b418:	8812      	ldrh	r2, [r2, #0]
 800b41a:	b292      	uxth	r2, r2
 800b41c:	9202      	str	r2, [sp, #8]
 800b41e:	9301      	str	r3, [sp, #4]
 800b420:	4b90      	ldr	r3, [pc, #576]	; (800b664 <tcp_process+0x5a4>)
 800b422:	9300      	str	r3, [sp, #0]
 800b424:	4b90      	ldr	r3, [pc, #576]	; (800b668 <tcp_process+0x5a8>)
 800b426:	4602      	mov	r2, r0
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f002 fc85 	bl	800dd38 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b434:	2b05      	cmp	r3, #5
 800b436:	f200 8215 	bhi.w	800b864 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2200      	movs	r2, #0
 800b43e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f002 fa4f 	bl	800d8e4 <tcp_rexmit_rto>
      break;
 800b446:	e20d      	b.n	800b864 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b448:	4b81      	ldr	r3, [pc, #516]	; (800b650 <tcp_process+0x590>)
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	f003 0310 	and.w	r3, r3, #16
 800b450:	2b00      	cmp	r3, #0
 800b452:	f000 80a1 	beq.w	800b598 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b456:	4b7f      	ldr	r3, [pc, #508]	; (800b654 <tcp_process+0x594>)
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b45e:	1ad3      	subs	r3, r2, r3
 800b460:	3b01      	subs	r3, #1
 800b462:	2b00      	cmp	r3, #0
 800b464:	db7e      	blt.n	800b564 <tcp_process+0x4a4>
 800b466:	4b7b      	ldr	r3, [pc, #492]	; (800b654 <tcp_process+0x594>)
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b46e:	1ad3      	subs	r3, r2, r3
 800b470:	2b00      	cmp	r3, #0
 800b472:	dc77      	bgt.n	800b564 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2204      	movs	r2, #4
 800b478:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d102      	bne.n	800b488 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b482:	23fa      	movs	r3, #250	; 0xfa
 800b484:	76bb      	strb	r3, [r7, #26]
 800b486:	e01d      	b.n	800b4c4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b48c:	699b      	ldr	r3, [r3, #24]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d106      	bne.n	800b4a0 <tcp_process+0x3e0>
 800b492:	4b76      	ldr	r3, [pc, #472]	; (800b66c <tcp_process+0x5ac>)
 800b494:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b498:	4975      	ldr	r1, [pc, #468]	; (800b670 <tcp_process+0x5b0>)
 800b49a:	4876      	ldr	r0, [pc, #472]	; (800b674 <tcp_process+0x5b4>)
 800b49c:	f005 ff6c 	bl	8011378 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4a4:	699b      	ldr	r3, [r3, #24]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d00a      	beq.n	800b4c0 <tcp_process+0x400>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4ae:	699b      	ldr	r3, [r3, #24]
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	6910      	ldr	r0, [r2, #16]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	6879      	ldr	r1, [r7, #4]
 800b4b8:	4798      	blx	r3
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	76bb      	strb	r3, [r7, #26]
 800b4be:	e001      	b.n	800b4c4 <tcp_process+0x404>
 800b4c0:	23f0      	movs	r3, #240	; 0xf0
 800b4c2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b4c4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d00a      	beq.n	800b4e2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b4cc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b4d0:	f113 0f0d 	cmn.w	r3, #13
 800b4d4:	d002      	beq.n	800b4dc <tcp_process+0x41c>
              tcp_abort(pcb);
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f7fd ff8e 	bl	80093f8 <tcp_abort>
            }
            return ERR_ABRT;
 800b4dc:	f06f 030c 	mvn.w	r3, #12
 800b4e0:	e1ce      	b.n	800b880 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 fae0 	bl	800baa8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b4e8:	4b63      	ldr	r3, [pc, #396]	; (800b678 <tcp_process+0x5b8>)
 800b4ea:	881b      	ldrh	r3, [r3, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d005      	beq.n	800b4fc <tcp_process+0x43c>
            recv_acked--;
 800b4f0:	4b61      	ldr	r3, [pc, #388]	; (800b678 <tcp_process+0x5b8>)
 800b4f2:	881b      	ldrh	r3, [r3, #0]
 800b4f4:	3b01      	subs	r3, #1
 800b4f6:	b29a      	uxth	r2, r3
 800b4f8:	4b5f      	ldr	r3, [pc, #380]	; (800b678 <tcp_process+0x5b8>)
 800b4fa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b500:	009a      	lsls	r2, r3, #2
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b506:	005b      	lsls	r3, r3, #1
 800b508:	f241 111c 	movw	r1, #4380	; 0x111c
 800b50c:	428b      	cmp	r3, r1
 800b50e:	bf38      	it	cc
 800b510:	460b      	movcc	r3, r1
 800b512:	429a      	cmp	r2, r3
 800b514:	d204      	bcs.n	800b520 <tcp_process+0x460>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	e00d      	b.n	800b53c <tcp_process+0x47c>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b524:	005b      	lsls	r3, r3, #1
 800b526:	f241 121c 	movw	r2, #4380	; 0x111c
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d904      	bls.n	800b538 <tcp_process+0x478>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b532:	005b      	lsls	r3, r3, #1
 800b534:	b29b      	uxth	r3, r3
 800b536:	e001      	b.n	800b53c <tcp_process+0x47c>
 800b538:	f241 131c 	movw	r3, #4380	; 0x111c
 800b53c:	687a      	ldr	r2, [r7, #4]
 800b53e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b542:	4b4e      	ldr	r3, [pc, #312]	; (800b67c <tcp_process+0x5bc>)
 800b544:	781b      	ldrb	r3, [r3, #0]
 800b546:	f003 0320 	and.w	r3, r3, #32
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d037      	beq.n	800b5be <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	8b5b      	ldrh	r3, [r3, #26]
 800b552:	f043 0302 	orr.w	r3, r3, #2
 800b556:	b29a      	uxth	r2, r3
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2207      	movs	r2, #7
 800b560:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b562:	e02c      	b.n	800b5be <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b564:	4b3b      	ldr	r3, [pc, #236]	; (800b654 <tcp_process+0x594>)
 800b566:	6819      	ldr	r1, [r3, #0]
 800b568:	4b3b      	ldr	r3, [pc, #236]	; (800b658 <tcp_process+0x598>)
 800b56a:	881b      	ldrh	r3, [r3, #0]
 800b56c:	461a      	mov	r2, r3
 800b56e:	4b3b      	ldr	r3, [pc, #236]	; (800b65c <tcp_process+0x59c>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b574:	4b3a      	ldr	r3, [pc, #232]	; (800b660 <tcp_process+0x5a0>)
 800b576:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b578:	885b      	ldrh	r3, [r3, #2]
 800b57a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b57c:	4a38      	ldr	r2, [pc, #224]	; (800b660 <tcp_process+0x5a0>)
 800b57e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b580:	8812      	ldrh	r2, [r2, #0]
 800b582:	b292      	uxth	r2, r2
 800b584:	9202      	str	r2, [sp, #8]
 800b586:	9301      	str	r3, [sp, #4]
 800b588:	4b36      	ldr	r3, [pc, #216]	; (800b664 <tcp_process+0x5a4>)
 800b58a:	9300      	str	r3, [sp, #0]
 800b58c:	4b36      	ldr	r3, [pc, #216]	; (800b668 <tcp_process+0x5a8>)
 800b58e:	4602      	mov	r2, r0
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f002 fbd1 	bl	800dd38 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b596:	e167      	b.n	800b868 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b598:	4b2d      	ldr	r3, [pc, #180]	; (800b650 <tcp_process+0x590>)
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	f003 0302 	and.w	r3, r3, #2
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	f000 8161 	beq.w	800b868 <tcp_process+0x7a8>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5aa:	1e5a      	subs	r2, r3, #1
 800b5ac:	4b2b      	ldr	r3, [pc, #172]	; (800b65c <tcp_process+0x59c>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	f040 8159 	bne.w	800b868 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f002 f9b6 	bl	800d928 <tcp_rexmit>
      break;
 800b5bc:	e154      	b.n	800b868 <tcp_process+0x7a8>
 800b5be:	e153      	b.n	800b868 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 fa71 	bl	800baa8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b5c6:	4b2d      	ldr	r3, [pc, #180]	; (800b67c <tcp_process+0x5bc>)
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	f003 0320 	and.w	r3, r3, #32
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f000 814c 	beq.w	800b86c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	8b5b      	ldrh	r3, [r3, #26]
 800b5d8:	f043 0302 	orr.w	r3, r3, #2
 800b5dc:	b29a      	uxth	r2, r3
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2207      	movs	r2, #7
 800b5e6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b5e8:	e140      	b.n	800b86c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 fa5c 	bl	800baa8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b5f0:	4b22      	ldr	r3, [pc, #136]	; (800b67c <tcp_process+0x5bc>)
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	f003 0320 	and.w	r3, r3, #32
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d071      	beq.n	800b6e0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b5fc:	4b14      	ldr	r3, [pc, #80]	; (800b650 <tcp_process+0x590>)
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	f003 0310 	and.w	r3, r3, #16
 800b604:	2b00      	cmp	r3, #0
 800b606:	d060      	beq.n	800b6ca <tcp_process+0x60a>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b60c:	4b11      	ldr	r3, [pc, #68]	; (800b654 <tcp_process+0x594>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	429a      	cmp	r2, r3
 800b612:	d15a      	bne.n	800b6ca <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d156      	bne.n	800b6ca <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	8b5b      	ldrh	r3, [r3, #26]
 800b620:	f043 0302 	orr.w	r3, r3, #2
 800b624:	b29a      	uxth	r2, r3
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f7fe fdbc 	bl	800a1a8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b630:	4b13      	ldr	r3, [pc, #76]	; (800b680 <tcp_process+0x5c0>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	429a      	cmp	r2, r3
 800b638:	d105      	bne.n	800b646 <tcp_process+0x586>
 800b63a:	4b11      	ldr	r3, [pc, #68]	; (800b680 <tcp_process+0x5c0>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	4a0f      	ldr	r2, [pc, #60]	; (800b680 <tcp_process+0x5c0>)
 800b642:	6013      	str	r3, [r2, #0]
 800b644:	e02e      	b.n	800b6a4 <tcp_process+0x5e4>
 800b646:	4b0e      	ldr	r3, [pc, #56]	; (800b680 <tcp_process+0x5c0>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	617b      	str	r3, [r7, #20]
 800b64c:	e027      	b.n	800b69e <tcp_process+0x5de>
 800b64e:	bf00      	nop
 800b650:	2000bc70 	.word	0x2000bc70
 800b654:	2000bc68 	.word	0x2000bc68
 800b658:	2000bc6e 	.word	0x2000bc6e
 800b65c:	2000bc64 	.word	0x2000bc64
 800b660:	2000bc54 	.word	0x2000bc54
 800b664:	2000650c 	.word	0x2000650c
 800b668:	20006510 	.word	0x20006510
 800b66c:	08013aa0 	.word	0x08013aa0
 800b670:	08013d40 	.word	0x08013d40
 800b674:	08013aec 	.word	0x08013aec
 800b678:	2000bc6c 	.word	0x2000bc6c
 800b67c:	2000bc71 	.word	0x2000bc71
 800b680:	2000bc38 	.word	0x2000bc38
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d104      	bne.n	800b698 <tcp_process+0x5d8>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	68da      	ldr	r2, [r3, #12]
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	60da      	str	r2, [r3, #12]
 800b696:	e005      	b.n	800b6a4 <tcp_process+0x5e4>
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	617b      	str	r3, [r7, #20]
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d1ef      	bne.n	800b684 <tcp_process+0x5c4>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	60da      	str	r2, [r3, #12]
 800b6aa:	4b77      	ldr	r3, [pc, #476]	; (800b888 <tcp_process+0x7c8>)
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	220a      	movs	r2, #10
 800b6b4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b6b6:	4b75      	ldr	r3, [pc, #468]	; (800b88c <tcp_process+0x7cc>)
 800b6b8:	681a      	ldr	r2, [r3, #0]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	60da      	str	r2, [r3, #12]
 800b6be:	4a73      	ldr	r2, [pc, #460]	; (800b88c <tcp_process+0x7cc>)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6013      	str	r3, [r2, #0]
 800b6c4:	f002 fcfa 	bl	800e0bc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b6c8:	e0d2      	b.n	800b870 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	8b5b      	ldrh	r3, [r3, #26]
 800b6ce:	f043 0302 	orr.w	r3, r3, #2
 800b6d2:	b29a      	uxth	r2, r3
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2208      	movs	r2, #8
 800b6dc:	751a      	strb	r2, [r3, #20]
      break;
 800b6de:	e0c7      	b.n	800b870 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b6e0:	4b6b      	ldr	r3, [pc, #428]	; (800b890 <tcp_process+0x7d0>)
 800b6e2:	781b      	ldrb	r3, [r3, #0]
 800b6e4:	f003 0310 	and.w	r3, r3, #16
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	f000 80c1 	beq.w	800b870 <tcp_process+0x7b0>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b6f2:	4b68      	ldr	r3, [pc, #416]	; (800b894 <tcp_process+0x7d4>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	f040 80ba 	bne.w	800b870 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b700:	2b00      	cmp	r3, #0
 800b702:	f040 80b5 	bne.w	800b870 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2206      	movs	r2, #6
 800b70a:	751a      	strb	r2, [r3, #20]
      break;
 800b70c:	e0b0      	b.n	800b870 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 f9ca 	bl	800baa8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b714:	4b60      	ldr	r3, [pc, #384]	; (800b898 <tcp_process+0x7d8>)
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	f003 0320 	and.w	r3, r3, #32
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	f000 80a9 	beq.w	800b874 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	8b5b      	ldrh	r3, [r3, #26]
 800b726:	f043 0302 	orr.w	r3, r3, #2
 800b72a:	b29a      	uxth	r2, r3
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f7fe fd39 	bl	800a1a8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b736:	4b59      	ldr	r3, [pc, #356]	; (800b89c <tcp_process+0x7dc>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	687a      	ldr	r2, [r7, #4]
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d105      	bne.n	800b74c <tcp_process+0x68c>
 800b740:	4b56      	ldr	r3, [pc, #344]	; (800b89c <tcp_process+0x7dc>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	68db      	ldr	r3, [r3, #12]
 800b746:	4a55      	ldr	r2, [pc, #340]	; (800b89c <tcp_process+0x7dc>)
 800b748:	6013      	str	r3, [r2, #0]
 800b74a:	e013      	b.n	800b774 <tcp_process+0x6b4>
 800b74c:	4b53      	ldr	r3, [pc, #332]	; (800b89c <tcp_process+0x7dc>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	613b      	str	r3, [r7, #16]
 800b752:	e00c      	b.n	800b76e <tcp_process+0x6ae>
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d104      	bne.n	800b768 <tcp_process+0x6a8>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	68da      	ldr	r2, [r3, #12]
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	60da      	str	r2, [r3, #12]
 800b766:	e005      	b.n	800b774 <tcp_process+0x6b4>
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	68db      	ldr	r3, [r3, #12]
 800b76c:	613b      	str	r3, [r7, #16]
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d1ef      	bne.n	800b754 <tcp_process+0x694>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	60da      	str	r2, [r3, #12]
 800b77a:	4b43      	ldr	r3, [pc, #268]	; (800b888 <tcp_process+0x7c8>)
 800b77c:	2201      	movs	r2, #1
 800b77e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	220a      	movs	r2, #10
 800b784:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b786:	4b41      	ldr	r3, [pc, #260]	; (800b88c <tcp_process+0x7cc>)
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	60da      	str	r2, [r3, #12]
 800b78e:	4a3f      	ldr	r2, [pc, #252]	; (800b88c <tcp_process+0x7cc>)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6013      	str	r3, [r2, #0]
 800b794:	f002 fc92 	bl	800e0bc <tcp_timer_needed>
      }
      break;
 800b798:	e06c      	b.n	800b874 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 f984 	bl	800baa8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b7a0:	4b3b      	ldr	r3, [pc, #236]	; (800b890 <tcp_process+0x7d0>)
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	f003 0310 	and.w	r3, r3, #16
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d065      	beq.n	800b878 <tcp_process+0x7b8>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b7b0:	4b38      	ldr	r3, [pc, #224]	; (800b894 <tcp_process+0x7d4>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d15f      	bne.n	800b878 <tcp_process+0x7b8>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d15b      	bne.n	800b878 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f7fe fcf1 	bl	800a1a8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b7c6:	4b35      	ldr	r3, [pc, #212]	; (800b89c <tcp_process+0x7dc>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d105      	bne.n	800b7dc <tcp_process+0x71c>
 800b7d0:	4b32      	ldr	r3, [pc, #200]	; (800b89c <tcp_process+0x7dc>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	68db      	ldr	r3, [r3, #12]
 800b7d6:	4a31      	ldr	r2, [pc, #196]	; (800b89c <tcp_process+0x7dc>)
 800b7d8:	6013      	str	r3, [r2, #0]
 800b7da:	e013      	b.n	800b804 <tcp_process+0x744>
 800b7dc:	4b2f      	ldr	r3, [pc, #188]	; (800b89c <tcp_process+0x7dc>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	60fb      	str	r3, [r7, #12]
 800b7e2:	e00c      	b.n	800b7fe <tcp_process+0x73e>
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	687a      	ldr	r2, [r7, #4]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d104      	bne.n	800b7f8 <tcp_process+0x738>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	68da      	ldr	r2, [r3, #12]
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	60da      	str	r2, [r3, #12]
 800b7f6:	e005      	b.n	800b804 <tcp_process+0x744>
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	60fb      	str	r3, [r7, #12]
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d1ef      	bne.n	800b7e4 <tcp_process+0x724>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2200      	movs	r2, #0
 800b808:	60da      	str	r2, [r3, #12]
 800b80a:	4b1f      	ldr	r3, [pc, #124]	; (800b888 <tcp_process+0x7c8>)
 800b80c:	2201      	movs	r2, #1
 800b80e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	220a      	movs	r2, #10
 800b814:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b816:	4b1d      	ldr	r3, [pc, #116]	; (800b88c <tcp_process+0x7cc>)
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	60da      	str	r2, [r3, #12]
 800b81e:	4a1b      	ldr	r2, [pc, #108]	; (800b88c <tcp_process+0x7cc>)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6013      	str	r3, [r2, #0]
 800b824:	f002 fc4a 	bl	800e0bc <tcp_timer_needed>
      }
      break;
 800b828:	e026      	b.n	800b878 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 f93c 	bl	800baa8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b830:	4b17      	ldr	r3, [pc, #92]	; (800b890 <tcp_process+0x7d0>)
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	f003 0310 	and.w	r3, r3, #16
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d01f      	beq.n	800b87c <tcp_process+0x7bc>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b840:	4b14      	ldr	r3, [pc, #80]	; (800b894 <tcp_process+0x7d4>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	429a      	cmp	r2, r3
 800b846:	d119      	bne.n	800b87c <tcp_process+0x7bc>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d115      	bne.n	800b87c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b850:	4b11      	ldr	r3, [pc, #68]	; (800b898 <tcp_process+0x7d8>)
 800b852:	781b      	ldrb	r3, [r3, #0]
 800b854:	f043 0310 	orr.w	r3, r3, #16
 800b858:	b2da      	uxtb	r2, r3
 800b85a:	4b0f      	ldr	r3, [pc, #60]	; (800b898 <tcp_process+0x7d8>)
 800b85c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b85e:	e00d      	b.n	800b87c <tcp_process+0x7bc>
    default:
      break;
 800b860:	bf00      	nop
 800b862:	e00c      	b.n	800b87e <tcp_process+0x7be>
      break;
 800b864:	bf00      	nop
 800b866:	e00a      	b.n	800b87e <tcp_process+0x7be>
      break;
 800b868:	bf00      	nop
 800b86a:	e008      	b.n	800b87e <tcp_process+0x7be>
      break;
 800b86c:	bf00      	nop
 800b86e:	e006      	b.n	800b87e <tcp_process+0x7be>
      break;
 800b870:	bf00      	nop
 800b872:	e004      	b.n	800b87e <tcp_process+0x7be>
      break;
 800b874:	bf00      	nop
 800b876:	e002      	b.n	800b87e <tcp_process+0x7be>
      break;
 800b878:	bf00      	nop
 800b87a:	e000      	b.n	800b87e <tcp_process+0x7be>
      break;
 800b87c:	bf00      	nop
  }
  return ERR_OK;
 800b87e:	2300      	movs	r3, #0
}
 800b880:	4618      	mov	r0, r3
 800b882:	3724      	adds	r7, #36	; 0x24
 800b884:	46bd      	mov	sp, r7
 800b886:	bd90      	pop	{r4, r7, pc}
 800b888:	2000bc40 	.word	0x2000bc40
 800b88c:	2000bc3c 	.word	0x2000bc3c
 800b890:	2000bc70 	.word	0x2000bc70
 800b894:	2000bc68 	.word	0x2000bc68
 800b898:	2000bc71 	.word	0x2000bc71
 800b89c:	2000bc38 	.word	0x2000bc38

0800b8a0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b8a0:	b590      	push	{r4, r7, lr}
 800b8a2:	b085      	sub	sp, #20
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d106      	bne.n	800b8be <tcp_oos_insert_segment+0x1e>
 800b8b0:	4b3b      	ldr	r3, [pc, #236]	; (800b9a0 <tcp_oos_insert_segment+0x100>)
 800b8b2:	f240 421f 	movw	r2, #1055	; 0x41f
 800b8b6:	493b      	ldr	r1, [pc, #236]	; (800b9a4 <tcp_oos_insert_segment+0x104>)
 800b8b8:	483b      	ldr	r0, [pc, #236]	; (800b9a8 <tcp_oos_insert_segment+0x108>)
 800b8ba:	f005 fd5d 	bl	8011378 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	899b      	ldrh	r3, [r3, #12]
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7fb fc0e 	bl	80070e8 <lwip_htons>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	b2db      	uxtb	r3, r3
 800b8d0:	f003 0301 	and.w	r3, r3, #1
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d028      	beq.n	800b92a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b8d8:	6838      	ldr	r0, [r7, #0]
 800b8da:	f7fe fa63 	bl	8009da4 <tcp_segs_free>
    next = NULL;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	603b      	str	r3, [r7, #0]
 800b8e2:	e056      	b.n	800b992 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	68db      	ldr	r3, [r3, #12]
 800b8e8:	899b      	ldrh	r3, [r3, #12]
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7fb fbfb 	bl	80070e8 <lwip_htons>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	f003 0301 	and.w	r3, r3, #1
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00d      	beq.n	800b91a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	68db      	ldr	r3, [r3, #12]
 800b902:	899b      	ldrh	r3, [r3, #12]
 800b904:	b29c      	uxth	r4, r3
 800b906:	2001      	movs	r0, #1
 800b908:	f7fb fbee 	bl	80070e8 <lwip_htons>
 800b90c:	4603      	mov	r3, r0
 800b90e:	461a      	mov	r2, r3
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	68db      	ldr	r3, [r3, #12]
 800b914:	4322      	orrs	r2, r4
 800b916:	b292      	uxth	r2, r2
 800b918:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b924:	68f8      	ldr	r0, [r7, #12]
 800b926:	f7fe fa52 	bl	8009dce <tcp_seg_free>
    while (next &&
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d00e      	beq.n	800b94e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	891b      	ldrh	r3, [r3, #8]
 800b934:	461a      	mov	r2, r3
 800b936:	4b1d      	ldr	r3, [pc, #116]	; (800b9ac <tcp_oos_insert_segment+0x10c>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	441a      	add	r2, r3
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	6839      	ldr	r1, [r7, #0]
 800b944:	8909      	ldrh	r1, [r1, #8]
 800b946:	440b      	add	r3, r1
 800b948:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	daca      	bge.n	800b8e4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d01e      	beq.n	800b992 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	891b      	ldrh	r3, [r3, #8]
 800b958:	461a      	mov	r2, r3
 800b95a:	4b14      	ldr	r3, [pc, #80]	; (800b9ac <tcp_oos_insert_segment+0x10c>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	441a      	add	r2, r3
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b968:	2b00      	cmp	r3, #0
 800b96a:	dd12      	ble.n	800b992 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	b29a      	uxth	r2, r3
 800b974:	4b0d      	ldr	r3, [pc, #52]	; (800b9ac <tcp_oos_insert_segment+0x10c>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	b29b      	uxth	r3, r3
 800b97a:	1ad3      	subs	r3, r2, r3
 800b97c:	b29a      	uxth	r2, r3
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	685a      	ldr	r2, [r3, #4]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	891b      	ldrh	r3, [r3, #8]
 800b98a:	4619      	mov	r1, r3
 800b98c:	4610      	mov	r0, r2
 800b98e:	f7fc fd83 	bl	8008498 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	683a      	ldr	r2, [r7, #0]
 800b996:	601a      	str	r2, [r3, #0]
}
 800b998:	bf00      	nop
 800b99a:	3714      	adds	r7, #20
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd90      	pop	{r4, r7, pc}
 800b9a0:	08013aa0 	.word	0x08013aa0
 800b9a4:	08013d60 	.word	0x08013d60
 800b9a8:	08013aec 	.word	0x08013aec
 800b9ac:	2000bc64 	.word	0x2000bc64

0800b9b0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b9b0:	b5b0      	push	{r4, r5, r7, lr}
 800b9b2:	b086      	sub	sp, #24
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	60b9      	str	r1, [r7, #8]
 800b9ba:	607a      	str	r2, [r7, #4]
 800b9bc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b9be:	e03e      	b.n	800ba3e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7fc ff70 	bl	80088b4 <pbuf_clen>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b9de:	8a7a      	ldrh	r2, [r7, #18]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d906      	bls.n	800b9f2 <tcp_free_acked_segments+0x42>
 800b9e4:	4b2a      	ldr	r3, [pc, #168]	; (800ba90 <tcp_free_acked_segments+0xe0>)
 800b9e6:	f240 4257 	movw	r2, #1111	; 0x457
 800b9ea:	492a      	ldr	r1, [pc, #168]	; (800ba94 <tcp_free_acked_segments+0xe4>)
 800b9ec:	482a      	ldr	r0, [pc, #168]	; (800ba98 <tcp_free_acked_segments+0xe8>)
 800b9ee:	f005 fcc3 	bl	8011378 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800b9f8:	8a7b      	ldrh	r3, [r7, #18]
 800b9fa:	1ad3      	subs	r3, r2, r3
 800b9fc:	b29a      	uxth	r2, r3
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	891a      	ldrh	r2, [r3, #8]
 800ba08:	4b24      	ldr	r3, [pc, #144]	; (800ba9c <tcp_free_acked_segments+0xec>)
 800ba0a:	881b      	ldrh	r3, [r3, #0]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	b29a      	uxth	r2, r3
 800ba10:	4b22      	ldr	r3, [pc, #136]	; (800ba9c <tcp_free_acked_segments+0xec>)
 800ba12:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ba14:	6978      	ldr	r0, [r7, #20]
 800ba16:	f7fe f9da 	bl	8009dce <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d00c      	beq.n	800ba3e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d109      	bne.n	800ba3e <tcp_free_acked_segments+0x8e>
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d106      	bne.n	800ba3e <tcp_free_acked_segments+0x8e>
 800ba30:	4b17      	ldr	r3, [pc, #92]	; (800ba90 <tcp_free_acked_segments+0xe0>)
 800ba32:	f240 4261 	movw	r2, #1121	; 0x461
 800ba36:	491a      	ldr	r1, [pc, #104]	; (800baa0 <tcp_free_acked_segments+0xf0>)
 800ba38:	4817      	ldr	r0, [pc, #92]	; (800ba98 <tcp_free_acked_segments+0xe8>)
 800ba3a:	f005 fc9d 	bl	8011378 <iprintf>
  while (seg_list != NULL &&
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d020      	beq.n	800ba86 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	68db      	ldr	r3, [r3, #12]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7fb fb61 	bl	8007112 <lwip_htonl>
 800ba50:	4604      	mov	r4, r0
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	891b      	ldrh	r3, [r3, #8]
 800ba56:	461d      	mov	r5, r3
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	899b      	ldrh	r3, [r3, #12]
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	4618      	mov	r0, r3
 800ba62:	f7fb fb41 	bl	80070e8 <lwip_htons>
 800ba66:	4603      	mov	r3, r0
 800ba68:	b2db      	uxtb	r3, r3
 800ba6a:	f003 0303 	and.w	r3, r3, #3
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d001      	beq.n	800ba76 <tcp_free_acked_segments+0xc6>
 800ba72:	2301      	movs	r3, #1
 800ba74:	e000      	b.n	800ba78 <tcp_free_acked_segments+0xc8>
 800ba76:	2300      	movs	r3, #0
 800ba78:	442b      	add	r3, r5
 800ba7a:	18e2      	adds	r2, r4, r3
 800ba7c:	4b09      	ldr	r3, [pc, #36]	; (800baa4 <tcp_free_acked_segments+0xf4>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	dd9c      	ble.n	800b9c0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ba86:	68bb      	ldr	r3, [r7, #8]
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3718      	adds	r7, #24
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bdb0      	pop	{r4, r5, r7, pc}
 800ba90:	08013aa0 	.word	0x08013aa0
 800ba94:	08013d88 	.word	0x08013d88
 800ba98:	08013aec 	.word	0x08013aec
 800ba9c:	2000bc6c 	.word	0x2000bc6c
 800baa0:	08013db0 	.word	0x08013db0
 800baa4:	2000bc68 	.word	0x2000bc68

0800baa8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800baa8:	b5b0      	push	{r4, r5, r7, lr}
 800baaa:	b094      	sub	sp, #80	; 0x50
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800bab0:	2300      	movs	r3, #0
 800bab2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d106      	bne.n	800bac8 <tcp_receive+0x20>
 800baba:	4b91      	ldr	r3, [pc, #580]	; (800bd00 <tcp_receive+0x258>)
 800babc:	f240 427b 	movw	r2, #1147	; 0x47b
 800bac0:	4990      	ldr	r1, [pc, #576]	; (800bd04 <tcp_receive+0x25c>)
 800bac2:	4891      	ldr	r0, [pc, #580]	; (800bd08 <tcp_receive+0x260>)
 800bac4:	f005 fc58 	bl	8011378 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	7d1b      	ldrb	r3, [r3, #20]
 800bacc:	2b03      	cmp	r3, #3
 800bace:	d806      	bhi.n	800bade <tcp_receive+0x36>
 800bad0:	4b8b      	ldr	r3, [pc, #556]	; (800bd00 <tcp_receive+0x258>)
 800bad2:	f240 427c 	movw	r2, #1148	; 0x47c
 800bad6:	498d      	ldr	r1, [pc, #564]	; (800bd0c <tcp_receive+0x264>)
 800bad8:	488b      	ldr	r0, [pc, #556]	; (800bd08 <tcp_receive+0x260>)
 800bada:	f005 fc4d 	bl	8011378 <iprintf>

  if (flags & TCP_ACK) {
 800bade:	4b8c      	ldr	r3, [pc, #560]	; (800bd10 <tcp_receive+0x268>)
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	f003 0310 	and.w	r3, r3, #16
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	f000 8264 	beq.w	800bfb4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800baf2:	461a      	mov	r2, r3
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baf8:	4413      	add	r3, r2
 800bafa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bb00:	4b84      	ldr	r3, [pc, #528]	; (800bd14 <tcp_receive+0x26c>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	1ad3      	subs	r3, r2, r3
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	db1b      	blt.n	800bb42 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bb0e:	4b81      	ldr	r3, [pc, #516]	; (800bd14 <tcp_receive+0x26c>)
 800bb10:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d106      	bne.n	800bb24 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bb1a:	4b7f      	ldr	r3, [pc, #508]	; (800bd18 <tcp_receive+0x270>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	1ad3      	subs	r3, r2, r3
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	db0e      	blt.n	800bb42 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bb28:	4b7b      	ldr	r3, [pc, #492]	; (800bd18 <tcp_receive+0x270>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d125      	bne.n	800bb7c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bb30:	4b7a      	ldr	r3, [pc, #488]	; (800bd1c <tcp_receive+0x274>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	89db      	ldrh	r3, [r3, #14]
 800bb36:	b29a      	uxth	r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d91c      	bls.n	800bb7c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bb42:	4b76      	ldr	r3, [pc, #472]	; (800bd1c <tcp_receive+0x274>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	89db      	ldrh	r3, [r3, #14]
 800bb48:	b29a      	uxth	r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d205      	bcs.n	800bb6c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800bb6c:	4b69      	ldr	r3, [pc, #420]	; (800bd14 <tcp_receive+0x26c>)
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800bb74:	4b68      	ldr	r3, [pc, #416]	; (800bd18 <tcp_receive+0x270>)
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bb7c:	4b66      	ldr	r3, [pc, #408]	; (800bd18 <tcp_receive+0x270>)
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb84:	1ad3      	subs	r3, r2, r3
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	dc58      	bgt.n	800bc3c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800bb8a:	4b65      	ldr	r3, [pc, #404]	; (800bd20 <tcp_receive+0x278>)
 800bb8c:	881b      	ldrh	r3, [r3, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d14b      	bne.n	800bc2a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800bb9c:	4413      	add	r3, r2
 800bb9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d142      	bne.n	800bc2a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	db3d      	blt.n	800bc2a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbb2:	4b59      	ldr	r3, [pc, #356]	; (800bd18 <tcp_receive+0x270>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d137      	bne.n	800bc2a <tcp_receive+0x182>
              found_dupack = 1;
 800bbba:	2301      	movs	r3, #1
 800bbbc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bbc4:	2bff      	cmp	r3, #255	; 0xff
 800bbc6:	d007      	beq.n	800bbd8 <tcp_receive+0x130>
                ++pcb->dupacks;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bbce:	3301      	adds	r3, #1
 800bbd0:	b2da      	uxtb	r2, r3
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bbde:	2b03      	cmp	r3, #3
 800bbe0:	d91b      	bls.n	800bc1a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbec:	4413      	add	r3, r2
 800bbee:	b29a      	uxth	r2, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d30a      	bcc.n	800bc10 <tcp_receive+0x168>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc04:	4413      	add	r3, r2
 800bc06:	b29a      	uxth	r2, r3
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bc0e:	e004      	b.n	800bc1a <tcp_receive+0x172>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc16:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bc20:	2b02      	cmp	r3, #2
 800bc22:	d902      	bls.n	800bc2a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f001 feeb 	bl	800da00 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800bc2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	f040 8161 	bne.w	800bef4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2200      	movs	r2, #0
 800bc36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bc3a:	e15b      	b.n	800bef4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bc3c:	4b36      	ldr	r3, [pc, #216]	; (800bd18 <tcp_receive+0x270>)
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc44:	1ad3      	subs	r3, r2, r3
 800bc46:	3b01      	subs	r3, #1
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	f2c0 814e 	blt.w	800beea <tcp_receive+0x442>
 800bc4e:	4b32      	ldr	r3, [pc, #200]	; (800bd18 <tcp_receive+0x270>)
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc56:	1ad3      	subs	r3, r2, r3
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	f300 8146 	bgt.w	800beea <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	8b5b      	ldrh	r3, [r3, #26]
 800bc62:	f003 0304 	and.w	r3, r3, #4
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d010      	beq.n	800bc8c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	8b5b      	ldrh	r3, [r3, #26]
 800bc6e:	f023 0304 	bic.w	r3, r3, #4
 800bc72:	b29a      	uxth	r2, r3
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2200      	movs	r2, #0
 800bc88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bc9a:	10db      	asrs	r3, r3, #3
 800bc9c:	b21b      	sxth	r3, r3
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	4413      	add	r3, r2
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	b21a      	sxth	r2, r3
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800bcb4:	4b18      	ldr	r3, [pc, #96]	; (800bd18 <tcp_receive+0x270>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	b29a      	uxth	r2, r3
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcbe:	b29b      	uxth	r3, r3
 800bcc0:	1ad3      	subs	r3, r2, r3
 800bcc2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800bccc:	4b12      	ldr	r3, [pc, #72]	; (800bd18 <tcp_receive+0x270>)
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	7d1b      	ldrb	r3, [r3, #20]
 800bcd8:	2b03      	cmp	r3, #3
 800bcda:	f240 8097 	bls.w	800be0c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d245      	bcs.n	800bd7a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	8b5b      	ldrh	r3, [r3, #26]
 800bcf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d014      	beq.n	800bd24 <tcp_receive+0x27c>
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	e013      	b.n	800bd26 <tcp_receive+0x27e>
 800bcfe:	bf00      	nop
 800bd00:	08013aa0 	.word	0x08013aa0
 800bd04:	08013dd0 	.word	0x08013dd0
 800bd08:	08013aec 	.word	0x08013aec
 800bd0c:	08013dec 	.word	0x08013dec
 800bd10:	2000bc70 	.word	0x2000bc70
 800bd14:	2000bc64 	.word	0x2000bc64
 800bd18:	2000bc68 	.word	0x2000bc68
 800bd1c:	2000bc54 	.word	0x2000bc54
 800bd20:	2000bc6e 	.word	0x2000bc6e
 800bd24:	2302      	movs	r3, #2
 800bd26:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800bd2a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800bd2e:	b29a      	uxth	r2, r3
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bd34:	fb12 f303 	smulbb	r3, r2, r3
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	bf28      	it	cs
 800bd40:	4613      	movcs	r3, r2
 800bd42:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bd4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bd4c:	4413      	add	r3, r2
 800bd4e:	b29a      	uxth	r2, r3
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d309      	bcc.n	800bd6e <tcp_receive+0x2c6>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bd60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bd62:	4413      	add	r3, r2
 800bd64:	b29a      	uxth	r2, r3
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bd6c:	e04e      	b.n	800be0c <tcp_receive+0x364>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd74:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bd78:	e048      	b.n	800be0c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bd80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd82:	4413      	add	r3, r2
 800bd84:	b29a      	uxth	r2, r3
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d309      	bcc.n	800bda4 <tcp_receive+0x2fc>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bd96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bd98:	4413      	add	r3, r2
 800bd9a:	b29a      	uxth	r2, r3
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bda2:	e004      	b.n	800bdae <tcp_receive+0x306>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdaa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d326      	bcc.n	800be0c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bdca:	1ad3      	subs	r3, r2, r3
 800bdcc:	b29a      	uxth	r2, r3
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bdde:	4413      	add	r3, r2
 800bde0:	b29a      	uxth	r2, r3
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d30a      	bcc.n	800be02 <tcp_receive+0x35a>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bdf6:	4413      	add	r3, r2
 800bdf8:	b29a      	uxth	r2, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800be00:	e004      	b.n	800be0c <tcp_receive+0x364>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be08:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be14:	4a98      	ldr	r2, [pc, #608]	; (800c078 <tcp_receive+0x5d0>)
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f7ff fdca 	bl	800b9b0 <tcp_free_acked_segments>
 800be1c:	4602      	mov	r2, r0
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be2a:	4a94      	ldr	r2, [pc, #592]	; (800c07c <tcp_receive+0x5d4>)
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f7ff fdbf 	bl	800b9b0 <tcp_free_acked_segments>
 800be32:	4602      	mov	r2, r0
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d104      	bne.n	800be4a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be46:	861a      	strh	r2, [r3, #48]	; 0x30
 800be48:	e002      	b.n	800be50 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2200      	movs	r2, #0
 800be54:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d103      	bne.n	800be66 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800be6c:	4b84      	ldr	r3, [pc, #528]	; (800c080 <tcp_receive+0x5d8>)
 800be6e:	881b      	ldrh	r3, [r3, #0]
 800be70:	4413      	add	r3, r2
 800be72:	b29a      	uxth	r2, r3
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	8b5b      	ldrh	r3, [r3, #26]
 800be7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be82:	2b00      	cmp	r3, #0
 800be84:	d035      	beq.n	800bef2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d118      	bne.n	800bec0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be92:	2b00      	cmp	r3, #0
 800be94:	d00c      	beq.n	800beb0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be9e:	68db      	ldr	r3, [r3, #12]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7fb f935 	bl	8007112 <lwip_htonl>
 800bea8:	4603      	mov	r3, r0
 800beaa:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800beac:	2b00      	cmp	r3, #0
 800beae:	dc20      	bgt.n	800bef2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	8b5b      	ldrh	r3, [r3, #26]
 800beb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800beb8:	b29a      	uxth	r2, r3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bebe:	e018      	b.n	800bef2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bec8:	68db      	ldr	r3, [r3, #12]
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	4618      	mov	r0, r3
 800bece:	f7fb f920 	bl	8007112 <lwip_htonl>
 800bed2:	4603      	mov	r3, r0
 800bed4:	1ae3      	subs	r3, r4, r3
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	dc0b      	bgt.n	800bef2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	8b5b      	ldrh	r3, [r3, #26]
 800bede:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bee2:	b29a      	uxth	r2, r3
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bee8:	e003      	b.n	800bef2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f001 ff76 	bl	800dddc <tcp_send_empty_ack>
 800bef0:	e000      	b.n	800bef4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bef2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d05b      	beq.n	800bfb4 <tcp_receive+0x50c>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf00:	4b60      	ldr	r3, [pc, #384]	; (800c084 <tcp_receive+0x5dc>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	1ad3      	subs	r3, r2, r3
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	da54      	bge.n	800bfb4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800bf0a:	4b5f      	ldr	r3, [pc, #380]	; (800c088 <tcp_receive+0x5e0>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	b29a      	uxth	r2, r3
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	1ad3      	subs	r3, r2, r3
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800bf1e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bf28:	10db      	asrs	r3, r3, #3
 800bf2a:	b21b      	sxth	r3, r3
 800bf2c:	b29b      	uxth	r3, r3
 800bf2e:	1ad3      	subs	r3, r2, r3
 800bf30:	b29b      	uxth	r3, r3
 800bf32:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bf3c:	b29a      	uxth	r2, r3
 800bf3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf42:	4413      	add	r3, r2
 800bf44:	b29b      	uxth	r3, r3
 800bf46:	b21a      	sxth	r2, r3
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800bf4c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	da05      	bge.n	800bf60 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800bf54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf58:	425b      	negs	r3, r3
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800bf60:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bf6a:	109b      	asrs	r3, r3, #2
 800bf6c:	b21b      	sxth	r3, r3
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	1ad3      	subs	r3, r2, r3
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bf7e:	b29a      	uxth	r2, r3
 800bf80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf84:	4413      	add	r3, r2
 800bf86:	b29b      	uxth	r3, r3
 800bf88:	b21a      	sxth	r2, r3
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bf94:	10db      	asrs	r3, r3, #3
 800bf96:	b21b      	sxth	r3, r3
 800bf98:	b29a      	uxth	r2, r3
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bfa0:	b29b      	uxth	r3, r3
 800bfa2:	4413      	add	r3, r2
 800bfa4:	b29b      	uxth	r3, r3
 800bfa6:	b21a      	sxth	r2, r3
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800bfb4:	4b35      	ldr	r3, [pc, #212]	; (800c08c <tcp_receive+0x5e4>)
 800bfb6:	881b      	ldrh	r3, [r3, #0]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f000 84e2 	beq.w	800c982 <tcp_receive+0xeda>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	7d1b      	ldrb	r3, [r3, #20]
 800bfc2:	2b06      	cmp	r3, #6
 800bfc4:	f200 84dd 	bhi.w	800c982 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfcc:	4b30      	ldr	r3, [pc, #192]	; (800c090 <tcp_receive+0x5e8>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	1ad3      	subs	r3, r2, r3
 800bfd2:	3b01      	subs	r3, #1
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	f2c0 808f 	blt.w	800c0f8 <tcp_receive+0x650>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfde:	4b2b      	ldr	r3, [pc, #172]	; (800c08c <tcp_receive+0x5e4>)
 800bfe0:	881b      	ldrh	r3, [r3, #0]
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	4b2a      	ldr	r3, [pc, #168]	; (800c090 <tcp_receive+0x5e8>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	440b      	add	r3, r1
 800bfea:	1ad3      	subs	r3, r2, r3
 800bfec:	3301      	adds	r3, #1
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	f300 8082 	bgt.w	800c0f8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800bff4:	4b27      	ldr	r3, [pc, #156]	; (800c094 <tcp_receive+0x5ec>)
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bffe:	4b24      	ldr	r3, [pc, #144]	; (800c090 <tcp_receive+0x5e8>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	1ad3      	subs	r3, r2, r3
 800c004:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c006:	4b23      	ldr	r3, [pc, #140]	; (800c094 <tcp_receive+0x5ec>)
 800c008:	685b      	ldr	r3, [r3, #4]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d106      	bne.n	800c01c <tcp_receive+0x574>
 800c00e:	4b22      	ldr	r3, [pc, #136]	; (800c098 <tcp_receive+0x5f0>)
 800c010:	f240 5294 	movw	r2, #1428	; 0x594
 800c014:	4921      	ldr	r1, [pc, #132]	; (800c09c <tcp_receive+0x5f4>)
 800c016:	4822      	ldr	r0, [pc, #136]	; (800c0a0 <tcp_receive+0x5f8>)
 800c018:	f005 f9ae 	bl	8011378 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c022:	4293      	cmp	r3, r2
 800c024:	d906      	bls.n	800c034 <tcp_receive+0x58c>
 800c026:	4b1c      	ldr	r3, [pc, #112]	; (800c098 <tcp_receive+0x5f0>)
 800c028:	f240 5295 	movw	r2, #1429	; 0x595
 800c02c:	491d      	ldr	r1, [pc, #116]	; (800c0a4 <tcp_receive+0x5fc>)
 800c02e:	481c      	ldr	r0, [pc, #112]	; (800c0a0 <tcp_receive+0x5f8>)
 800c030:	f005 f9a2 	bl	8011378 <iprintf>
      off = (u16_t)off32;
 800c034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c036:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c03a:	4b16      	ldr	r3, [pc, #88]	; (800c094 <tcp_receive+0x5ec>)
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	891b      	ldrh	r3, [r3, #8]
 800c040:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c044:	429a      	cmp	r2, r3
 800c046:	d906      	bls.n	800c056 <tcp_receive+0x5ae>
 800c048:	4b13      	ldr	r3, [pc, #76]	; (800c098 <tcp_receive+0x5f0>)
 800c04a:	f240 5297 	movw	r2, #1431	; 0x597
 800c04e:	4916      	ldr	r1, [pc, #88]	; (800c0a8 <tcp_receive+0x600>)
 800c050:	4813      	ldr	r0, [pc, #76]	; (800c0a0 <tcp_receive+0x5f8>)
 800c052:	f005 f991 	bl	8011378 <iprintf>
      inseg.len -= off;
 800c056:	4b0f      	ldr	r3, [pc, #60]	; (800c094 <tcp_receive+0x5ec>)
 800c058:	891a      	ldrh	r2, [r3, #8]
 800c05a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c05e:	1ad3      	subs	r3, r2, r3
 800c060:	b29a      	uxth	r2, r3
 800c062:	4b0c      	ldr	r3, [pc, #48]	; (800c094 <tcp_receive+0x5ec>)
 800c064:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c066:	4b0b      	ldr	r3, [pc, #44]	; (800c094 <tcp_receive+0x5ec>)
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	891a      	ldrh	r2, [r3, #8]
 800c06c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c070:	1ad3      	subs	r3, r2, r3
 800c072:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800c074:	e02a      	b.n	800c0cc <tcp_receive+0x624>
 800c076:	bf00      	nop
 800c078:	08013e08 	.word	0x08013e08
 800c07c:	08013e10 	.word	0x08013e10
 800c080:	2000bc6c 	.word	0x2000bc6c
 800c084:	2000bc68 	.word	0x2000bc68
 800c088:	2000bc2c 	.word	0x2000bc2c
 800c08c:	2000bc6e 	.word	0x2000bc6e
 800c090:	2000bc64 	.word	0x2000bc64
 800c094:	2000bc44 	.word	0x2000bc44
 800c098:	08013aa0 	.word	0x08013aa0
 800c09c:	08013e18 	.word	0x08013e18
 800c0a0:	08013aec 	.word	0x08013aec
 800c0a4:	08013e28 	.word	0x08013e28
 800c0a8:	08013e38 	.word	0x08013e38
        off -= p->len;
 800c0ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0ae:	895b      	ldrh	r3, [r3, #10]
 800c0b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c0b4:	1ad3      	subs	r3, r2, r3
 800c0b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c0ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0bc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c0be:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c0c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c0c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800c0cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0ce:	895b      	ldrh	r3, [r3, #10]
 800c0d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d8e9      	bhi.n	800c0ac <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c0d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c0dc:	4619      	mov	r1, r3
 800c0de:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c0e0:	f7fc fada 	bl	8008698 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e8:	4a91      	ldr	r2, [pc, #580]	; (800c330 <tcp_receive+0x888>)
 800c0ea:	6013      	str	r3, [r2, #0]
 800c0ec:	4b91      	ldr	r3, [pc, #580]	; (800c334 <tcp_receive+0x88c>)
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	4a8f      	ldr	r2, [pc, #572]	; (800c330 <tcp_receive+0x888>)
 800c0f2:	6812      	ldr	r2, [r2, #0]
 800c0f4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c0f6:	e00d      	b.n	800c114 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c0f8:	4b8d      	ldr	r3, [pc, #564]	; (800c330 <tcp_receive+0x888>)
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c100:	1ad3      	subs	r3, r2, r3
 800c102:	2b00      	cmp	r3, #0
 800c104:	da06      	bge.n	800c114 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	8b5b      	ldrh	r3, [r3, #26]
 800c10a:	f043 0302 	orr.w	r3, r3, #2
 800c10e:	b29a      	uxth	r2, r3
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c114:	4b86      	ldr	r3, [pc, #536]	; (800c330 <tcp_receive+0x888>)
 800c116:	681a      	ldr	r2, [r3, #0]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c11c:	1ad3      	subs	r3, r2, r3
 800c11e:	2b00      	cmp	r3, #0
 800c120:	f2c0 842a 	blt.w	800c978 <tcp_receive+0xed0>
 800c124:	4b82      	ldr	r3, [pc, #520]	; (800c330 <tcp_receive+0x888>)
 800c126:	681a      	ldr	r2, [r3, #0]
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c12c:	6879      	ldr	r1, [r7, #4]
 800c12e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c130:	440b      	add	r3, r1
 800c132:	1ad3      	subs	r3, r2, r3
 800c134:	3301      	adds	r3, #1
 800c136:	2b00      	cmp	r3, #0
 800c138:	f300 841e 	bgt.w	800c978 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c140:	4b7b      	ldr	r3, [pc, #492]	; (800c330 <tcp_receive+0x888>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	429a      	cmp	r2, r3
 800c146:	f040 829a 	bne.w	800c67e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c14a:	4b7a      	ldr	r3, [pc, #488]	; (800c334 <tcp_receive+0x88c>)
 800c14c:	891c      	ldrh	r4, [r3, #8]
 800c14e:	4b79      	ldr	r3, [pc, #484]	; (800c334 <tcp_receive+0x88c>)
 800c150:	68db      	ldr	r3, [r3, #12]
 800c152:	899b      	ldrh	r3, [r3, #12]
 800c154:	b29b      	uxth	r3, r3
 800c156:	4618      	mov	r0, r3
 800c158:	f7fa ffc6 	bl	80070e8 <lwip_htons>
 800c15c:	4603      	mov	r3, r0
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	f003 0303 	and.w	r3, r3, #3
 800c164:	2b00      	cmp	r3, #0
 800c166:	d001      	beq.n	800c16c <tcp_receive+0x6c4>
 800c168:	2301      	movs	r3, #1
 800c16a:	e000      	b.n	800c16e <tcp_receive+0x6c6>
 800c16c:	2300      	movs	r3, #0
 800c16e:	4423      	add	r3, r4
 800c170:	b29a      	uxth	r2, r3
 800c172:	4b71      	ldr	r3, [pc, #452]	; (800c338 <tcp_receive+0x890>)
 800c174:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c17a:	4b6f      	ldr	r3, [pc, #444]	; (800c338 <tcp_receive+0x890>)
 800c17c:	881b      	ldrh	r3, [r3, #0]
 800c17e:	429a      	cmp	r2, r3
 800c180:	d275      	bcs.n	800c26e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c182:	4b6c      	ldr	r3, [pc, #432]	; (800c334 <tcp_receive+0x88c>)
 800c184:	68db      	ldr	r3, [r3, #12]
 800c186:	899b      	ldrh	r3, [r3, #12]
 800c188:	b29b      	uxth	r3, r3
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7fa ffac 	bl	80070e8 <lwip_htons>
 800c190:	4603      	mov	r3, r0
 800c192:	b2db      	uxtb	r3, r3
 800c194:	f003 0301 	and.w	r3, r3, #1
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d01f      	beq.n	800c1dc <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c19c:	4b65      	ldr	r3, [pc, #404]	; (800c334 <tcp_receive+0x88c>)
 800c19e:	68db      	ldr	r3, [r3, #12]
 800c1a0:	899b      	ldrh	r3, [r3, #12]
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	b21b      	sxth	r3, r3
 800c1a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c1aa:	b21c      	sxth	r4, r3
 800c1ac:	4b61      	ldr	r3, [pc, #388]	; (800c334 <tcp_receive+0x88c>)
 800c1ae:	68db      	ldr	r3, [r3, #12]
 800c1b0:	899b      	ldrh	r3, [r3, #12]
 800c1b2:	b29b      	uxth	r3, r3
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7fa ff97 	bl	80070e8 <lwip_htons>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7fa ff8e 	bl	80070e8 <lwip_htons>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	b21b      	sxth	r3, r3
 800c1d0:	4323      	orrs	r3, r4
 800c1d2:	b21a      	sxth	r2, r3
 800c1d4:	4b57      	ldr	r3, [pc, #348]	; (800c334 <tcp_receive+0x88c>)
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	b292      	uxth	r2, r2
 800c1da:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c1e0:	4b54      	ldr	r3, [pc, #336]	; (800c334 <tcp_receive+0x88c>)
 800c1e2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c1e4:	4b53      	ldr	r3, [pc, #332]	; (800c334 <tcp_receive+0x88c>)
 800c1e6:	68db      	ldr	r3, [r3, #12]
 800c1e8:	899b      	ldrh	r3, [r3, #12]
 800c1ea:	b29b      	uxth	r3, r3
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f7fa ff7b 	bl	80070e8 <lwip_htons>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	b2db      	uxtb	r3, r3
 800c1f6:	f003 0302 	and.w	r3, r3, #2
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d005      	beq.n	800c20a <tcp_receive+0x762>
            inseg.len -= 1;
 800c1fe:	4b4d      	ldr	r3, [pc, #308]	; (800c334 <tcp_receive+0x88c>)
 800c200:	891b      	ldrh	r3, [r3, #8]
 800c202:	3b01      	subs	r3, #1
 800c204:	b29a      	uxth	r2, r3
 800c206:	4b4b      	ldr	r3, [pc, #300]	; (800c334 <tcp_receive+0x88c>)
 800c208:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c20a:	4b4a      	ldr	r3, [pc, #296]	; (800c334 <tcp_receive+0x88c>)
 800c20c:	685b      	ldr	r3, [r3, #4]
 800c20e:	4a49      	ldr	r2, [pc, #292]	; (800c334 <tcp_receive+0x88c>)
 800c210:	8912      	ldrh	r2, [r2, #8]
 800c212:	4611      	mov	r1, r2
 800c214:	4618      	mov	r0, r3
 800c216:	f7fc f93f 	bl	8008498 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c21a:	4b46      	ldr	r3, [pc, #280]	; (800c334 <tcp_receive+0x88c>)
 800c21c:	891c      	ldrh	r4, [r3, #8]
 800c21e:	4b45      	ldr	r3, [pc, #276]	; (800c334 <tcp_receive+0x88c>)
 800c220:	68db      	ldr	r3, [r3, #12]
 800c222:	899b      	ldrh	r3, [r3, #12]
 800c224:	b29b      	uxth	r3, r3
 800c226:	4618      	mov	r0, r3
 800c228:	f7fa ff5e 	bl	80070e8 <lwip_htons>
 800c22c:	4603      	mov	r3, r0
 800c22e:	b2db      	uxtb	r3, r3
 800c230:	f003 0303 	and.w	r3, r3, #3
 800c234:	2b00      	cmp	r3, #0
 800c236:	d001      	beq.n	800c23c <tcp_receive+0x794>
 800c238:	2301      	movs	r3, #1
 800c23a:	e000      	b.n	800c23e <tcp_receive+0x796>
 800c23c:	2300      	movs	r3, #0
 800c23e:	4423      	add	r3, r4
 800c240:	b29a      	uxth	r2, r3
 800c242:	4b3d      	ldr	r3, [pc, #244]	; (800c338 <tcp_receive+0x890>)
 800c244:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c246:	4b3c      	ldr	r3, [pc, #240]	; (800c338 <tcp_receive+0x890>)
 800c248:	881b      	ldrh	r3, [r3, #0]
 800c24a:	461a      	mov	r2, r3
 800c24c:	4b38      	ldr	r3, [pc, #224]	; (800c330 <tcp_receive+0x888>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	441a      	add	r2, r3
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c256:	6879      	ldr	r1, [r7, #4]
 800c258:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c25a:	440b      	add	r3, r1
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d006      	beq.n	800c26e <tcp_receive+0x7c6>
 800c260:	4b36      	ldr	r3, [pc, #216]	; (800c33c <tcp_receive+0x894>)
 800c262:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800c266:	4936      	ldr	r1, [pc, #216]	; (800c340 <tcp_receive+0x898>)
 800c268:	4836      	ldr	r0, [pc, #216]	; (800c344 <tcp_receive+0x89c>)
 800c26a:	f005 f885 	bl	8011378 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c272:	2b00      	cmp	r3, #0
 800c274:	f000 80e7 	beq.w	800c446 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c278:	4b2e      	ldr	r3, [pc, #184]	; (800c334 <tcp_receive+0x88c>)
 800c27a:	68db      	ldr	r3, [r3, #12]
 800c27c:	899b      	ldrh	r3, [r3, #12]
 800c27e:	b29b      	uxth	r3, r3
 800c280:	4618      	mov	r0, r3
 800c282:	f7fa ff31 	bl	80070e8 <lwip_htons>
 800c286:	4603      	mov	r3, r0
 800c288:	b2db      	uxtb	r3, r3
 800c28a:	f003 0301 	and.w	r3, r3, #1
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d010      	beq.n	800c2b4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c292:	e00a      	b.n	800c2aa <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c298:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800c2a4:	68f8      	ldr	r0, [r7, #12]
 800c2a6:	f7fd fd92 	bl	8009dce <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d1f0      	bne.n	800c294 <tcp_receive+0x7ec>
 800c2b2:	e0c8      	b.n	800c446 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c2ba:	e052      	b.n	800c362 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c2bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	899b      	ldrh	r3, [r3, #12]
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f7fa ff0f 	bl	80070e8 <lwip_htons>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	f003 0301 	and.w	r3, r3, #1
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d03d      	beq.n	800c352 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c2d6:	4b17      	ldr	r3, [pc, #92]	; (800c334 <tcp_receive+0x88c>)
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	899b      	ldrh	r3, [r3, #12]
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f7fa ff02 	bl	80070e8 <lwip_htons>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d130      	bne.n	800c352 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c2f0:	4b10      	ldr	r3, [pc, #64]	; (800c334 <tcp_receive+0x88c>)
 800c2f2:	68db      	ldr	r3, [r3, #12]
 800c2f4:	899b      	ldrh	r3, [r3, #12]
 800c2f6:	b29c      	uxth	r4, r3
 800c2f8:	2001      	movs	r0, #1
 800c2fa:	f7fa fef5 	bl	80070e8 <lwip_htons>
 800c2fe:	4603      	mov	r3, r0
 800c300:	461a      	mov	r2, r3
 800c302:	4b0c      	ldr	r3, [pc, #48]	; (800c334 <tcp_receive+0x88c>)
 800c304:	68db      	ldr	r3, [r3, #12]
 800c306:	4322      	orrs	r2, r4
 800c308:	b292      	uxth	r2, r2
 800c30a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c30c:	4b09      	ldr	r3, [pc, #36]	; (800c334 <tcp_receive+0x88c>)
 800c30e:	891c      	ldrh	r4, [r3, #8]
 800c310:	4b08      	ldr	r3, [pc, #32]	; (800c334 <tcp_receive+0x88c>)
 800c312:	68db      	ldr	r3, [r3, #12]
 800c314:	899b      	ldrh	r3, [r3, #12]
 800c316:	b29b      	uxth	r3, r3
 800c318:	4618      	mov	r0, r3
 800c31a:	f7fa fee5 	bl	80070e8 <lwip_htons>
 800c31e:	4603      	mov	r3, r0
 800c320:	b2db      	uxtb	r3, r3
 800c322:	f003 0303 	and.w	r3, r3, #3
 800c326:	2b00      	cmp	r3, #0
 800c328:	d00e      	beq.n	800c348 <tcp_receive+0x8a0>
 800c32a:	2301      	movs	r3, #1
 800c32c:	e00d      	b.n	800c34a <tcp_receive+0x8a2>
 800c32e:	bf00      	nop
 800c330:	2000bc64 	.word	0x2000bc64
 800c334:	2000bc44 	.word	0x2000bc44
 800c338:	2000bc6e 	.word	0x2000bc6e
 800c33c:	08013aa0 	.word	0x08013aa0
 800c340:	08013e48 	.word	0x08013e48
 800c344:	08013aec 	.word	0x08013aec
 800c348:	2300      	movs	r3, #0
 800c34a:	4423      	add	r3, r4
 800c34c:	b29a      	uxth	r2, r3
 800c34e:	4b98      	ldr	r3, [pc, #608]	; (800c5b0 <tcp_receive+0xb08>)
 800c350:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c354:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800c35c:	6938      	ldr	r0, [r7, #16]
 800c35e:	f7fd fd36 	bl	8009dce <tcp_seg_free>
            while (next &&
 800c362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c364:	2b00      	cmp	r3, #0
 800c366:	d00e      	beq.n	800c386 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c368:	4b91      	ldr	r3, [pc, #580]	; (800c5b0 <tcp_receive+0xb08>)
 800c36a:	881b      	ldrh	r3, [r3, #0]
 800c36c:	461a      	mov	r2, r3
 800c36e:	4b91      	ldr	r3, [pc, #580]	; (800c5b4 <tcp_receive+0xb0c>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	441a      	add	r2, r3
 800c374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c376:	68db      	ldr	r3, [r3, #12]
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c37c:	8909      	ldrh	r1, [r1, #8]
 800c37e:	440b      	add	r3, r1
 800c380:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c382:	2b00      	cmp	r3, #0
 800c384:	da9a      	bge.n	800c2bc <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d059      	beq.n	800c440 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800c38c:	4b88      	ldr	r3, [pc, #544]	; (800c5b0 <tcp_receive+0xb08>)
 800c38e:	881b      	ldrh	r3, [r3, #0]
 800c390:	461a      	mov	r2, r3
 800c392:	4b88      	ldr	r3, [pc, #544]	; (800c5b4 <tcp_receive+0xb0c>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	441a      	add	r2, r3
 800c398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	dd4d      	ble.n	800c440 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c3a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3a6:	68db      	ldr	r3, [r3, #12]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	b29a      	uxth	r2, r3
 800c3ac:	4b81      	ldr	r3, [pc, #516]	; (800c5b4 <tcp_receive+0xb0c>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	b29b      	uxth	r3, r3
 800c3b2:	1ad3      	subs	r3, r2, r3
 800c3b4:	b29a      	uxth	r2, r3
 800c3b6:	4b80      	ldr	r3, [pc, #512]	; (800c5b8 <tcp_receive+0xb10>)
 800c3b8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c3ba:	4b7f      	ldr	r3, [pc, #508]	; (800c5b8 <tcp_receive+0xb10>)
 800c3bc:	68db      	ldr	r3, [r3, #12]
 800c3be:	899b      	ldrh	r3, [r3, #12]
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7fa fe90 	bl	80070e8 <lwip_htons>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	b2db      	uxtb	r3, r3
 800c3cc:	f003 0302 	and.w	r3, r3, #2
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d005      	beq.n	800c3e0 <tcp_receive+0x938>
                inseg.len -= 1;
 800c3d4:	4b78      	ldr	r3, [pc, #480]	; (800c5b8 <tcp_receive+0xb10>)
 800c3d6:	891b      	ldrh	r3, [r3, #8]
 800c3d8:	3b01      	subs	r3, #1
 800c3da:	b29a      	uxth	r2, r3
 800c3dc:	4b76      	ldr	r3, [pc, #472]	; (800c5b8 <tcp_receive+0xb10>)
 800c3de:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c3e0:	4b75      	ldr	r3, [pc, #468]	; (800c5b8 <tcp_receive+0xb10>)
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	4a74      	ldr	r2, [pc, #464]	; (800c5b8 <tcp_receive+0xb10>)
 800c3e6:	8912      	ldrh	r2, [r2, #8]
 800c3e8:	4611      	mov	r1, r2
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7fc f854 	bl	8008498 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c3f0:	4b71      	ldr	r3, [pc, #452]	; (800c5b8 <tcp_receive+0xb10>)
 800c3f2:	891c      	ldrh	r4, [r3, #8]
 800c3f4:	4b70      	ldr	r3, [pc, #448]	; (800c5b8 <tcp_receive+0xb10>)
 800c3f6:	68db      	ldr	r3, [r3, #12]
 800c3f8:	899b      	ldrh	r3, [r3, #12]
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f7fa fe73 	bl	80070e8 <lwip_htons>
 800c402:	4603      	mov	r3, r0
 800c404:	b2db      	uxtb	r3, r3
 800c406:	f003 0303 	and.w	r3, r3, #3
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d001      	beq.n	800c412 <tcp_receive+0x96a>
 800c40e:	2301      	movs	r3, #1
 800c410:	e000      	b.n	800c414 <tcp_receive+0x96c>
 800c412:	2300      	movs	r3, #0
 800c414:	4423      	add	r3, r4
 800c416:	b29a      	uxth	r2, r3
 800c418:	4b65      	ldr	r3, [pc, #404]	; (800c5b0 <tcp_receive+0xb08>)
 800c41a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c41c:	4b64      	ldr	r3, [pc, #400]	; (800c5b0 <tcp_receive+0xb08>)
 800c41e:	881b      	ldrh	r3, [r3, #0]
 800c420:	461a      	mov	r2, r3
 800c422:	4b64      	ldr	r3, [pc, #400]	; (800c5b4 <tcp_receive+0xb0c>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	441a      	add	r2, r3
 800c428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c42a:	68db      	ldr	r3, [r3, #12]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	429a      	cmp	r2, r3
 800c430:	d006      	beq.n	800c440 <tcp_receive+0x998>
 800c432:	4b62      	ldr	r3, [pc, #392]	; (800c5bc <tcp_receive+0xb14>)
 800c434:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800c438:	4961      	ldr	r1, [pc, #388]	; (800c5c0 <tcp_receive+0xb18>)
 800c43a:	4862      	ldr	r0, [pc, #392]	; (800c5c4 <tcp_receive+0xb1c>)
 800c43c:	f004 ff9c 	bl	8011378 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c444:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c446:	4b5a      	ldr	r3, [pc, #360]	; (800c5b0 <tcp_receive+0xb08>)
 800c448:	881b      	ldrh	r3, [r3, #0]
 800c44a:	461a      	mov	r2, r3
 800c44c:	4b59      	ldr	r3, [pc, #356]	; (800c5b4 <tcp_receive+0xb0c>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	441a      	add	r2, r3
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c45a:	4b55      	ldr	r3, [pc, #340]	; (800c5b0 <tcp_receive+0xb08>)
 800c45c:	881b      	ldrh	r3, [r3, #0]
 800c45e:	429a      	cmp	r2, r3
 800c460:	d206      	bcs.n	800c470 <tcp_receive+0x9c8>
 800c462:	4b56      	ldr	r3, [pc, #344]	; (800c5bc <tcp_receive+0xb14>)
 800c464:	f240 6207 	movw	r2, #1543	; 0x607
 800c468:	4957      	ldr	r1, [pc, #348]	; (800c5c8 <tcp_receive+0xb20>)
 800c46a:	4856      	ldr	r0, [pc, #344]	; (800c5c4 <tcp_receive+0xb1c>)
 800c46c:	f004 ff84 	bl	8011378 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c474:	4b4e      	ldr	r3, [pc, #312]	; (800c5b0 <tcp_receive+0xb08>)
 800c476:	881b      	ldrh	r3, [r3, #0]
 800c478:	1ad3      	subs	r3, r2, r3
 800c47a:	b29a      	uxth	r2, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f7fc ffc5 	bl	8009410 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c486:	4b4c      	ldr	r3, [pc, #304]	; (800c5b8 <tcp_receive+0xb10>)
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	891b      	ldrh	r3, [r3, #8]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d006      	beq.n	800c49e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800c490:	4b49      	ldr	r3, [pc, #292]	; (800c5b8 <tcp_receive+0xb10>)
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	4a4d      	ldr	r2, [pc, #308]	; (800c5cc <tcp_receive+0xb24>)
 800c496:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c498:	4b47      	ldr	r3, [pc, #284]	; (800c5b8 <tcp_receive+0xb10>)
 800c49a:	2200      	movs	r2, #0
 800c49c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c49e:	4b46      	ldr	r3, [pc, #280]	; (800c5b8 <tcp_receive+0xb10>)
 800c4a0:	68db      	ldr	r3, [r3, #12]
 800c4a2:	899b      	ldrh	r3, [r3, #12]
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7fa fe1e 	bl	80070e8 <lwip_htons>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	f003 0301 	and.w	r3, r3, #1
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	f000 80b8 	beq.w	800c62a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c4ba:	4b45      	ldr	r3, [pc, #276]	; (800c5d0 <tcp_receive+0xb28>)
 800c4bc:	781b      	ldrb	r3, [r3, #0]
 800c4be:	f043 0320 	orr.w	r3, r3, #32
 800c4c2:	b2da      	uxtb	r2, r3
 800c4c4:	4b42      	ldr	r3, [pc, #264]	; (800c5d0 <tcp_receive+0xb28>)
 800c4c6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c4c8:	e0af      	b.n	800c62a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4ce:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4d4:	68db      	ldr	r3, [r3, #12]
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	4a36      	ldr	r2, [pc, #216]	; (800c5b4 <tcp_receive+0xb0c>)
 800c4da:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	891b      	ldrh	r3, [r3, #8]
 800c4e0:	461c      	mov	r4, r3
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	899b      	ldrh	r3, [r3, #12]
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fa fdfc 	bl	80070e8 <lwip_htons>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	b2db      	uxtb	r3, r3
 800c4f4:	f003 0303 	and.w	r3, r3, #3
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d001      	beq.n	800c500 <tcp_receive+0xa58>
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	e000      	b.n	800c502 <tcp_receive+0xa5a>
 800c500:	2300      	movs	r3, #0
 800c502:	191a      	adds	r2, r3, r4
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c508:	441a      	add	r2, r3
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c512:	461c      	mov	r4, r3
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	891b      	ldrh	r3, [r3, #8]
 800c518:	461d      	mov	r5, r3
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	899b      	ldrh	r3, [r3, #12]
 800c520:	b29b      	uxth	r3, r3
 800c522:	4618      	mov	r0, r3
 800c524:	f7fa fde0 	bl	80070e8 <lwip_htons>
 800c528:	4603      	mov	r3, r0
 800c52a:	b2db      	uxtb	r3, r3
 800c52c:	f003 0303 	and.w	r3, r3, #3
 800c530:	2b00      	cmp	r3, #0
 800c532:	d001      	beq.n	800c538 <tcp_receive+0xa90>
 800c534:	2301      	movs	r3, #1
 800c536:	e000      	b.n	800c53a <tcp_receive+0xa92>
 800c538:	2300      	movs	r3, #0
 800c53a:	442b      	add	r3, r5
 800c53c:	429c      	cmp	r4, r3
 800c53e:	d206      	bcs.n	800c54e <tcp_receive+0xaa6>
 800c540:	4b1e      	ldr	r3, [pc, #120]	; (800c5bc <tcp_receive+0xb14>)
 800c542:	f240 622b 	movw	r2, #1579	; 0x62b
 800c546:	4923      	ldr	r1, [pc, #140]	; (800c5d4 <tcp_receive+0xb2c>)
 800c548:	481e      	ldr	r0, [pc, #120]	; (800c5c4 <tcp_receive+0xb1c>)
 800c54a:	f004 ff15 	bl	8011378 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	891b      	ldrh	r3, [r3, #8]
 800c552:	461c      	mov	r4, r3
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	68db      	ldr	r3, [r3, #12]
 800c558:	899b      	ldrh	r3, [r3, #12]
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	4618      	mov	r0, r3
 800c55e:	f7fa fdc3 	bl	80070e8 <lwip_htons>
 800c562:	4603      	mov	r3, r0
 800c564:	b2db      	uxtb	r3, r3
 800c566:	f003 0303 	and.w	r3, r3, #3
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d001      	beq.n	800c572 <tcp_receive+0xaca>
 800c56e:	2301      	movs	r3, #1
 800c570:	e000      	b.n	800c574 <tcp_receive+0xacc>
 800c572:	2300      	movs	r3, #0
 800c574:	1919      	adds	r1, r3, r4
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c57a:	b28b      	uxth	r3, r1
 800c57c:	1ad3      	subs	r3, r2, r3
 800c57e:	b29a      	uxth	r2, r3
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f7fc ff43 	bl	8009410 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	891b      	ldrh	r3, [r3, #8]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d028      	beq.n	800c5e6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c594:	4b0d      	ldr	r3, [pc, #52]	; (800c5cc <tcp_receive+0xb24>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d01d      	beq.n	800c5d8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800c59c:	4b0b      	ldr	r3, [pc, #44]	; (800c5cc <tcp_receive+0xb24>)
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	685b      	ldr	r3, [r3, #4]
 800c5a4:	4619      	mov	r1, r3
 800c5a6:	4610      	mov	r0, r2
 800c5a8:	f7fc f9be 	bl	8008928 <pbuf_cat>
 800c5ac:	e018      	b.n	800c5e0 <tcp_receive+0xb38>
 800c5ae:	bf00      	nop
 800c5b0:	2000bc6e 	.word	0x2000bc6e
 800c5b4:	2000bc64 	.word	0x2000bc64
 800c5b8:	2000bc44 	.word	0x2000bc44
 800c5bc:	08013aa0 	.word	0x08013aa0
 800c5c0:	08013e80 	.word	0x08013e80
 800c5c4:	08013aec 	.word	0x08013aec
 800c5c8:	08013ebc 	.word	0x08013ebc
 800c5cc:	2000bc74 	.word	0x2000bc74
 800c5d0:	2000bc71 	.word	0x2000bc71
 800c5d4:	08013edc 	.word	0x08013edc
            } else {
              recv_data = cseg->p;
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	4a70      	ldr	r2, [pc, #448]	; (800c7a0 <tcp_receive+0xcf8>)
 800c5de:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	68db      	ldr	r3, [r3, #12]
 800c5ea:	899b      	ldrh	r3, [r3, #12]
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f7fa fd7a 	bl	80070e8 <lwip_htons>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	b2db      	uxtb	r3, r3
 800c5f8:	f003 0301 	and.w	r3, r3, #1
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d00d      	beq.n	800c61c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c600:	4b68      	ldr	r3, [pc, #416]	; (800c7a4 <tcp_receive+0xcfc>)
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	f043 0320 	orr.w	r3, r3, #32
 800c608:	b2da      	uxtb	r2, r3
 800c60a:	4b66      	ldr	r3, [pc, #408]	; (800c7a4 <tcp_receive+0xcfc>)
 800c60c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	7d1b      	ldrb	r3, [r3, #20]
 800c612:	2b04      	cmp	r3, #4
 800c614:	d102      	bne.n	800c61c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2207      	movs	r2, #7
 800c61a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800c624:	68b8      	ldr	r0, [r7, #8]
 800c626:	f7fd fbd2 	bl	8009dce <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d008      	beq.n	800c644 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c636:	68db      	ldr	r3, [r3, #12]
 800c638:	685a      	ldr	r2, [r3, #4]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800c63e:	429a      	cmp	r2, r3
 800c640:	f43f af43 	beq.w	800c4ca <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	8b5b      	ldrh	r3, [r3, #26]
 800c648:	f003 0301 	and.w	r3, r3, #1
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d00e      	beq.n	800c66e <tcp_receive+0xbc6>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	8b5b      	ldrh	r3, [r3, #26]
 800c654:	f023 0301 	bic.w	r3, r3, #1
 800c658:	b29a      	uxth	r2, r3
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	835a      	strh	r2, [r3, #26]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	8b5b      	ldrh	r3, [r3, #26]
 800c662:	f043 0302 	orr.w	r3, r3, #2
 800c666:	b29a      	uxth	r2, r3
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c66c:	e188      	b.n	800c980 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	8b5b      	ldrh	r3, [r3, #26]
 800c672:	f043 0301 	orr.w	r3, r3, #1
 800c676:	b29a      	uxth	r2, r3
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c67c:	e180      	b.n	800c980 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c682:	2b00      	cmp	r3, #0
 800c684:	d106      	bne.n	800c694 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c686:	4848      	ldr	r0, [pc, #288]	; (800c7a8 <tcp_receive+0xd00>)
 800c688:	f7fd fbba 	bl	8009e00 <tcp_seg_copy>
 800c68c:	4602      	mov	r2, r0
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	675a      	str	r2, [r3, #116]	; 0x74
 800c692:	e16d      	b.n	800c970 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c694:	2300      	movs	r3, #0
 800c696:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c69c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c69e:	e157      	b.n	800c950 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800c6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a2:	68db      	ldr	r3, [r3, #12]
 800c6a4:	685a      	ldr	r2, [r3, #4]
 800c6a6:	4b41      	ldr	r3, [pc, #260]	; (800c7ac <tcp_receive+0xd04>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	d11d      	bne.n	800c6ea <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c6ae:	4b3e      	ldr	r3, [pc, #248]	; (800c7a8 <tcp_receive+0xd00>)
 800c6b0:	891a      	ldrh	r2, [r3, #8]
 800c6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b4:	891b      	ldrh	r3, [r3, #8]
 800c6b6:	429a      	cmp	r2, r3
 800c6b8:	f240 814f 	bls.w	800c95a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c6bc:	483a      	ldr	r0, [pc, #232]	; (800c7a8 <tcp_receive+0xd00>)
 800c6be:	f7fd fb9f 	bl	8009e00 <tcp_seg_copy>
 800c6c2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	f000 8149 	beq.w	800c95e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800c6cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d003      	beq.n	800c6da <tcp_receive+0xc32>
                    prev->next = cseg;
 800c6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d4:	697a      	ldr	r2, [r7, #20]
 800c6d6:	601a      	str	r2, [r3, #0]
 800c6d8:	e002      	b.n	800c6e0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	697a      	ldr	r2, [r7, #20]
 800c6de:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c6e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c6e2:	6978      	ldr	r0, [r7, #20]
 800c6e4:	f7ff f8dc 	bl	800b8a0 <tcp_oos_insert_segment>
                }
                break;
 800c6e8:	e139      	b.n	800c95e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d117      	bne.n	800c720 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c6f0:	4b2e      	ldr	r3, [pc, #184]	; (800c7ac <tcp_receive+0xd04>)
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f6:	68db      	ldr	r3, [r3, #12]
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	1ad3      	subs	r3, r2, r3
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	da57      	bge.n	800c7b0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c700:	4829      	ldr	r0, [pc, #164]	; (800c7a8 <tcp_receive+0xd00>)
 800c702:	f7fd fb7d 	bl	8009e00 <tcp_seg_copy>
 800c706:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c708:	69bb      	ldr	r3, [r7, #24]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	f000 8129 	beq.w	800c962 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	69ba      	ldr	r2, [r7, #24]
 800c714:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c716:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c718:	69b8      	ldr	r0, [r7, #24]
 800c71a:	f7ff f8c1 	bl	800b8a0 <tcp_oos_insert_segment>
                  }
                  break;
 800c71e:	e120      	b.n	800c962 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c720:	4b22      	ldr	r3, [pc, #136]	; (800c7ac <tcp_receive+0xd04>)
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c726:	68db      	ldr	r3, [r3, #12]
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	1ad3      	subs	r3, r2, r3
 800c72c:	3b01      	subs	r3, #1
 800c72e:	2b00      	cmp	r3, #0
 800c730:	db3e      	blt.n	800c7b0 <tcp_receive+0xd08>
 800c732:	4b1e      	ldr	r3, [pc, #120]	; (800c7ac <tcp_receive+0xd04>)
 800c734:	681a      	ldr	r2, [r3, #0]
 800c736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c738:	68db      	ldr	r3, [r3, #12]
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	1ad3      	subs	r3, r2, r3
 800c73e:	3301      	adds	r3, #1
 800c740:	2b00      	cmp	r3, #0
 800c742:	dc35      	bgt.n	800c7b0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c744:	4818      	ldr	r0, [pc, #96]	; (800c7a8 <tcp_receive+0xd00>)
 800c746:	f7fd fb5b 	bl	8009e00 <tcp_seg_copy>
 800c74a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c74c:	69fb      	ldr	r3, [r7, #28]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	f000 8109 	beq.w	800c966 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c756:	68db      	ldr	r3, [r3, #12]
 800c758:	685b      	ldr	r3, [r3, #4]
 800c75a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c75c:	8912      	ldrh	r2, [r2, #8]
 800c75e:	441a      	add	r2, r3
 800c760:	4b12      	ldr	r3, [pc, #72]	; (800c7ac <tcp_receive+0xd04>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	1ad3      	subs	r3, r2, r3
 800c766:	2b00      	cmp	r3, #0
 800c768:	dd12      	ble.n	800c790 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c76a:	4b10      	ldr	r3, [pc, #64]	; (800c7ac <tcp_receive+0xd04>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	b29a      	uxth	r2, r3
 800c770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	b29b      	uxth	r3, r3
 800c778:	1ad3      	subs	r3, r2, r3
 800c77a:	b29a      	uxth	r2, r3
 800c77c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c77e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c782:	685a      	ldr	r2, [r3, #4]
 800c784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c786:	891b      	ldrh	r3, [r3, #8]
 800c788:	4619      	mov	r1, r3
 800c78a:	4610      	mov	r0, r2
 800c78c:	f7fb fe84 	bl	8008498 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c792:	69fa      	ldr	r2, [r7, #28]
 800c794:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c796:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c798:	69f8      	ldr	r0, [r7, #28]
 800c79a:	f7ff f881 	bl	800b8a0 <tcp_oos_insert_segment>
                  }
                  break;
 800c79e:	e0e2      	b.n	800c966 <tcp_receive+0xebe>
 800c7a0:	2000bc74 	.word	0x2000bc74
 800c7a4:	2000bc71 	.word	0x2000bc71
 800c7a8:	2000bc44 	.word	0x2000bc44
 800c7ac:	2000bc64 	.word	0x2000bc64
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	f040 80c6 	bne.w	800c94a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c7be:	4b80      	ldr	r3, [pc, #512]	; (800c9c0 <tcp_receive+0xf18>)
 800c7c0:	681a      	ldr	r2, [r3, #0]
 800c7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c4:	68db      	ldr	r3, [r3, #12]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	f340 80bd 	ble.w	800c94a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d2:	68db      	ldr	r3, [r3, #12]
 800c7d4:	899b      	ldrh	r3, [r3, #12]
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f7fa fc85 	bl	80070e8 <lwip_htons>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	f003 0301 	and.w	r3, r3, #1
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	f040 80bf 	bne.w	800c96a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c7ec:	4875      	ldr	r0, [pc, #468]	; (800c9c4 <tcp_receive+0xf1c>)
 800c7ee:	f7fd fb07 	bl	8009e00 <tcp_seg_copy>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	f000 80b6 	beq.w	800c96e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c804:	68db      	ldr	r3, [r3, #12]
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c80a:	8912      	ldrh	r2, [r2, #8]
 800c80c:	441a      	add	r2, r3
 800c80e:	4b6c      	ldr	r3, [pc, #432]	; (800c9c0 <tcp_receive+0xf18>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	1ad3      	subs	r3, r2, r3
 800c814:	2b00      	cmp	r3, #0
 800c816:	dd12      	ble.n	800c83e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c818:	4b69      	ldr	r3, [pc, #420]	; (800c9c0 <tcp_receive+0xf18>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	b29a      	uxth	r2, r3
 800c81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c820:	68db      	ldr	r3, [r3, #12]
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	b29b      	uxth	r3, r3
 800c826:	1ad3      	subs	r3, r2, r3
 800c828:	b29a      	uxth	r2, r3
 800c82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c82c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c830:	685a      	ldr	r2, [r3, #4]
 800c832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c834:	891b      	ldrh	r3, [r3, #8]
 800c836:	4619      	mov	r1, r3
 800c838:	4610      	mov	r0, r2
 800c83a:	f7fb fe2d 	bl	8008498 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c83e:	4b62      	ldr	r3, [pc, #392]	; (800c9c8 <tcp_receive+0xf20>)
 800c840:	881b      	ldrh	r3, [r3, #0]
 800c842:	461a      	mov	r2, r3
 800c844:	4b5e      	ldr	r3, [pc, #376]	; (800c9c0 <tcp_receive+0xf18>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	441a      	add	r2, r3
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c84e:	6879      	ldr	r1, [r7, #4]
 800c850:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c852:	440b      	add	r3, r1
 800c854:	1ad3      	subs	r3, r2, r3
 800c856:	2b00      	cmp	r3, #0
 800c858:	f340 8089 	ble.w	800c96e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	68db      	ldr	r3, [r3, #12]
 800c862:	899b      	ldrh	r3, [r3, #12]
 800c864:	b29b      	uxth	r3, r3
 800c866:	4618      	mov	r0, r3
 800c868:	f7fa fc3e 	bl	80070e8 <lwip_htons>
 800c86c:	4603      	mov	r3, r0
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	f003 0301 	and.w	r3, r3, #1
 800c874:	2b00      	cmp	r3, #0
 800c876:	d022      	beq.n	800c8be <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	68db      	ldr	r3, [r3, #12]
 800c87e:	899b      	ldrh	r3, [r3, #12]
 800c880:	b29b      	uxth	r3, r3
 800c882:	b21b      	sxth	r3, r3
 800c884:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c888:	b21c      	sxth	r4, r3
 800c88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	68db      	ldr	r3, [r3, #12]
 800c890:	899b      	ldrh	r3, [r3, #12]
 800c892:	b29b      	uxth	r3, r3
 800c894:	4618      	mov	r0, r3
 800c896:	f7fa fc27 	bl	80070e8 <lwip_htons>
 800c89a:	4603      	mov	r3, r0
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c8a4:	b29b      	uxth	r3, r3
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f7fa fc1e 	bl	80070e8 <lwip_htons>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	b21b      	sxth	r3, r3
 800c8b0:	4323      	orrs	r3, r4
 800c8b2:	b21a      	sxth	r2, r3
 800c8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	68db      	ldr	r3, [r3, #12]
 800c8ba:	b292      	uxth	r2, r2
 800c8bc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c2:	b29a      	uxth	r2, r3
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8c8:	4413      	add	r3, r2
 800c8ca:	b299      	uxth	r1, r3
 800c8cc:	4b3c      	ldr	r3, [pc, #240]	; (800c9c0 <tcp_receive+0xf18>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	b29a      	uxth	r2, r3
 800c8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	1a8a      	subs	r2, r1, r2
 800c8d8:	b292      	uxth	r2, r2
 800c8da:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	685a      	ldr	r2, [r3, #4]
 800c8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	891b      	ldrh	r3, [r3, #8]
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	4610      	mov	r0, r2
 800c8ec:	f7fb fdd4 	bl	8008498 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	891c      	ldrh	r4, [r3, #8]
 800c8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	68db      	ldr	r3, [r3, #12]
 800c8fc:	899b      	ldrh	r3, [r3, #12]
 800c8fe:	b29b      	uxth	r3, r3
 800c900:	4618      	mov	r0, r3
 800c902:	f7fa fbf1 	bl	80070e8 <lwip_htons>
 800c906:	4603      	mov	r3, r0
 800c908:	b2db      	uxtb	r3, r3
 800c90a:	f003 0303 	and.w	r3, r3, #3
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d001      	beq.n	800c916 <tcp_receive+0xe6e>
 800c912:	2301      	movs	r3, #1
 800c914:	e000      	b.n	800c918 <tcp_receive+0xe70>
 800c916:	2300      	movs	r3, #0
 800c918:	4423      	add	r3, r4
 800c91a:	b29a      	uxth	r2, r3
 800c91c:	4b2a      	ldr	r3, [pc, #168]	; (800c9c8 <tcp_receive+0xf20>)
 800c91e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c920:	4b29      	ldr	r3, [pc, #164]	; (800c9c8 <tcp_receive+0xf20>)
 800c922:	881b      	ldrh	r3, [r3, #0]
 800c924:	461a      	mov	r2, r3
 800c926:	4b26      	ldr	r3, [pc, #152]	; (800c9c0 <tcp_receive+0xf18>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	441a      	add	r2, r3
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c930:	6879      	ldr	r1, [r7, #4]
 800c932:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c934:	440b      	add	r3, r1
 800c936:	429a      	cmp	r2, r3
 800c938:	d019      	beq.n	800c96e <tcp_receive+0xec6>
 800c93a:	4b24      	ldr	r3, [pc, #144]	; (800c9cc <tcp_receive+0xf24>)
 800c93c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800c940:	4923      	ldr	r1, [pc, #140]	; (800c9d0 <tcp_receive+0xf28>)
 800c942:	4824      	ldr	r0, [pc, #144]	; (800c9d4 <tcp_receive+0xf2c>)
 800c944:	f004 fd18 	bl	8011378 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c948:	e011      	b.n	800c96e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c952:	2b00      	cmp	r3, #0
 800c954:	f47f aea4 	bne.w	800c6a0 <tcp_receive+0xbf8>
 800c958:	e00a      	b.n	800c970 <tcp_receive+0xec8>
                break;
 800c95a:	bf00      	nop
 800c95c:	e008      	b.n	800c970 <tcp_receive+0xec8>
                break;
 800c95e:	bf00      	nop
 800c960:	e006      	b.n	800c970 <tcp_receive+0xec8>
                  break;
 800c962:	bf00      	nop
 800c964:	e004      	b.n	800c970 <tcp_receive+0xec8>
                  break;
 800c966:	bf00      	nop
 800c968:	e002      	b.n	800c970 <tcp_receive+0xec8>
                  break;
 800c96a:	bf00      	nop
 800c96c:	e000      	b.n	800c970 <tcp_receive+0xec8>
                break;
 800c96e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f001 fa33 	bl	800dddc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c976:	e003      	b.n	800c980 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f001 fa2f 	bl	800dddc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c97e:	e01a      	b.n	800c9b6 <tcp_receive+0xf0e>
 800c980:	e019      	b.n	800c9b6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c982:	4b0f      	ldr	r3, [pc, #60]	; (800c9c0 <tcp_receive+0xf18>)
 800c984:	681a      	ldr	r2, [r3, #0]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c98a:	1ad3      	subs	r3, r2, r3
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	db0a      	blt.n	800c9a6 <tcp_receive+0xefe>
 800c990:	4b0b      	ldr	r3, [pc, #44]	; (800c9c0 <tcp_receive+0xf18>)
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c998:	6879      	ldr	r1, [r7, #4]
 800c99a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c99c:	440b      	add	r3, r1
 800c99e:	1ad3      	subs	r3, r2, r3
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	dd07      	ble.n	800c9b6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	8b5b      	ldrh	r3, [r3, #26]
 800c9aa:	f043 0302 	orr.w	r3, r3, #2
 800c9ae:	b29a      	uxth	r2, r3
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c9b4:	e7ff      	b.n	800c9b6 <tcp_receive+0xf0e>
 800c9b6:	bf00      	nop
 800c9b8:	3750      	adds	r7, #80	; 0x50
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bdb0      	pop	{r4, r5, r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	2000bc64 	.word	0x2000bc64
 800c9c4:	2000bc44 	.word	0x2000bc44
 800c9c8:	2000bc6e 	.word	0x2000bc6e
 800c9cc:	08013aa0 	.word	0x08013aa0
 800c9d0:	08013e48 	.word	0x08013e48
 800c9d4:	08013aec 	.word	0x08013aec

0800c9d8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b083      	sub	sp, #12
 800c9dc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c9de:	4b15      	ldr	r3, [pc, #84]	; (800ca34 <tcp_get_next_optbyte+0x5c>)
 800c9e0:	881b      	ldrh	r3, [r3, #0]
 800c9e2:	1c5a      	adds	r2, r3, #1
 800c9e4:	b291      	uxth	r1, r2
 800c9e6:	4a13      	ldr	r2, [pc, #76]	; (800ca34 <tcp_get_next_optbyte+0x5c>)
 800c9e8:	8011      	strh	r1, [r2, #0]
 800c9ea:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c9ec:	4b12      	ldr	r3, [pc, #72]	; (800ca38 <tcp_get_next_optbyte+0x60>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d004      	beq.n	800c9fe <tcp_get_next_optbyte+0x26>
 800c9f4:	4b11      	ldr	r3, [pc, #68]	; (800ca3c <tcp_get_next_optbyte+0x64>)
 800c9f6:	881b      	ldrh	r3, [r3, #0]
 800c9f8:	88fa      	ldrh	r2, [r7, #6]
 800c9fa:	429a      	cmp	r2, r3
 800c9fc:	d208      	bcs.n	800ca10 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c9fe:	4b10      	ldr	r3, [pc, #64]	; (800ca40 <tcp_get_next_optbyte+0x68>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	3314      	adds	r3, #20
 800ca04:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ca06:	88fb      	ldrh	r3, [r7, #6]
 800ca08:	683a      	ldr	r2, [r7, #0]
 800ca0a:	4413      	add	r3, r2
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	e00b      	b.n	800ca28 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ca10:	88fb      	ldrh	r3, [r7, #6]
 800ca12:	b2da      	uxtb	r2, r3
 800ca14:	4b09      	ldr	r3, [pc, #36]	; (800ca3c <tcp_get_next_optbyte+0x64>)
 800ca16:	881b      	ldrh	r3, [r3, #0]
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	1ad3      	subs	r3, r2, r3
 800ca1c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ca1e:	4b06      	ldr	r3, [pc, #24]	; (800ca38 <tcp_get_next_optbyte+0x60>)
 800ca20:	681a      	ldr	r2, [r3, #0]
 800ca22:	797b      	ldrb	r3, [r7, #5]
 800ca24:	4413      	add	r3, r2
 800ca26:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	370c      	adds	r7, #12
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr
 800ca34:	2000bc60 	.word	0x2000bc60
 800ca38:	2000bc5c 	.word	0x2000bc5c
 800ca3c:	2000bc5a 	.word	0x2000bc5a
 800ca40:	2000bc54 	.word	0x2000bc54

0800ca44 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d106      	bne.n	800ca60 <tcp_parseopt+0x1c>
 800ca52:	4b32      	ldr	r3, [pc, #200]	; (800cb1c <tcp_parseopt+0xd8>)
 800ca54:	f240 727d 	movw	r2, #1917	; 0x77d
 800ca58:	4931      	ldr	r1, [pc, #196]	; (800cb20 <tcp_parseopt+0xdc>)
 800ca5a:	4832      	ldr	r0, [pc, #200]	; (800cb24 <tcp_parseopt+0xe0>)
 800ca5c:	f004 fc8c 	bl	8011378 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ca60:	4b31      	ldr	r3, [pc, #196]	; (800cb28 <tcp_parseopt+0xe4>)
 800ca62:	881b      	ldrh	r3, [r3, #0]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d055      	beq.n	800cb14 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ca68:	4b30      	ldr	r3, [pc, #192]	; (800cb2c <tcp_parseopt+0xe8>)
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	801a      	strh	r2, [r3, #0]
 800ca6e:	e045      	b.n	800cafc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800ca70:	f7ff ffb2 	bl	800c9d8 <tcp_get_next_optbyte>
 800ca74:	4603      	mov	r3, r0
 800ca76:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ca78:	7bfb      	ldrb	r3, [r7, #15]
 800ca7a:	2b02      	cmp	r3, #2
 800ca7c:	d006      	beq.n	800ca8c <tcp_parseopt+0x48>
 800ca7e:	2b02      	cmp	r3, #2
 800ca80:	dc2b      	bgt.n	800cada <tcp_parseopt+0x96>
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d041      	beq.n	800cb0a <tcp_parseopt+0xc6>
 800ca86:	2b01      	cmp	r3, #1
 800ca88:	d127      	bne.n	800cada <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800ca8a:	e037      	b.n	800cafc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ca8c:	f7ff ffa4 	bl	800c9d8 <tcp_get_next_optbyte>
 800ca90:	4603      	mov	r3, r0
 800ca92:	2b04      	cmp	r3, #4
 800ca94:	d13b      	bne.n	800cb0e <tcp_parseopt+0xca>
 800ca96:	4b25      	ldr	r3, [pc, #148]	; (800cb2c <tcp_parseopt+0xe8>)
 800ca98:	881b      	ldrh	r3, [r3, #0]
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	4a22      	ldr	r2, [pc, #136]	; (800cb28 <tcp_parseopt+0xe4>)
 800ca9e:	8812      	ldrh	r2, [r2, #0]
 800caa0:	4293      	cmp	r3, r2
 800caa2:	da34      	bge.n	800cb0e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800caa4:	f7ff ff98 	bl	800c9d8 <tcp_get_next_optbyte>
 800caa8:	4603      	mov	r3, r0
 800caaa:	b29b      	uxth	r3, r3
 800caac:	021b      	lsls	r3, r3, #8
 800caae:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800cab0:	f7ff ff92 	bl	800c9d8 <tcp_get_next_optbyte>
 800cab4:	4603      	mov	r3, r0
 800cab6:	b29a      	uxth	r2, r3
 800cab8:	89bb      	ldrh	r3, [r7, #12]
 800caba:	4313      	orrs	r3, r2
 800cabc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800cabe:	89bb      	ldrh	r3, [r7, #12]
 800cac0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800cac4:	d804      	bhi.n	800cad0 <tcp_parseopt+0x8c>
 800cac6:	89bb      	ldrh	r3, [r7, #12]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d001      	beq.n	800cad0 <tcp_parseopt+0x8c>
 800cacc:	89ba      	ldrh	r2, [r7, #12]
 800cace:	e001      	b.n	800cad4 <tcp_parseopt+0x90>
 800cad0:	f44f 7206 	mov.w	r2, #536	; 0x218
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800cad8:	e010      	b.n	800cafc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800cada:	f7ff ff7d 	bl	800c9d8 <tcp_get_next_optbyte>
 800cade:	4603      	mov	r3, r0
 800cae0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800cae2:	7afb      	ldrb	r3, [r7, #11]
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d914      	bls.n	800cb12 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800cae8:	7afb      	ldrb	r3, [r7, #11]
 800caea:	b29a      	uxth	r2, r3
 800caec:	4b0f      	ldr	r3, [pc, #60]	; (800cb2c <tcp_parseopt+0xe8>)
 800caee:	881b      	ldrh	r3, [r3, #0]
 800caf0:	4413      	add	r3, r2
 800caf2:	b29b      	uxth	r3, r3
 800caf4:	3b02      	subs	r3, #2
 800caf6:	b29a      	uxth	r2, r3
 800caf8:	4b0c      	ldr	r3, [pc, #48]	; (800cb2c <tcp_parseopt+0xe8>)
 800cafa:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cafc:	4b0b      	ldr	r3, [pc, #44]	; (800cb2c <tcp_parseopt+0xe8>)
 800cafe:	881a      	ldrh	r2, [r3, #0]
 800cb00:	4b09      	ldr	r3, [pc, #36]	; (800cb28 <tcp_parseopt+0xe4>)
 800cb02:	881b      	ldrh	r3, [r3, #0]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d3b3      	bcc.n	800ca70 <tcp_parseopt+0x2c>
 800cb08:	e004      	b.n	800cb14 <tcp_parseopt+0xd0>
          return;
 800cb0a:	bf00      	nop
 800cb0c:	e002      	b.n	800cb14 <tcp_parseopt+0xd0>
            return;
 800cb0e:	bf00      	nop
 800cb10:	e000      	b.n	800cb14 <tcp_parseopt+0xd0>
            return;
 800cb12:	bf00      	nop
      }
    }
  }
}
 800cb14:	3710      	adds	r7, #16
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
 800cb1a:	bf00      	nop
 800cb1c:	08013aa0 	.word	0x08013aa0
 800cb20:	08013f04 	.word	0x08013f04
 800cb24:	08013aec 	.word	0x08013aec
 800cb28:	2000bc58 	.word	0x2000bc58
 800cb2c:	2000bc60 	.word	0x2000bc60

0800cb30 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800cb30:	b480      	push	{r7}
 800cb32:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800cb34:	4b05      	ldr	r3, [pc, #20]	; (800cb4c <tcp_trigger_input_pcb_close+0x1c>)
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	f043 0310 	orr.w	r3, r3, #16
 800cb3c:	b2da      	uxtb	r2, r3
 800cb3e:	4b03      	ldr	r3, [pc, #12]	; (800cb4c <tcp_trigger_input_pcb_close+0x1c>)
 800cb40:	701a      	strb	r2, [r3, #0]
}
 800cb42:	bf00      	nop
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr
 800cb4c:	2000bc71 	.word	0x2000bc71

0800cb50 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b084      	sub	sp, #16
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	60f8      	str	r0, [r7, #12]
 800cb58:	60b9      	str	r1, [r7, #8]
 800cb5a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d00a      	beq.n	800cb78 <tcp_route+0x28>
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	7a1b      	ldrb	r3, [r3, #8]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d006      	beq.n	800cb78 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	7a1b      	ldrb	r3, [r3, #8]
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7fb fab8 	bl	80080e4 <netif_get_by_index>
 800cb74:	4603      	mov	r3, r0
 800cb76:	e003      	b.n	800cb80 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f003 f9ad 	bl	800fed8 <ip4_route>
 800cb7e:	4603      	mov	r3, r0
  }
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3710      	adds	r7, #16
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}

0800cb88 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800cb88:	b590      	push	{r4, r7, lr}
 800cb8a:	b087      	sub	sp, #28
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	60f8      	str	r0, [r7, #12]
 800cb90:	60b9      	str	r1, [r7, #8]
 800cb92:	603b      	str	r3, [r7, #0]
 800cb94:	4613      	mov	r3, r2
 800cb96:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d105      	bne.n	800cbaa <tcp_create_segment+0x22>
 800cb9e:	4b44      	ldr	r3, [pc, #272]	; (800ccb0 <tcp_create_segment+0x128>)
 800cba0:	22a3      	movs	r2, #163	; 0xa3
 800cba2:	4944      	ldr	r1, [pc, #272]	; (800ccb4 <tcp_create_segment+0x12c>)
 800cba4:	4844      	ldr	r0, [pc, #272]	; (800ccb8 <tcp_create_segment+0x130>)
 800cba6:	f004 fbe7 	bl	8011378 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d105      	bne.n	800cbbc <tcp_create_segment+0x34>
 800cbb0:	4b3f      	ldr	r3, [pc, #252]	; (800ccb0 <tcp_create_segment+0x128>)
 800cbb2:	22a4      	movs	r2, #164	; 0xa4
 800cbb4:	4941      	ldr	r1, [pc, #260]	; (800ccbc <tcp_create_segment+0x134>)
 800cbb6:	4840      	ldr	r0, [pc, #256]	; (800ccb8 <tcp_create_segment+0x130>)
 800cbb8:	f004 fbde 	bl	8011378 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cbbc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	b2db      	uxtb	r3, r3
 800cbc4:	f003 0304 	and.w	r3, r3, #4
 800cbc8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800cbca:	2003      	movs	r0, #3
 800cbcc:	f7fa ff04 	bl	80079d8 <memp_malloc>
 800cbd0:	6138      	str	r0, [r7, #16]
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d104      	bne.n	800cbe2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800cbd8:	68b8      	ldr	r0, [r7, #8]
 800cbda:	f7fb fde3 	bl	80087a4 <pbuf_free>
    return NULL;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	e061      	b.n	800cca6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800cbe8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	2200      	movs	r2, #0
 800cbee:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	68ba      	ldr	r2, [r7, #8]
 800cbf4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	891a      	ldrh	r2, [r3, #8]
 800cbfa:	7dfb      	ldrb	r3, [r7, #23]
 800cbfc:	b29b      	uxth	r3, r3
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d205      	bcs.n	800cc0e <tcp_create_segment+0x86>
 800cc02:	4b2b      	ldr	r3, [pc, #172]	; (800ccb0 <tcp_create_segment+0x128>)
 800cc04:	22b0      	movs	r2, #176	; 0xb0
 800cc06:	492e      	ldr	r1, [pc, #184]	; (800ccc0 <tcp_create_segment+0x138>)
 800cc08:	482b      	ldr	r0, [pc, #172]	; (800ccb8 <tcp_create_segment+0x130>)
 800cc0a:	f004 fbb5 	bl	8011378 <iprintf>
  seg->len = p->tot_len - optlen;
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	891a      	ldrh	r2, [r3, #8]
 800cc12:	7dfb      	ldrb	r3, [r7, #23]
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	1ad3      	subs	r3, r2, r3
 800cc18:	b29a      	uxth	r2, r3
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800cc1e:	2114      	movs	r1, #20
 800cc20:	68b8      	ldr	r0, [r7, #8]
 800cc22:	f7fb fd29 	bl	8008678 <pbuf_add_header>
 800cc26:	4603      	mov	r3, r0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d004      	beq.n	800cc36 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800cc2c:	6938      	ldr	r0, [r7, #16]
 800cc2e:	f7fd f8ce 	bl	8009dce <tcp_seg_free>
    return NULL;
 800cc32:	2300      	movs	r3, #0
 800cc34:	e037      	b.n	800cca6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	685a      	ldr	r2, [r3, #4]
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	8ada      	ldrh	r2, [r3, #22]
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	68dc      	ldr	r4, [r3, #12]
 800cc48:	4610      	mov	r0, r2
 800cc4a:	f7fa fa4d 	bl	80070e8 <lwip_htons>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	8b1a      	ldrh	r2, [r3, #24]
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	68dc      	ldr	r4, [r3, #12]
 800cc5a:	4610      	mov	r0, r2
 800cc5c:	f7fa fa44 	bl	80070e8 <lwip_htons>
 800cc60:	4603      	mov	r3, r0
 800cc62:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	68dc      	ldr	r4, [r3, #12]
 800cc68:	6838      	ldr	r0, [r7, #0]
 800cc6a:	f7fa fa52 	bl	8007112 <lwip_htonl>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800cc72:	7dfb      	ldrb	r3, [r7, #23]
 800cc74:	089b      	lsrs	r3, r3, #2
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	3305      	adds	r3, #5
 800cc7c:	b29b      	uxth	r3, r3
 800cc7e:	031b      	lsls	r3, r3, #12
 800cc80:	b29a      	uxth	r2, r3
 800cc82:	79fb      	ldrb	r3, [r7, #7]
 800cc84:	b29b      	uxth	r3, r3
 800cc86:	4313      	orrs	r3, r2
 800cc88:	b29a      	uxth	r2, r3
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	68dc      	ldr	r4, [r3, #12]
 800cc8e:	4610      	mov	r0, r2
 800cc90:	f7fa fa2a 	bl	80070e8 <lwip_htons>
 800cc94:	4603      	mov	r3, r0
 800cc96:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	68db      	ldr	r3, [r3, #12]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	749a      	strb	r2, [r3, #18]
 800cca0:	2200      	movs	r2, #0
 800cca2:	74da      	strb	r2, [r3, #19]
  return seg;
 800cca4:	693b      	ldr	r3, [r7, #16]
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	371c      	adds	r7, #28
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd90      	pop	{r4, r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	08013f20 	.word	0x08013f20
 800ccb4:	08013f54 	.word	0x08013f54
 800ccb8:	08013f74 	.word	0x08013f74
 800ccbc:	08013f9c 	.word	0x08013f9c
 800ccc0:	08013fc0 	.word	0x08013fc0

0800ccc4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ccc4:	b590      	push	{r4, r7, lr}
 800ccc6:	b08b      	sub	sp, #44	; 0x2c
 800ccc8:	af02      	add	r7, sp, #8
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	460b      	mov	r3, r1
 800ccce:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	61fb      	str	r3, [r7, #28]
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d106      	bne.n	800ccf0 <tcp_split_unsent_seg+0x2c>
 800cce2:	4b95      	ldr	r3, [pc, #596]	; (800cf38 <tcp_split_unsent_seg+0x274>)
 800cce4:	f240 324b 	movw	r2, #843	; 0x34b
 800cce8:	4994      	ldr	r1, [pc, #592]	; (800cf3c <tcp_split_unsent_seg+0x278>)
 800ccea:	4895      	ldr	r0, [pc, #596]	; (800cf40 <tcp_split_unsent_seg+0x27c>)
 800ccec:	f004 fb44 	bl	8011378 <iprintf>

  useg = pcb->unsent;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccf4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d102      	bne.n	800cd02 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ccfc:	f04f 33ff 	mov.w	r3, #4294967295
 800cd00:	e116      	b.n	800cf30 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800cd02:	887b      	ldrh	r3, [r7, #2]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d109      	bne.n	800cd1c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800cd08:	4b8b      	ldr	r3, [pc, #556]	; (800cf38 <tcp_split_unsent_seg+0x274>)
 800cd0a:	f240 3253 	movw	r2, #851	; 0x353
 800cd0e:	498d      	ldr	r1, [pc, #564]	; (800cf44 <tcp_split_unsent_seg+0x280>)
 800cd10:	488b      	ldr	r0, [pc, #556]	; (800cf40 <tcp_split_unsent_seg+0x27c>)
 800cd12:	f004 fb31 	bl	8011378 <iprintf>
    return ERR_VAL;
 800cd16:	f06f 0305 	mvn.w	r3, #5
 800cd1a:	e109      	b.n	800cf30 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	891b      	ldrh	r3, [r3, #8]
 800cd20:	887a      	ldrh	r2, [r7, #2]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d301      	bcc.n	800cd2a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800cd26:	2300      	movs	r3, #0
 800cd28:	e102      	b.n	800cf30 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd2e:	887a      	ldrh	r2, [r7, #2]
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d906      	bls.n	800cd42 <tcp_split_unsent_seg+0x7e>
 800cd34:	4b80      	ldr	r3, [pc, #512]	; (800cf38 <tcp_split_unsent_seg+0x274>)
 800cd36:	f240 325b 	movw	r2, #859	; 0x35b
 800cd3a:	4983      	ldr	r1, [pc, #524]	; (800cf48 <tcp_split_unsent_seg+0x284>)
 800cd3c:	4880      	ldr	r0, [pc, #512]	; (800cf40 <tcp_split_unsent_seg+0x27c>)
 800cd3e:	f004 fb1b 	bl	8011378 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	891b      	ldrh	r3, [r3, #8]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d106      	bne.n	800cd58 <tcp_split_unsent_seg+0x94>
 800cd4a:	4b7b      	ldr	r3, [pc, #492]	; (800cf38 <tcp_split_unsent_seg+0x274>)
 800cd4c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800cd50:	497e      	ldr	r1, [pc, #504]	; (800cf4c <tcp_split_unsent_seg+0x288>)
 800cd52:	487b      	ldr	r0, [pc, #492]	; (800cf40 <tcp_split_unsent_seg+0x27c>)
 800cd54:	f004 fb10 	bl	8011378 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	7a9b      	ldrb	r3, [r3, #10]
 800cd5c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800cd5e:	7bfb      	ldrb	r3, [r7, #15]
 800cd60:	009b      	lsls	r3, r3, #2
 800cd62:	b2db      	uxtb	r3, r3
 800cd64:	f003 0304 	and.w	r3, r3, #4
 800cd68:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	891a      	ldrh	r2, [r3, #8]
 800cd6e:	887b      	ldrh	r3, [r7, #2]
 800cd70:	1ad3      	subs	r3, r2, r3
 800cd72:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800cd74:	7bbb      	ldrb	r3, [r7, #14]
 800cd76:	b29a      	uxth	r2, r3
 800cd78:	89bb      	ldrh	r3, [r7, #12]
 800cd7a:	4413      	add	r3, r2
 800cd7c:	b29b      	uxth	r3, r3
 800cd7e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cd82:	4619      	mov	r1, r3
 800cd84:	2036      	movs	r0, #54	; 0x36
 800cd86:	f7fb fa29 	bl	80081dc <pbuf_alloc>
 800cd8a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	f000 80b7 	beq.w	800cf02 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	685b      	ldr	r3, [r3, #4]
 800cd98:	891a      	ldrh	r2, [r3, #8]
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	891b      	ldrh	r3, [r3, #8]
 800cd9e:	1ad3      	subs	r3, r2, r3
 800cda0:	b29a      	uxth	r2, r3
 800cda2:	887b      	ldrh	r3, [r7, #2]
 800cda4:	4413      	add	r3, r2
 800cda6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	6858      	ldr	r0, [r3, #4]
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	685a      	ldr	r2, [r3, #4]
 800cdb0:	7bbb      	ldrb	r3, [r7, #14]
 800cdb2:	18d1      	adds	r1, r2, r3
 800cdb4:	897b      	ldrh	r3, [r7, #10]
 800cdb6:	89ba      	ldrh	r2, [r7, #12]
 800cdb8:	f7fb feee 	bl	8008b98 <pbuf_copy_partial>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	461a      	mov	r2, r3
 800cdc0:	89bb      	ldrh	r3, [r7, #12]
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	f040 809f 	bne.w	800cf06 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	68db      	ldr	r3, [r3, #12]
 800cdcc:	899b      	ldrh	r3, [r3, #12]
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7fa f989 	bl	80070e8 <lwip_htons>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	b2db      	uxtb	r3, r3
 800cdda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cdde:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800cde0:	2300      	movs	r3, #0
 800cde2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800cde4:	7efb      	ldrb	r3, [r7, #27]
 800cde6:	f003 0308 	and.w	r3, r3, #8
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d007      	beq.n	800cdfe <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800cdee:	7efb      	ldrb	r3, [r7, #27]
 800cdf0:	f023 0308 	bic.w	r3, r3, #8
 800cdf4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800cdf6:	7ebb      	ldrb	r3, [r7, #26]
 800cdf8:	f043 0308 	orr.w	r3, r3, #8
 800cdfc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800cdfe:	7efb      	ldrb	r3, [r7, #27]
 800ce00:	f003 0301 	and.w	r3, r3, #1
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d007      	beq.n	800ce18 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ce08:	7efb      	ldrb	r3, [r7, #27]
 800ce0a:	f023 0301 	bic.w	r3, r3, #1
 800ce0e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ce10:	7ebb      	ldrb	r3, [r7, #26]
 800ce12:	f043 0301 	orr.w	r3, r3, #1
 800ce16:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	68db      	ldr	r3, [r3, #12]
 800ce1c:	685b      	ldr	r3, [r3, #4]
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f7fa f977 	bl	8007112 <lwip_htonl>
 800ce24:	4602      	mov	r2, r0
 800ce26:	887b      	ldrh	r3, [r7, #2]
 800ce28:	18d1      	adds	r1, r2, r3
 800ce2a:	7eba      	ldrb	r2, [r7, #26]
 800ce2c:	7bfb      	ldrb	r3, [r7, #15]
 800ce2e:	9300      	str	r3, [sp, #0]
 800ce30:	460b      	mov	r3, r1
 800ce32:	6939      	ldr	r1, [r7, #16]
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f7ff fea7 	bl	800cb88 <tcp_create_segment>
 800ce3a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ce3c:	69fb      	ldr	r3, [r7, #28]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d063      	beq.n	800cf0a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	4618      	mov	r0, r3
 800ce48:	f7fb fd34 	bl	80088b4 <pbuf_clen>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	461a      	mov	r2, r3
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ce56:	1a9b      	subs	r3, r3, r2
 800ce58:	b29a      	uxth	r2, r3
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	6858      	ldr	r0, [r3, #4]
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	685b      	ldr	r3, [r3, #4]
 800ce68:	891a      	ldrh	r2, [r3, #8]
 800ce6a:	89bb      	ldrh	r3, [r7, #12]
 800ce6c:	1ad3      	subs	r3, r2, r3
 800ce6e:	b29b      	uxth	r3, r3
 800ce70:	4619      	mov	r1, r3
 800ce72:	f7fb fb11 	bl	8008498 <pbuf_realloc>
  useg->len -= remainder;
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	891a      	ldrh	r2, [r3, #8]
 800ce7a:	89bb      	ldrh	r3, [r7, #12]
 800ce7c:	1ad3      	subs	r3, r2, r3
 800ce7e:	b29a      	uxth	r2, r3
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	68db      	ldr	r3, [r3, #12]
 800ce88:	899b      	ldrh	r3, [r3, #12]
 800ce8a:	b29c      	uxth	r4, r3
 800ce8c:	7efb      	ldrb	r3, [r7, #27]
 800ce8e:	b29b      	uxth	r3, r3
 800ce90:	4618      	mov	r0, r3
 800ce92:	f7fa f929 	bl	80070e8 <lwip_htons>
 800ce96:	4603      	mov	r3, r0
 800ce98:	461a      	mov	r2, r3
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	68db      	ldr	r3, [r3, #12]
 800ce9e:	4322      	orrs	r2, r4
 800cea0:	b292      	uxth	r2, r2
 800cea2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	685b      	ldr	r3, [r3, #4]
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f7fb fd03 	bl	80088b4 <pbuf_clen>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	461a      	mov	r2, r3
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ceb8:	4413      	add	r3, r2
 800ceba:	b29a      	uxth	r2, r3
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cec2:	69fb      	ldr	r3, [r7, #28]
 800cec4:	685b      	ldr	r3, [r3, #4]
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7fb fcf4 	bl	80088b4 <pbuf_clen>
 800cecc:	4603      	mov	r3, r0
 800cece:	461a      	mov	r2, r3
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ced6:	4413      	add	r3, r2
 800ced8:	b29a      	uxth	r2, r3
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	681a      	ldr	r2, [r3, #0]
 800cee4:	69fb      	ldr	r3, [r7, #28]
 800cee6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	69fa      	ldr	r2, [r7, #28]
 800ceec:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ceee:	69fb      	ldr	r3, [r7, #28]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d103      	bne.n	800cefe <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2200      	movs	r2, #0
 800cefa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800cefe:	2300      	movs	r3, #0
 800cf00:	e016      	b.n	800cf30 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800cf02:	bf00      	nop
 800cf04:	e002      	b.n	800cf0c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cf06:	bf00      	nop
 800cf08:	e000      	b.n	800cf0c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cf0a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800cf0c:	69fb      	ldr	r3, [r7, #28]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d006      	beq.n	800cf20 <tcp_split_unsent_seg+0x25c>
 800cf12:	4b09      	ldr	r3, [pc, #36]	; (800cf38 <tcp_split_unsent_seg+0x274>)
 800cf14:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800cf18:	490d      	ldr	r1, [pc, #52]	; (800cf50 <tcp_split_unsent_seg+0x28c>)
 800cf1a:	4809      	ldr	r0, [pc, #36]	; (800cf40 <tcp_split_unsent_seg+0x27c>)
 800cf1c:	f004 fa2c 	bl	8011378 <iprintf>
  if (p != NULL) {
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d002      	beq.n	800cf2c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800cf26:	6938      	ldr	r0, [r7, #16]
 800cf28:	f7fb fc3c 	bl	80087a4 <pbuf_free>
  }

  return ERR_MEM;
 800cf2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3724      	adds	r7, #36	; 0x24
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd90      	pop	{r4, r7, pc}
 800cf38:	08013f20 	.word	0x08013f20
 800cf3c:	080142b4 	.word	0x080142b4
 800cf40:	08013f74 	.word	0x08013f74
 800cf44:	080142d8 	.word	0x080142d8
 800cf48:	080142fc 	.word	0x080142fc
 800cf4c:	0801430c 	.word	0x0801430c
 800cf50:	0801431c 	.word	0x0801431c

0800cf54 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800cf54:	b590      	push	{r4, r7, lr}
 800cf56:	b085      	sub	sp, #20
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d106      	bne.n	800cf70 <tcp_send_fin+0x1c>
 800cf62:	4b21      	ldr	r3, [pc, #132]	; (800cfe8 <tcp_send_fin+0x94>)
 800cf64:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800cf68:	4920      	ldr	r1, [pc, #128]	; (800cfec <tcp_send_fin+0x98>)
 800cf6a:	4821      	ldr	r0, [pc, #132]	; (800cff0 <tcp_send_fin+0x9c>)
 800cf6c:	f004 fa04 	bl	8011378 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d02e      	beq.n	800cfd6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf7c:	60fb      	str	r3, [r7, #12]
 800cf7e:	e002      	b.n	800cf86 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d1f8      	bne.n	800cf80 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	68db      	ldr	r3, [r3, #12]
 800cf92:	899b      	ldrh	r3, [r3, #12]
 800cf94:	b29b      	uxth	r3, r3
 800cf96:	4618      	mov	r0, r3
 800cf98:	f7fa f8a6 	bl	80070e8 <lwip_htons>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	b2db      	uxtb	r3, r3
 800cfa0:	f003 0307 	and.w	r3, r3, #7
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d116      	bne.n	800cfd6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	68db      	ldr	r3, [r3, #12]
 800cfac:	899b      	ldrh	r3, [r3, #12]
 800cfae:	b29c      	uxth	r4, r3
 800cfb0:	2001      	movs	r0, #1
 800cfb2:	f7fa f899 	bl	80070e8 <lwip_htons>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	461a      	mov	r2, r3
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	68db      	ldr	r3, [r3, #12]
 800cfbe:	4322      	orrs	r2, r4
 800cfc0:	b292      	uxth	r2, r2
 800cfc2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	8b5b      	ldrh	r3, [r3, #26]
 800cfc8:	f043 0320 	orr.w	r3, r3, #32
 800cfcc:	b29a      	uxth	r2, r3
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	e004      	b.n	800cfe0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cfd6:	2101      	movs	r1, #1
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f000 f80b 	bl	800cff4 <tcp_enqueue_flags>
 800cfde:	4603      	mov	r3, r0
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3714      	adds	r7, #20
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd90      	pop	{r4, r7, pc}
 800cfe8:	08013f20 	.word	0x08013f20
 800cfec:	08014328 	.word	0x08014328
 800cff0:	08013f74 	.word	0x08013f74

0800cff4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b08a      	sub	sp, #40	; 0x28
 800cff8:	af02      	add	r7, sp, #8
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	460b      	mov	r3, r1
 800cffe:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d000:	2300      	movs	r3, #0
 800d002:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800d004:	2300      	movs	r3, #0
 800d006:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d008:	78fb      	ldrb	r3, [r7, #3]
 800d00a:	f003 0303 	and.w	r3, r3, #3
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d106      	bne.n	800d020 <tcp_enqueue_flags+0x2c>
 800d012:	4b67      	ldr	r3, [pc, #412]	; (800d1b0 <tcp_enqueue_flags+0x1bc>)
 800d014:	f240 4211 	movw	r2, #1041	; 0x411
 800d018:	4966      	ldr	r1, [pc, #408]	; (800d1b4 <tcp_enqueue_flags+0x1c0>)
 800d01a:	4867      	ldr	r0, [pc, #412]	; (800d1b8 <tcp_enqueue_flags+0x1c4>)
 800d01c:	f004 f9ac 	bl	8011378 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d106      	bne.n	800d034 <tcp_enqueue_flags+0x40>
 800d026:	4b62      	ldr	r3, [pc, #392]	; (800d1b0 <tcp_enqueue_flags+0x1bc>)
 800d028:	f240 4213 	movw	r2, #1043	; 0x413
 800d02c:	4963      	ldr	r1, [pc, #396]	; (800d1bc <tcp_enqueue_flags+0x1c8>)
 800d02e:	4862      	ldr	r0, [pc, #392]	; (800d1b8 <tcp_enqueue_flags+0x1c4>)
 800d030:	f004 f9a2 	bl	8011378 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800d034:	78fb      	ldrb	r3, [r7, #3]
 800d036:	f003 0302 	and.w	r3, r3, #2
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d001      	beq.n	800d042 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800d03e:	2301      	movs	r3, #1
 800d040:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d042:	7ffb      	ldrb	r3, [r7, #31]
 800d044:	009b      	lsls	r3, r3, #2
 800d046:	b2db      	uxtb	r3, r3
 800d048:	f003 0304 	and.w	r3, r3, #4
 800d04c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d04e:	7dfb      	ldrb	r3, [r7, #23]
 800d050:	b29b      	uxth	r3, r3
 800d052:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d056:	4619      	mov	r1, r3
 800d058:	2036      	movs	r0, #54	; 0x36
 800d05a:	f7fb f8bf 	bl	80081dc <pbuf_alloc>
 800d05e:	6138      	str	r0, [r7, #16]
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d109      	bne.n	800d07a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	8b5b      	ldrh	r3, [r3, #26]
 800d06a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d06e:	b29a      	uxth	r2, r3
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d074:	f04f 33ff 	mov.w	r3, #4294967295
 800d078:	e095      	b.n	800d1a6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	895a      	ldrh	r2, [r3, #10]
 800d07e:	7dfb      	ldrb	r3, [r7, #23]
 800d080:	b29b      	uxth	r3, r3
 800d082:	429a      	cmp	r2, r3
 800d084:	d206      	bcs.n	800d094 <tcp_enqueue_flags+0xa0>
 800d086:	4b4a      	ldr	r3, [pc, #296]	; (800d1b0 <tcp_enqueue_flags+0x1bc>)
 800d088:	f240 4239 	movw	r2, #1081	; 0x439
 800d08c:	494c      	ldr	r1, [pc, #304]	; (800d1c0 <tcp_enqueue_flags+0x1cc>)
 800d08e:	484a      	ldr	r0, [pc, #296]	; (800d1b8 <tcp_enqueue_flags+0x1c4>)
 800d090:	f004 f972 	bl	8011378 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800d098:	78fa      	ldrb	r2, [r7, #3]
 800d09a:	7ffb      	ldrb	r3, [r7, #31]
 800d09c:	9300      	str	r3, [sp, #0]
 800d09e:	460b      	mov	r3, r1
 800d0a0:	6939      	ldr	r1, [r7, #16]
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f7ff fd70 	bl	800cb88 <tcp_create_segment>
 800d0a8:	60f8      	str	r0, [r7, #12]
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d109      	bne.n	800d0c4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	8b5b      	ldrh	r3, [r3, #26]
 800d0b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0b8:	b29a      	uxth	r2, r3
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d0be:	f04f 33ff 	mov.w	r3, #4294967295
 800d0c2:	e070      	b.n	800d1a6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	68db      	ldr	r3, [r3, #12]
 800d0c8:	f003 0303 	and.w	r3, r3, #3
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d006      	beq.n	800d0de <tcp_enqueue_flags+0xea>
 800d0d0:	4b37      	ldr	r3, [pc, #220]	; (800d1b0 <tcp_enqueue_flags+0x1bc>)
 800d0d2:	f240 4242 	movw	r2, #1090	; 0x442
 800d0d6:	493b      	ldr	r1, [pc, #236]	; (800d1c4 <tcp_enqueue_flags+0x1d0>)
 800d0d8:	4837      	ldr	r0, [pc, #220]	; (800d1b8 <tcp_enqueue_flags+0x1c4>)
 800d0da:	f004 f94d 	bl	8011378 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	891b      	ldrh	r3, [r3, #8]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d006      	beq.n	800d0f4 <tcp_enqueue_flags+0x100>
 800d0e6:	4b32      	ldr	r3, [pc, #200]	; (800d1b0 <tcp_enqueue_flags+0x1bc>)
 800d0e8:	f240 4243 	movw	r2, #1091	; 0x443
 800d0ec:	4936      	ldr	r1, [pc, #216]	; (800d1c8 <tcp_enqueue_flags+0x1d4>)
 800d0ee:	4832      	ldr	r0, [pc, #200]	; (800d1b8 <tcp_enqueue_flags+0x1c4>)
 800d0f0:	f004 f942 	bl	8011378 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d103      	bne.n	800d104 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	68fa      	ldr	r2, [r7, #12]
 800d100:	66da      	str	r2, [r3, #108]	; 0x6c
 800d102:	e00d      	b.n	800d120 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d108:	61bb      	str	r3, [r7, #24]
 800d10a:	e002      	b.n	800d112 <tcp_enqueue_flags+0x11e>
 800d10c:	69bb      	ldr	r3, [r7, #24]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	61bb      	str	r3, [r7, #24]
 800d112:	69bb      	ldr	r3, [r7, #24]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d1f8      	bne.n	800d10c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800d11a:	69bb      	ldr	r3, [r7, #24]
 800d11c:	68fa      	ldr	r2, [r7, #12]
 800d11e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2200      	movs	r2, #0
 800d124:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d128:	78fb      	ldrb	r3, [r7, #3]
 800d12a:	f003 0302 	and.w	r3, r3, #2
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d104      	bne.n	800d13c <tcp_enqueue_flags+0x148>
 800d132:	78fb      	ldrb	r3, [r7, #3]
 800d134:	f003 0301 	and.w	r3, r3, #1
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d004      	beq.n	800d146 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d140:	1c5a      	adds	r2, r3, #1
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d146:	78fb      	ldrb	r3, [r7, #3]
 800d148:	f003 0301 	and.w	r3, r3, #1
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d006      	beq.n	800d15e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	8b5b      	ldrh	r3, [r3, #26]
 800d154:	f043 0320 	orr.w	r3, r3, #32
 800d158:	b29a      	uxth	r2, r3
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	4618      	mov	r0, r3
 800d164:	f7fb fba6 	bl	80088b4 <pbuf_clen>
 800d168:	4603      	mov	r3, r0
 800d16a:	461a      	mov	r2, r3
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d172:	4413      	add	r3, r2
 800d174:	b29a      	uxth	r2, r3
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d182:	2b00      	cmp	r3, #0
 800d184:	d00e      	beq.n	800d1a4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d10a      	bne.n	800d1a4 <tcp_enqueue_flags+0x1b0>
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d192:	2b00      	cmp	r3, #0
 800d194:	d106      	bne.n	800d1a4 <tcp_enqueue_flags+0x1b0>
 800d196:	4b06      	ldr	r3, [pc, #24]	; (800d1b0 <tcp_enqueue_flags+0x1bc>)
 800d198:	f240 4265 	movw	r2, #1125	; 0x465
 800d19c:	490b      	ldr	r1, [pc, #44]	; (800d1cc <tcp_enqueue_flags+0x1d8>)
 800d19e:	4806      	ldr	r0, [pc, #24]	; (800d1b8 <tcp_enqueue_flags+0x1c4>)
 800d1a0:	f004 f8ea 	bl	8011378 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d1a4:	2300      	movs	r3, #0
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3720      	adds	r7, #32
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	08013f20 	.word	0x08013f20
 800d1b4:	08014344 	.word	0x08014344
 800d1b8:	08013f74 	.word	0x08013f74
 800d1bc:	0801439c 	.word	0x0801439c
 800d1c0:	080143bc 	.word	0x080143bc
 800d1c4:	080143f8 	.word	0x080143f8
 800d1c8:	08014410 	.word	0x08014410
 800d1cc:	0801443c 	.word	0x0801443c

0800d1d0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d1d0:	b5b0      	push	{r4, r5, r7, lr}
 800d1d2:	b08a      	sub	sp, #40	; 0x28
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d106      	bne.n	800d1ec <tcp_output+0x1c>
 800d1de:	4b8a      	ldr	r3, [pc, #552]	; (800d408 <tcp_output+0x238>)
 800d1e0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d1e4:	4989      	ldr	r1, [pc, #548]	; (800d40c <tcp_output+0x23c>)
 800d1e6:	488a      	ldr	r0, [pc, #552]	; (800d410 <tcp_output+0x240>)
 800d1e8:	f004 f8c6 	bl	8011378 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	7d1b      	ldrb	r3, [r3, #20]
 800d1f0:	2b01      	cmp	r3, #1
 800d1f2:	d106      	bne.n	800d202 <tcp_output+0x32>
 800d1f4:	4b84      	ldr	r3, [pc, #528]	; (800d408 <tcp_output+0x238>)
 800d1f6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d1fa:	4986      	ldr	r1, [pc, #536]	; (800d414 <tcp_output+0x244>)
 800d1fc:	4884      	ldr	r0, [pc, #528]	; (800d410 <tcp_output+0x240>)
 800d1fe:	f004 f8bb 	bl	8011378 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d202:	4b85      	ldr	r3, [pc, #532]	; (800d418 <tcp_output+0x248>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	687a      	ldr	r2, [r7, #4]
 800d208:	429a      	cmp	r2, r3
 800d20a:	d101      	bne.n	800d210 <tcp_output+0x40>
    return ERR_OK;
 800d20c:	2300      	movs	r3, #0
 800d20e:	e1ce      	b.n	800d5ae <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d21c:	4293      	cmp	r3, r2
 800d21e:	bf28      	it	cs
 800d220:	4613      	movcs	r3, r2
 800d222:	b29b      	uxth	r3, r3
 800d224:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d22a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800d22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d10b      	bne.n	800d24a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	8b5b      	ldrh	r3, [r3, #26]
 800d236:	f003 0302 	and.w	r3, r3, #2
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	f000 81aa 	beq.w	800d594 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f000 fdcb 	bl	800dddc <tcp_send_empty_ack>
 800d246:	4603      	mov	r3, r0
 800d248:	e1b1      	b.n	800d5ae <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d24a:	6879      	ldr	r1, [r7, #4]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	3304      	adds	r3, #4
 800d250:	461a      	mov	r2, r3
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f7ff fc7c 	bl	800cb50 <tcp_route>
 800d258:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d102      	bne.n	800d266 <tcp_output+0x96>
    return ERR_RTE;
 800d260:	f06f 0303 	mvn.w	r3, #3
 800d264:	e1a3      	b.n	800d5ae <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d003      	beq.n	800d274 <tcp_output+0xa4>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d111      	bne.n	800d298 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d002      	beq.n	800d280 <tcp_output+0xb0>
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	3304      	adds	r3, #4
 800d27e:	e000      	b.n	800d282 <tcp_output+0xb2>
 800d280:	2300      	movs	r3, #0
 800d282:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d102      	bne.n	800d290 <tcp_output+0xc0>
      return ERR_RTE;
 800d28a:	f06f 0303 	mvn.w	r3, #3
 800d28e:	e18e      	b.n	800d5ae <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	681a      	ldr	r2, [r3, #0]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29a:	68db      	ldr	r3, [r3, #12]
 800d29c:	685b      	ldr	r3, [r3, #4]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7f9 ff37 	bl	8007112 <lwip_htonl>
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2aa:	1ad3      	subs	r3, r2, r3
 800d2ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2ae:	8912      	ldrh	r2, [r2, #8]
 800d2b0:	4413      	add	r3, r2
 800d2b2:	69ba      	ldr	r2, [r7, #24]
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d227      	bcs.n	800d308 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d2be:	461a      	mov	r2, r3
 800d2c0:	69bb      	ldr	r3, [r7, #24]
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d114      	bne.n	800d2f0 <tcp_output+0x120>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d110      	bne.n	800d2f0 <tcp_output+0x120>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d10b      	bne.n	800d2f0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2201      	movs	r2, #1
 800d2e4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	8b5b      	ldrh	r3, [r3, #26]
 800d2f4:	f003 0302 	and.w	r3, r3, #2
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	f000 814d 	beq.w	800d598 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f000 fd6c 	bl	800dddc <tcp_send_empty_ack>
 800d304:	4603      	mov	r3, r0
 800d306:	e152      	b.n	800d5ae <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2200      	movs	r2, #0
 800d30c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d314:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d316:	6a3b      	ldr	r3, [r7, #32]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	f000 811c 	beq.w	800d556 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d31e:	e002      	b.n	800d326 <tcp_output+0x156>
 800d320:	6a3b      	ldr	r3, [r7, #32]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	623b      	str	r3, [r7, #32]
 800d326:	6a3b      	ldr	r3, [r7, #32]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d1f8      	bne.n	800d320 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d32e:	e112      	b.n	800d556 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	899b      	ldrh	r3, [r3, #12]
 800d336:	b29b      	uxth	r3, r3
 800d338:	4618      	mov	r0, r3
 800d33a:	f7f9 fed5 	bl	80070e8 <lwip_htons>
 800d33e:	4603      	mov	r3, r0
 800d340:	b2db      	uxtb	r3, r3
 800d342:	f003 0304 	and.w	r3, r3, #4
 800d346:	2b00      	cmp	r3, #0
 800d348:	d006      	beq.n	800d358 <tcp_output+0x188>
 800d34a:	4b2f      	ldr	r3, [pc, #188]	; (800d408 <tcp_output+0x238>)
 800d34c:	f240 5236 	movw	r2, #1334	; 0x536
 800d350:	4932      	ldr	r1, [pc, #200]	; (800d41c <tcp_output+0x24c>)
 800d352:	482f      	ldr	r0, [pc, #188]	; (800d410 <tcp_output+0x240>)
 800d354:	f004 f810 	bl	8011378 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d01f      	beq.n	800d3a0 <tcp_output+0x1d0>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	8b5b      	ldrh	r3, [r3, #26]
 800d364:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d119      	bne.n	800d3a0 <tcp_output+0x1d0>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d370:	2b00      	cmp	r3, #0
 800d372:	d00b      	beq.n	800d38c <tcp_output+0x1bc>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d110      	bne.n	800d3a0 <tcp_output+0x1d0>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d382:	891a      	ldrh	r2, [r3, #8]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d388:	429a      	cmp	r2, r3
 800d38a:	d209      	bcs.n	800d3a0 <tcp_output+0x1d0>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d392:	2b00      	cmp	r3, #0
 800d394:	d004      	beq.n	800d3a0 <tcp_output+0x1d0>
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d39c:	2b08      	cmp	r3, #8
 800d39e:	d901      	bls.n	800d3a4 <tcp_output+0x1d4>
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	e000      	b.n	800d3a6 <tcp_output+0x1d6>
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d106      	bne.n	800d3b8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	8b5b      	ldrh	r3, [r3, #26]
 800d3ae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	f000 80e4 	beq.w	800d580 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	7d1b      	ldrb	r3, [r3, #20]
 800d3bc:	2b02      	cmp	r3, #2
 800d3be:	d00d      	beq.n	800d3dc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c2:	68db      	ldr	r3, [r3, #12]
 800d3c4:	899b      	ldrh	r3, [r3, #12]
 800d3c6:	b29c      	uxth	r4, r3
 800d3c8:	2010      	movs	r0, #16
 800d3ca:	f7f9 fe8d 	bl	80070e8 <lwip_htons>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d4:	68db      	ldr	r3, [r3, #12]
 800d3d6:	4322      	orrs	r2, r4
 800d3d8:	b292      	uxth	r2, r2
 800d3da:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d3dc:	697a      	ldr	r2, [r7, #20]
 800d3de:	6879      	ldr	r1, [r7, #4]
 800d3e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3e2:	f000 f909 	bl	800d5f8 <tcp_output_segment>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d3ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d016      	beq.n	800d420 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	8b5b      	ldrh	r3, [r3, #26]
 800d3f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3fa:	b29a      	uxth	r2, r3
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	835a      	strh	r2, [r3, #26]
      return err;
 800d400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d404:	e0d3      	b.n	800d5ae <tcp_output+0x3de>
 800d406:	bf00      	nop
 800d408:	08013f20 	.word	0x08013f20
 800d40c:	08014464 	.word	0x08014464
 800d410:	08013f74 	.word	0x08013f74
 800d414:	0801447c 	.word	0x0801447c
 800d418:	2000bc78 	.word	0x2000bc78
 800d41c:	080144a4 	.word	0x080144a4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d422:	681a      	ldr	r2, [r3, #0]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	7d1b      	ldrb	r3, [r3, #20]
 800d42c:	2b02      	cmp	r3, #2
 800d42e:	d006      	beq.n	800d43e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	8b5b      	ldrh	r3, [r3, #26]
 800d434:	f023 0303 	bic.w	r3, r3, #3
 800d438:	b29a      	uxth	r2, r3
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d440:	68db      	ldr	r3, [r3, #12]
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	4618      	mov	r0, r3
 800d446:	f7f9 fe64 	bl	8007112 <lwip_htonl>
 800d44a:	4604      	mov	r4, r0
 800d44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d44e:	891b      	ldrh	r3, [r3, #8]
 800d450:	461d      	mov	r5, r3
 800d452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d454:	68db      	ldr	r3, [r3, #12]
 800d456:	899b      	ldrh	r3, [r3, #12]
 800d458:	b29b      	uxth	r3, r3
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7f9 fe44 	bl	80070e8 <lwip_htons>
 800d460:	4603      	mov	r3, r0
 800d462:	b2db      	uxtb	r3, r3
 800d464:	f003 0303 	and.w	r3, r3, #3
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d001      	beq.n	800d470 <tcp_output+0x2a0>
 800d46c:	2301      	movs	r3, #1
 800d46e:	e000      	b.n	800d472 <tcp_output+0x2a2>
 800d470:	2300      	movs	r3, #0
 800d472:	442b      	add	r3, r5
 800d474:	4423      	add	r3, r4
 800d476:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	1ad3      	subs	r3, r2, r3
 800d480:	2b00      	cmp	r3, #0
 800d482:	da02      	bge.n	800d48a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	68ba      	ldr	r2, [r7, #8]
 800d488:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48c:	891b      	ldrh	r3, [r3, #8]
 800d48e:	461c      	mov	r4, r3
 800d490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d492:	68db      	ldr	r3, [r3, #12]
 800d494:	899b      	ldrh	r3, [r3, #12]
 800d496:	b29b      	uxth	r3, r3
 800d498:	4618      	mov	r0, r3
 800d49a:	f7f9 fe25 	bl	80070e8 <lwip_htons>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	b2db      	uxtb	r3, r3
 800d4a2:	f003 0303 	and.w	r3, r3, #3
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d001      	beq.n	800d4ae <tcp_output+0x2de>
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	e000      	b.n	800d4b0 <tcp_output+0x2e0>
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	4423      	add	r3, r4
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d049      	beq.n	800d54a <tcp_output+0x37a>
      seg->next = NULL;
 800d4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d105      	bne.n	800d4d0 <tcp_output+0x300>
        pcb->unacked = seg;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4c8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800d4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4cc:	623b      	str	r3, [r7, #32]
 800d4ce:	e03f      	b.n	800d550 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d2:	68db      	ldr	r3, [r3, #12]
 800d4d4:	685b      	ldr	r3, [r3, #4]
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7f9 fe1b 	bl	8007112 <lwip_htonl>
 800d4dc:	4604      	mov	r4, r0
 800d4de:	6a3b      	ldr	r3, [r7, #32]
 800d4e0:	68db      	ldr	r3, [r3, #12]
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f7f9 fe14 	bl	8007112 <lwip_htonl>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	1ae3      	subs	r3, r4, r3
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	da24      	bge.n	800d53c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	3370      	adds	r3, #112	; 0x70
 800d4f6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d4f8:	e002      	b.n	800d500 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d4fa:	69fb      	ldr	r3, [r7, #28]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d500:	69fb      	ldr	r3, [r7, #28]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d011      	beq.n	800d52c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d508:	69fb      	ldr	r3, [r7, #28]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	68db      	ldr	r3, [r3, #12]
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	4618      	mov	r0, r3
 800d512:	f7f9 fdfe 	bl	8007112 <lwip_htonl>
 800d516:	4604      	mov	r4, r0
 800d518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51a:	68db      	ldr	r3, [r3, #12]
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	4618      	mov	r0, r3
 800d520:	f7f9 fdf7 	bl	8007112 <lwip_htonl>
 800d524:	4603      	mov	r3, r0
 800d526:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d528:	2b00      	cmp	r3, #0
 800d52a:	dbe6      	blt.n	800d4fa <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d52c:	69fb      	ldr	r3, [r7, #28]
 800d52e:	681a      	ldr	r2, [r3, #0]
 800d530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d532:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d534:	69fb      	ldr	r3, [r7, #28]
 800d536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d538:	601a      	str	r2, [r3, #0]
 800d53a:	e009      	b.n	800d550 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d53c:	6a3b      	ldr	r3, [r7, #32]
 800d53e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d540:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d542:	6a3b      	ldr	r3, [r7, #32]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	623b      	str	r3, [r7, #32]
 800d548:	e002      	b.n	800d550 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d54a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d54c:	f7fc fc3f 	bl	8009dce <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d554:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800d556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d012      	beq.n	800d582 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d55e:	68db      	ldr	r3, [r3, #12]
 800d560:	685b      	ldr	r3, [r3, #4]
 800d562:	4618      	mov	r0, r3
 800d564:	f7f9 fdd5 	bl	8007112 <lwip_htonl>
 800d568:	4602      	mov	r2, r0
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d56e:	1ad3      	subs	r3, r2, r3
 800d570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d572:	8912      	ldrh	r2, [r2, #8]
 800d574:	4413      	add	r3, r2
  while (seg != NULL &&
 800d576:	69ba      	ldr	r2, [r7, #24]
 800d578:	429a      	cmp	r2, r3
 800d57a:	f4bf aed9 	bcs.w	800d330 <tcp_output+0x160>
 800d57e:	e000      	b.n	800d582 <tcp_output+0x3b2>
      break;
 800d580:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d586:	2b00      	cmp	r3, #0
 800d588:	d108      	bne.n	800d59c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2200      	movs	r2, #0
 800d58e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800d592:	e004      	b.n	800d59e <tcp_output+0x3ce>
    goto output_done;
 800d594:	bf00      	nop
 800d596:	e002      	b.n	800d59e <tcp_output+0x3ce>
    goto output_done;
 800d598:	bf00      	nop
 800d59a:	e000      	b.n	800d59e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d59c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	8b5b      	ldrh	r3, [r3, #26]
 800d5a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d5a6:	b29a      	uxth	r2, r3
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d5ac:	2300      	movs	r3, #0
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3728      	adds	r7, #40	; 0x28
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bdb0      	pop	{r4, r5, r7, pc}
 800d5b6:	bf00      	nop

0800d5b8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b082      	sub	sp, #8
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d106      	bne.n	800d5d4 <tcp_output_segment_busy+0x1c>
 800d5c6:	4b09      	ldr	r3, [pc, #36]	; (800d5ec <tcp_output_segment_busy+0x34>)
 800d5c8:	f240 529a 	movw	r2, #1434	; 0x59a
 800d5cc:	4908      	ldr	r1, [pc, #32]	; (800d5f0 <tcp_output_segment_busy+0x38>)
 800d5ce:	4809      	ldr	r0, [pc, #36]	; (800d5f4 <tcp_output_segment_busy+0x3c>)
 800d5d0:	f003 fed2 	bl	8011378 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	7b9b      	ldrb	r3, [r3, #14]
 800d5da:	2b01      	cmp	r3, #1
 800d5dc:	d001      	beq.n	800d5e2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d5de:	2301      	movs	r3, #1
 800d5e0:	e000      	b.n	800d5e4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d5e2:	2300      	movs	r3, #0
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3708      	adds	r7, #8
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	08013f20 	.word	0x08013f20
 800d5f0:	080144bc 	.word	0x080144bc
 800d5f4:	08013f74 	.word	0x08013f74

0800d5f8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d5f8:	b5b0      	push	{r4, r5, r7, lr}
 800d5fa:	b08c      	sub	sp, #48	; 0x30
 800d5fc:	af04      	add	r7, sp, #16
 800d5fe:	60f8      	str	r0, [r7, #12]
 800d600:	60b9      	str	r1, [r7, #8]
 800d602:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d106      	bne.n	800d618 <tcp_output_segment+0x20>
 800d60a:	4b63      	ldr	r3, [pc, #396]	; (800d798 <tcp_output_segment+0x1a0>)
 800d60c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800d610:	4962      	ldr	r1, [pc, #392]	; (800d79c <tcp_output_segment+0x1a4>)
 800d612:	4863      	ldr	r0, [pc, #396]	; (800d7a0 <tcp_output_segment+0x1a8>)
 800d614:	f003 feb0 	bl	8011378 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d106      	bne.n	800d62c <tcp_output_segment+0x34>
 800d61e:	4b5e      	ldr	r3, [pc, #376]	; (800d798 <tcp_output_segment+0x1a0>)
 800d620:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d624:	495f      	ldr	r1, [pc, #380]	; (800d7a4 <tcp_output_segment+0x1ac>)
 800d626:	485e      	ldr	r0, [pc, #376]	; (800d7a0 <tcp_output_segment+0x1a8>)
 800d628:	f003 fea6 	bl	8011378 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d106      	bne.n	800d640 <tcp_output_segment+0x48>
 800d632:	4b59      	ldr	r3, [pc, #356]	; (800d798 <tcp_output_segment+0x1a0>)
 800d634:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800d638:	495b      	ldr	r1, [pc, #364]	; (800d7a8 <tcp_output_segment+0x1b0>)
 800d63a:	4859      	ldr	r0, [pc, #356]	; (800d7a0 <tcp_output_segment+0x1a8>)
 800d63c:	f003 fe9c 	bl	8011378 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d640:	68f8      	ldr	r0, [r7, #12]
 800d642:	f7ff ffb9 	bl	800d5b8 <tcp_output_segment_busy>
 800d646:	4603      	mov	r3, r0
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d001      	beq.n	800d650 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d64c:	2300      	movs	r3, #0
 800d64e:	e09f      	b.n	800d790 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	68dc      	ldr	r4, [r3, #12]
 800d658:	4610      	mov	r0, r2
 800d65a:	f7f9 fd5a 	bl	8007112 <lwip_htonl>
 800d65e:	4603      	mov	r3, r0
 800d660:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	68dc      	ldr	r4, [r3, #12]
 800d66a:	4610      	mov	r0, r2
 800d66c:	f7f9 fd3c 	bl	80070e8 <lwip_htons>
 800d670:	4603      	mov	r3, r0
 800d672:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d678:	68ba      	ldr	r2, [r7, #8]
 800d67a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d67c:	441a      	add	r2, r3
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	68db      	ldr	r3, [r3, #12]
 800d686:	3314      	adds	r3, #20
 800d688:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	7a9b      	ldrb	r3, [r3, #10]
 800d68e:	f003 0301 	and.w	r3, r3, #1
 800d692:	2b00      	cmp	r3, #0
 800d694:	d015      	beq.n	800d6c2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	3304      	adds	r3, #4
 800d69a:	461a      	mov	r2, r3
 800d69c:	6879      	ldr	r1, [r7, #4]
 800d69e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d6a2:	f7fc fe8b 	bl	800a3bc <tcp_eff_send_mss_netif>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d6aa:	8b7b      	ldrh	r3, [r7, #26]
 800d6ac:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7f9 fd2e 	bl	8007112 <lwip_htonl>
 800d6b6:	4602      	mov	r2, r0
 800d6b8:	69fb      	ldr	r3, [r7, #28]
 800d6ba:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d6bc:	69fb      	ldr	r3, [r7, #28]
 800d6be:	3304      	adds	r3, #4
 800d6c0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	da02      	bge.n	800d6d2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d10c      	bne.n	800d6f4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d6da:	4b34      	ldr	r3, [pc, #208]	; (800d7ac <tcp_output_segment+0x1b4>)
 800d6dc:	681a      	ldr	r2, [r3, #0]
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	68db      	ldr	r3, [r3, #12]
 800d6e6:	685b      	ldr	r3, [r3, #4]
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f7f9 fd12 	bl	8007112 <lwip_htonl>
 800d6ee:	4602      	mov	r2, r0
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	68da      	ldr	r2, [r3, #12]
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	685b      	ldr	r3, [r3, #4]
 800d6fc:	685b      	ldr	r3, [r3, #4]
 800d6fe:	1ad3      	subs	r3, r2, r3
 800d700:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	685b      	ldr	r3, [r3, #4]
 800d706:	8959      	ldrh	r1, [r3, #10]
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	685b      	ldr	r3, [r3, #4]
 800d70c:	8b3a      	ldrh	r2, [r7, #24]
 800d70e:	1a8a      	subs	r2, r1, r2
 800d710:	b292      	uxth	r2, r2
 800d712:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	685b      	ldr	r3, [r3, #4]
 800d718:	8919      	ldrh	r1, [r3, #8]
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	685b      	ldr	r3, [r3, #4]
 800d71e:	8b3a      	ldrh	r2, [r7, #24]
 800d720:	1a8a      	subs	r2, r1, r2
 800d722:	b292      	uxth	r2, r2
 800d724:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	68fa      	ldr	r2, [r7, #12]
 800d72c:	68d2      	ldr	r2, [r2, #12]
 800d72e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	68db      	ldr	r3, [r3, #12]
 800d734:	2200      	movs	r2, #0
 800d736:	741a      	strb	r2, [r3, #16]
 800d738:	2200      	movs	r2, #0
 800d73a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	68db      	ldr	r3, [r3, #12]
 800d740:	f103 0214 	add.w	r2, r3, #20
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	7a9b      	ldrb	r3, [r3, #10]
 800d748:	009b      	lsls	r3, r3, #2
 800d74a:	f003 0304 	and.w	r3, r3, #4
 800d74e:	4413      	add	r3, r2
 800d750:	69fa      	ldr	r2, [r7, #28]
 800d752:	429a      	cmp	r2, r3
 800d754:	d006      	beq.n	800d764 <tcp_output_segment+0x16c>
 800d756:	4b10      	ldr	r3, [pc, #64]	; (800d798 <tcp_output_segment+0x1a0>)
 800d758:	f240 621c 	movw	r2, #1564	; 0x61c
 800d75c:	4914      	ldr	r1, [pc, #80]	; (800d7b0 <tcp_output_segment+0x1b8>)
 800d75e:	4810      	ldr	r0, [pc, #64]	; (800d7a0 <tcp_output_segment+0x1a8>)
 800d760:	f003 fe0a 	bl	8011378 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	6858      	ldr	r0, [r3, #4]
 800d768:	68b9      	ldr	r1, [r7, #8]
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	1d1c      	adds	r4, r3, #4
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	7add      	ldrb	r5, [r3, #11]
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	7a9b      	ldrb	r3, [r3, #10]
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	9202      	str	r2, [sp, #8]
 800d77a:	2206      	movs	r2, #6
 800d77c:	9201      	str	r2, [sp, #4]
 800d77e:	9300      	str	r3, [sp, #0]
 800d780:	462b      	mov	r3, r5
 800d782:	4622      	mov	r2, r4
 800d784:	f002 fd66 	bl	8010254 <ip4_output_if>
 800d788:	4603      	mov	r3, r0
 800d78a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d78c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d790:	4618      	mov	r0, r3
 800d792:	3720      	adds	r7, #32
 800d794:	46bd      	mov	sp, r7
 800d796:	bdb0      	pop	{r4, r5, r7, pc}
 800d798:	08013f20 	.word	0x08013f20
 800d79c:	080144e4 	.word	0x080144e4
 800d7a0:	08013f74 	.word	0x08013f74
 800d7a4:	08014504 	.word	0x08014504
 800d7a8:	08014524 	.word	0x08014524
 800d7ac:	2000bc2c 	.word	0x2000bc2c
 800d7b0:	08014548 	.word	0x08014548

0800d7b4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d7b4:	b5b0      	push	{r4, r5, r7, lr}
 800d7b6:	b084      	sub	sp, #16
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d106      	bne.n	800d7d0 <tcp_rexmit_rto_prepare+0x1c>
 800d7c2:	4b31      	ldr	r3, [pc, #196]	; (800d888 <tcp_rexmit_rto_prepare+0xd4>)
 800d7c4:	f240 6263 	movw	r2, #1635	; 0x663
 800d7c8:	4930      	ldr	r1, [pc, #192]	; (800d88c <tcp_rexmit_rto_prepare+0xd8>)
 800d7ca:	4831      	ldr	r0, [pc, #196]	; (800d890 <tcp_rexmit_rto_prepare+0xdc>)
 800d7cc:	f003 fdd4 	bl	8011378 <iprintf>

  if (pcb->unacked == NULL) {
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d102      	bne.n	800d7de <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d7d8:	f06f 0305 	mvn.w	r3, #5
 800d7dc:	e050      	b.n	800d880 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7e2:	60fb      	str	r3, [r7, #12]
 800d7e4:	e00b      	b.n	800d7fe <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d7e6:	68f8      	ldr	r0, [r7, #12]
 800d7e8:	f7ff fee6 	bl	800d5b8 <tcp_output_segment_busy>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d002      	beq.n	800d7f8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d7f2:	f06f 0305 	mvn.w	r3, #5
 800d7f6:	e043      	b.n	800d880 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	60fb      	str	r3, [r7, #12]
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d1ef      	bne.n	800d7e6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d806:	68f8      	ldr	r0, [r7, #12]
 800d808:	f7ff fed6 	bl	800d5b8 <tcp_output_segment_busy>
 800d80c:	4603      	mov	r3, r0
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d002      	beq.n	800d818 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d812:	f06f 0305 	mvn.w	r3, #5
 800d816:	e033      	b.n	800d880 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2200      	movs	r2, #0
 800d82c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	8b5b      	ldrh	r3, [r3, #26]
 800d832:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d836:	b29a      	uxth	r2, r3
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	68db      	ldr	r3, [r3, #12]
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	4618      	mov	r0, r3
 800d844:	f7f9 fc65 	bl	8007112 <lwip_htonl>
 800d848:	4604      	mov	r4, r0
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	891b      	ldrh	r3, [r3, #8]
 800d84e:	461d      	mov	r5, r3
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	68db      	ldr	r3, [r3, #12]
 800d854:	899b      	ldrh	r3, [r3, #12]
 800d856:	b29b      	uxth	r3, r3
 800d858:	4618      	mov	r0, r3
 800d85a:	f7f9 fc45 	bl	80070e8 <lwip_htons>
 800d85e:	4603      	mov	r3, r0
 800d860:	b2db      	uxtb	r3, r3
 800d862:	f003 0303 	and.w	r3, r3, #3
 800d866:	2b00      	cmp	r3, #0
 800d868:	d001      	beq.n	800d86e <tcp_rexmit_rto_prepare+0xba>
 800d86a:	2301      	movs	r3, #1
 800d86c:	e000      	b.n	800d870 <tcp_rexmit_rto_prepare+0xbc>
 800d86e:	2300      	movs	r3, #0
 800d870:	442b      	add	r3, r5
 800d872:	18e2      	adds	r2, r4, r3
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2200      	movs	r2, #0
 800d87c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800d87e:	2300      	movs	r3, #0
}
 800d880:	4618      	mov	r0, r3
 800d882:	3710      	adds	r7, #16
 800d884:	46bd      	mov	sp, r7
 800d886:	bdb0      	pop	{r4, r5, r7, pc}
 800d888:	08013f20 	.word	0x08013f20
 800d88c:	0801455c 	.word	0x0801455c
 800d890:	08013f74 	.word	0x08013f74

0800d894 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b082      	sub	sp, #8
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d106      	bne.n	800d8b0 <tcp_rexmit_rto_commit+0x1c>
 800d8a2:	4b0d      	ldr	r3, [pc, #52]	; (800d8d8 <tcp_rexmit_rto_commit+0x44>)
 800d8a4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d8a8:	490c      	ldr	r1, [pc, #48]	; (800d8dc <tcp_rexmit_rto_commit+0x48>)
 800d8aa:	480d      	ldr	r0, [pc, #52]	; (800d8e0 <tcp_rexmit_rto_commit+0x4c>)
 800d8ac:	f003 fd64 	bl	8011378 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d8b6:	2bff      	cmp	r3, #255	; 0xff
 800d8b8:	d007      	beq.n	800d8ca <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	b2da      	uxtb	r2, r3
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f7ff fc80 	bl	800d1d0 <tcp_output>
}
 800d8d0:	bf00      	nop
 800d8d2:	3708      	adds	r7, #8
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}
 800d8d8:	08013f20 	.word	0x08013f20
 800d8dc:	08014580 	.word	0x08014580
 800d8e0:	08013f74 	.word	0x08013f74

0800d8e4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b082      	sub	sp, #8
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d106      	bne.n	800d900 <tcp_rexmit_rto+0x1c>
 800d8f2:	4b0a      	ldr	r3, [pc, #40]	; (800d91c <tcp_rexmit_rto+0x38>)
 800d8f4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d8f8:	4909      	ldr	r1, [pc, #36]	; (800d920 <tcp_rexmit_rto+0x3c>)
 800d8fa:	480a      	ldr	r0, [pc, #40]	; (800d924 <tcp_rexmit_rto+0x40>)
 800d8fc:	f003 fd3c 	bl	8011378 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f7ff ff57 	bl	800d7b4 <tcp_rexmit_rto_prepare>
 800d906:	4603      	mov	r3, r0
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d102      	bne.n	800d912 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f7ff ffc1 	bl	800d894 <tcp_rexmit_rto_commit>
  }
}
 800d912:	bf00      	nop
 800d914:	3708      	adds	r7, #8
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	bf00      	nop
 800d91c:	08013f20 	.word	0x08013f20
 800d920:	080145a4 	.word	0x080145a4
 800d924:	08013f74 	.word	0x08013f74

0800d928 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d928:	b590      	push	{r4, r7, lr}
 800d92a:	b085      	sub	sp, #20
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d106      	bne.n	800d944 <tcp_rexmit+0x1c>
 800d936:	4b2f      	ldr	r3, [pc, #188]	; (800d9f4 <tcp_rexmit+0xcc>)
 800d938:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d93c:	492e      	ldr	r1, [pc, #184]	; (800d9f8 <tcp_rexmit+0xd0>)
 800d93e:	482f      	ldr	r0, [pc, #188]	; (800d9fc <tcp_rexmit+0xd4>)
 800d940:	f003 fd1a 	bl	8011378 <iprintf>

  if (pcb->unacked == NULL) {
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d102      	bne.n	800d952 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d94c:	f06f 0305 	mvn.w	r3, #5
 800d950:	e04c      	b.n	800d9ec <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d956:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d958:	68b8      	ldr	r0, [r7, #8]
 800d95a:	f7ff fe2d 	bl	800d5b8 <tcp_output_segment_busy>
 800d95e:	4603      	mov	r3, r0
 800d960:	2b00      	cmp	r3, #0
 800d962:	d002      	beq.n	800d96a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d964:	f06f 0305 	mvn.w	r3, #5
 800d968:	e040      	b.n	800d9ec <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	681a      	ldr	r2, [r3, #0]
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	336c      	adds	r3, #108	; 0x6c
 800d976:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d978:	e002      	b.n	800d980 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d011      	beq.n	800d9ac <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	68db      	ldr	r3, [r3, #12]
 800d98e:	685b      	ldr	r3, [r3, #4]
 800d990:	4618      	mov	r0, r3
 800d992:	f7f9 fbbe 	bl	8007112 <lwip_htonl>
 800d996:	4604      	mov	r4, r0
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	68db      	ldr	r3, [r3, #12]
 800d99c:	685b      	ldr	r3, [r3, #4]
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7f9 fbb7 	bl	8007112 <lwip_htonl>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	dbe6      	blt.n	800d97a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681a      	ldr	r2, [r3, #0]
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	68ba      	ldr	r2, [r7, #8]
 800d9b8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d103      	bne.n	800d9ca <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d9d0:	2bff      	cmp	r3, #255	; 0xff
 800d9d2:	d007      	beq.n	800d9e4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d9da:	3301      	adds	r3, #1
 800d9dc:	b2da      	uxtb	r2, r3
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d9ea:	2300      	movs	r3, #0
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3714      	adds	r7, #20
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd90      	pop	{r4, r7, pc}
 800d9f4:	08013f20 	.word	0x08013f20
 800d9f8:	080145c0 	.word	0x080145c0
 800d9fc:	08013f74 	.word	0x08013f74

0800da00 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b082      	sub	sp, #8
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d106      	bne.n	800da1c <tcp_rexmit_fast+0x1c>
 800da0e:	4b2a      	ldr	r3, [pc, #168]	; (800dab8 <tcp_rexmit_fast+0xb8>)
 800da10:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800da14:	4929      	ldr	r1, [pc, #164]	; (800dabc <tcp_rexmit_fast+0xbc>)
 800da16:	482a      	ldr	r0, [pc, #168]	; (800dac0 <tcp_rexmit_fast+0xc0>)
 800da18:	f003 fcae 	bl	8011378 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da20:	2b00      	cmp	r3, #0
 800da22:	d045      	beq.n	800dab0 <tcp_rexmit_fast+0xb0>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	8b5b      	ldrh	r3, [r3, #26]
 800da28:	f003 0304 	and.w	r3, r3, #4
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d13f      	bne.n	800dab0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f7ff ff79 	bl	800d928 <tcp_rexmit>
 800da36:	4603      	mov	r3, r0
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d139      	bne.n	800dab0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800da48:	4293      	cmp	r3, r2
 800da4a:	bf28      	it	cs
 800da4c:	4613      	movcs	r3, r2
 800da4e:	b29b      	uxth	r3, r3
 800da50:	2b00      	cmp	r3, #0
 800da52:	da00      	bge.n	800da56 <tcp_rexmit_fast+0x56>
 800da54:	3301      	adds	r3, #1
 800da56:	105b      	asrs	r3, r3, #1
 800da58:	b29a      	uxth	r2, r3
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800da66:	461a      	mov	r2, r3
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da6c:	005b      	lsls	r3, r3, #1
 800da6e:	429a      	cmp	r2, r3
 800da70:	d206      	bcs.n	800da80 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da76:	005b      	lsls	r3, r3, #1
 800da78:	b29a      	uxth	r2, r3
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da8a:	4619      	mov	r1, r3
 800da8c:	0049      	lsls	r1, r1, #1
 800da8e:	440b      	add	r3, r1
 800da90:	b29b      	uxth	r3, r3
 800da92:	4413      	add	r3, r2
 800da94:	b29a      	uxth	r2, r3
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	8b5b      	ldrh	r3, [r3, #26]
 800daa0:	f043 0304 	orr.w	r3, r3, #4
 800daa4:	b29a      	uxth	r2, r3
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2200      	movs	r2, #0
 800daae:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800dab0:	bf00      	nop
 800dab2:	3708      	adds	r7, #8
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}
 800dab8:	08013f20 	.word	0x08013f20
 800dabc:	080145d8 	.word	0x080145d8
 800dac0:	08013f74 	.word	0x08013f74

0800dac4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b086      	sub	sp, #24
 800dac8:	af00      	add	r7, sp, #0
 800daca:	60f8      	str	r0, [r7, #12]
 800dacc:	607b      	str	r3, [r7, #4]
 800dace:	460b      	mov	r3, r1
 800dad0:	817b      	strh	r3, [r7, #10]
 800dad2:	4613      	mov	r3, r2
 800dad4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800dad6:	897a      	ldrh	r2, [r7, #10]
 800dad8:	893b      	ldrh	r3, [r7, #8]
 800dada:	4413      	add	r3, r2
 800dadc:	b29b      	uxth	r3, r3
 800dade:	3314      	adds	r3, #20
 800dae0:	b29b      	uxth	r3, r3
 800dae2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dae6:	4619      	mov	r1, r3
 800dae8:	2022      	movs	r0, #34	; 0x22
 800daea:	f7fa fb77 	bl	80081dc <pbuf_alloc>
 800daee:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d04d      	beq.n	800db92 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800daf6:	897b      	ldrh	r3, [r7, #10]
 800daf8:	3313      	adds	r3, #19
 800dafa:	697a      	ldr	r2, [r7, #20]
 800dafc:	8952      	ldrh	r2, [r2, #10]
 800dafe:	4293      	cmp	r3, r2
 800db00:	db06      	blt.n	800db10 <tcp_output_alloc_header_common+0x4c>
 800db02:	4b26      	ldr	r3, [pc, #152]	; (800db9c <tcp_output_alloc_header_common+0xd8>)
 800db04:	f240 7223 	movw	r2, #1827	; 0x723
 800db08:	4925      	ldr	r1, [pc, #148]	; (800dba0 <tcp_output_alloc_header_common+0xdc>)
 800db0a:	4826      	ldr	r0, [pc, #152]	; (800dba4 <tcp_output_alloc_header_common+0xe0>)
 800db0c:	f003 fc34 	bl	8011378 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	685b      	ldr	r3, [r3, #4]
 800db14:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800db16:	8c3b      	ldrh	r3, [r7, #32]
 800db18:	4618      	mov	r0, r3
 800db1a:	f7f9 fae5 	bl	80070e8 <lwip_htons>
 800db1e:	4603      	mov	r3, r0
 800db20:	461a      	mov	r2, r3
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800db26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db28:	4618      	mov	r0, r3
 800db2a:	f7f9 fadd 	bl	80070e8 <lwip_htons>
 800db2e:	4603      	mov	r3, r0
 800db30:	461a      	mov	r2, r3
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	687a      	ldr	r2, [r7, #4]
 800db3a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800db3c:	68f8      	ldr	r0, [r7, #12]
 800db3e:	f7f9 fae8 	bl	8007112 <lwip_htonl>
 800db42:	4602      	mov	r2, r0
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800db48:	897b      	ldrh	r3, [r7, #10]
 800db4a:	089b      	lsrs	r3, r3, #2
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	3305      	adds	r3, #5
 800db50:	b29b      	uxth	r3, r3
 800db52:	031b      	lsls	r3, r3, #12
 800db54:	b29a      	uxth	r2, r3
 800db56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800db5a:	b29b      	uxth	r3, r3
 800db5c:	4313      	orrs	r3, r2
 800db5e:	b29b      	uxth	r3, r3
 800db60:	4618      	mov	r0, r3
 800db62:	f7f9 fac1 	bl	80070e8 <lwip_htons>
 800db66:	4603      	mov	r3, r0
 800db68:	461a      	mov	r2, r3
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800db6e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800db70:	4618      	mov	r0, r3
 800db72:	f7f9 fab9 	bl	80070e8 <lwip_htons>
 800db76:	4603      	mov	r3, r0
 800db78:	461a      	mov	r2, r3
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	2200      	movs	r2, #0
 800db82:	741a      	strb	r2, [r3, #16]
 800db84:	2200      	movs	r2, #0
 800db86:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	2200      	movs	r2, #0
 800db8c:	749a      	strb	r2, [r3, #18]
 800db8e:	2200      	movs	r2, #0
 800db90:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800db92:	697b      	ldr	r3, [r7, #20]
}
 800db94:	4618      	mov	r0, r3
 800db96:	3718      	adds	r7, #24
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}
 800db9c:	08013f20 	.word	0x08013f20
 800dba0:	080145f8 	.word	0x080145f8
 800dba4:	08013f74 	.word	0x08013f74

0800dba8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800dba8:	b5b0      	push	{r4, r5, r7, lr}
 800dbaa:	b08a      	sub	sp, #40	; 0x28
 800dbac:	af04      	add	r7, sp, #16
 800dbae:	60f8      	str	r0, [r7, #12]
 800dbb0:	607b      	str	r3, [r7, #4]
 800dbb2:	460b      	mov	r3, r1
 800dbb4:	817b      	strh	r3, [r7, #10]
 800dbb6:	4613      	mov	r3, r2
 800dbb8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d106      	bne.n	800dbce <tcp_output_alloc_header+0x26>
 800dbc0:	4b15      	ldr	r3, [pc, #84]	; (800dc18 <tcp_output_alloc_header+0x70>)
 800dbc2:	f240 7242 	movw	r2, #1858	; 0x742
 800dbc6:	4915      	ldr	r1, [pc, #84]	; (800dc1c <tcp_output_alloc_header+0x74>)
 800dbc8:	4815      	ldr	r0, [pc, #84]	; (800dc20 <tcp_output_alloc_header+0x78>)
 800dbca:	f003 fbd5 	bl	8011378 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	8adb      	ldrh	r3, [r3, #22]
 800dbd6:	68fa      	ldr	r2, [r7, #12]
 800dbd8:	8b12      	ldrh	r2, [r2, #24]
 800dbda:	68f9      	ldr	r1, [r7, #12]
 800dbdc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800dbde:	893d      	ldrh	r5, [r7, #8]
 800dbe0:	897c      	ldrh	r4, [r7, #10]
 800dbe2:	9103      	str	r1, [sp, #12]
 800dbe4:	2110      	movs	r1, #16
 800dbe6:	9102      	str	r1, [sp, #8]
 800dbe8:	9201      	str	r2, [sp, #4]
 800dbea:	9300      	str	r3, [sp, #0]
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	462a      	mov	r2, r5
 800dbf0:	4621      	mov	r1, r4
 800dbf2:	f7ff ff67 	bl	800dac4 <tcp_output_alloc_header_common>
 800dbf6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d006      	beq.n	800dc0c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc02:	68fa      	ldr	r2, [r7, #12]
 800dc04:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800dc06:	441a      	add	r2, r3
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800dc0c:	697b      	ldr	r3, [r7, #20]
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3718      	adds	r7, #24
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bdb0      	pop	{r4, r5, r7, pc}
 800dc16:	bf00      	nop
 800dc18:	08013f20 	.word	0x08013f20
 800dc1c:	08014628 	.word	0x08014628
 800dc20:	08013f74 	.word	0x08013f74

0800dc24 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b088      	sub	sp, #32
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	60f8      	str	r0, [r7, #12]
 800dc2c:	60b9      	str	r1, [r7, #8]
 800dc2e:	4611      	mov	r1, r2
 800dc30:	461a      	mov	r2, r3
 800dc32:	460b      	mov	r3, r1
 800dc34:	71fb      	strb	r3, [r7, #7]
 800dc36:	4613      	mov	r3, r2
 800dc38:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d106      	bne.n	800dc52 <tcp_output_fill_options+0x2e>
 800dc44:	4b13      	ldr	r3, [pc, #76]	; (800dc94 <tcp_output_fill_options+0x70>)
 800dc46:	f240 7256 	movw	r2, #1878	; 0x756
 800dc4a:	4913      	ldr	r1, [pc, #76]	; (800dc98 <tcp_output_fill_options+0x74>)
 800dc4c:	4813      	ldr	r0, [pc, #76]	; (800dc9c <tcp_output_fill_options+0x78>)
 800dc4e:	f003 fb93 	bl	8011378 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800dc58:	69bb      	ldr	r3, [r7, #24]
 800dc5a:	3314      	adds	r3, #20
 800dc5c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800dc5e:	69bb      	ldr	r3, [r7, #24]
 800dc60:	f103 0214 	add.w	r2, r3, #20
 800dc64:	8bfb      	ldrh	r3, [r7, #30]
 800dc66:	009b      	lsls	r3, r3, #2
 800dc68:	4619      	mov	r1, r3
 800dc6a:	79fb      	ldrb	r3, [r7, #7]
 800dc6c:	009b      	lsls	r3, r3, #2
 800dc6e:	f003 0304 	and.w	r3, r3, #4
 800dc72:	440b      	add	r3, r1
 800dc74:	4413      	add	r3, r2
 800dc76:	697a      	ldr	r2, [r7, #20]
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	d006      	beq.n	800dc8a <tcp_output_fill_options+0x66>
 800dc7c:	4b05      	ldr	r3, [pc, #20]	; (800dc94 <tcp_output_fill_options+0x70>)
 800dc7e:	f240 7275 	movw	r2, #1909	; 0x775
 800dc82:	4907      	ldr	r1, [pc, #28]	; (800dca0 <tcp_output_fill_options+0x7c>)
 800dc84:	4805      	ldr	r0, [pc, #20]	; (800dc9c <tcp_output_fill_options+0x78>)
 800dc86:	f003 fb77 	bl	8011378 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800dc8a:	bf00      	nop
 800dc8c:	3720      	adds	r7, #32
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}
 800dc92:	bf00      	nop
 800dc94:	08013f20 	.word	0x08013f20
 800dc98:	08014650 	.word	0x08014650
 800dc9c:	08013f74 	.word	0x08013f74
 800dca0:	08014548 	.word	0x08014548

0800dca4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b08a      	sub	sp, #40	; 0x28
 800dca8:	af04      	add	r7, sp, #16
 800dcaa:	60f8      	str	r0, [r7, #12]
 800dcac:	60b9      	str	r1, [r7, #8]
 800dcae:	607a      	str	r2, [r7, #4]
 800dcb0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d106      	bne.n	800dcc6 <tcp_output_control_segment+0x22>
 800dcb8:	4b1c      	ldr	r3, [pc, #112]	; (800dd2c <tcp_output_control_segment+0x88>)
 800dcba:	f240 7287 	movw	r2, #1927	; 0x787
 800dcbe:	491c      	ldr	r1, [pc, #112]	; (800dd30 <tcp_output_control_segment+0x8c>)
 800dcc0:	481c      	ldr	r0, [pc, #112]	; (800dd34 <tcp_output_control_segment+0x90>)
 800dcc2:	f003 fb59 	bl	8011378 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800dcc6:	683a      	ldr	r2, [r7, #0]
 800dcc8:	6879      	ldr	r1, [r7, #4]
 800dcca:	68f8      	ldr	r0, [r7, #12]
 800dccc:	f7fe ff40 	bl	800cb50 <tcp_route>
 800dcd0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d102      	bne.n	800dcde <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800dcd8:	23fc      	movs	r3, #252	; 0xfc
 800dcda:	75fb      	strb	r3, [r7, #23]
 800dcdc:	e01c      	b.n	800dd18 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d006      	beq.n	800dcf2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	7adb      	ldrb	r3, [r3, #11]
 800dce8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	7a9b      	ldrb	r3, [r3, #10]
 800dcee:	757b      	strb	r3, [r7, #21]
 800dcf0:	e003      	b.n	800dcfa <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800dcf2:	23ff      	movs	r3, #255	; 0xff
 800dcf4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800dcfa:	7dba      	ldrb	r2, [r7, #22]
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	9302      	str	r3, [sp, #8]
 800dd00:	2306      	movs	r3, #6
 800dd02:	9301      	str	r3, [sp, #4]
 800dd04:	7d7b      	ldrb	r3, [r7, #21]
 800dd06:	9300      	str	r3, [sp, #0]
 800dd08:	4613      	mov	r3, r2
 800dd0a:	683a      	ldr	r2, [r7, #0]
 800dd0c:	6879      	ldr	r1, [r7, #4]
 800dd0e:	68b8      	ldr	r0, [r7, #8]
 800dd10:	f002 faa0 	bl	8010254 <ip4_output_if>
 800dd14:	4603      	mov	r3, r0
 800dd16:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800dd18:	68b8      	ldr	r0, [r7, #8]
 800dd1a:	f7fa fd43 	bl	80087a4 <pbuf_free>
  return err;
 800dd1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3718      	adds	r7, #24
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}
 800dd2a:	bf00      	nop
 800dd2c:	08013f20 	.word	0x08013f20
 800dd30:	08014678 	.word	0x08014678
 800dd34:	08013f74 	.word	0x08013f74

0800dd38 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800dd38:	b590      	push	{r4, r7, lr}
 800dd3a:	b08b      	sub	sp, #44	; 0x2c
 800dd3c:	af04      	add	r7, sp, #16
 800dd3e:	60f8      	str	r0, [r7, #12]
 800dd40:	60b9      	str	r1, [r7, #8]
 800dd42:	607a      	str	r2, [r7, #4]
 800dd44:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d106      	bne.n	800dd5a <tcp_rst+0x22>
 800dd4c:	4b1f      	ldr	r3, [pc, #124]	; (800ddcc <tcp_rst+0x94>)
 800dd4e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800dd52:	491f      	ldr	r1, [pc, #124]	; (800ddd0 <tcp_rst+0x98>)
 800dd54:	481f      	ldr	r0, [pc, #124]	; (800ddd4 <tcp_rst+0x9c>)
 800dd56:	f003 fb0f 	bl	8011378 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800dd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d106      	bne.n	800dd6e <tcp_rst+0x36>
 800dd60:	4b1a      	ldr	r3, [pc, #104]	; (800ddcc <tcp_rst+0x94>)
 800dd62:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800dd66:	491c      	ldr	r1, [pc, #112]	; (800ddd8 <tcp_rst+0xa0>)
 800dd68:	481a      	ldr	r0, [pc, #104]	; (800ddd4 <tcp_rst+0x9c>)
 800dd6a:	f003 fb05 	bl	8011378 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dd6e:	2300      	movs	r3, #0
 800dd70:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800dd72:	f246 0308 	movw	r3, #24584	; 0x6008
 800dd76:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800dd78:	7dfb      	ldrb	r3, [r7, #23]
 800dd7a:	b29c      	uxth	r4, r3
 800dd7c:	68b8      	ldr	r0, [r7, #8]
 800dd7e:	f7f9 f9c8 	bl	8007112 <lwip_htonl>
 800dd82:	4602      	mov	r2, r0
 800dd84:	8abb      	ldrh	r3, [r7, #20]
 800dd86:	9303      	str	r3, [sp, #12]
 800dd88:	2314      	movs	r3, #20
 800dd8a:	9302      	str	r3, [sp, #8]
 800dd8c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800dd8e:	9301      	str	r3, [sp, #4]
 800dd90:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dd92:	9300      	str	r3, [sp, #0]
 800dd94:	4613      	mov	r3, r2
 800dd96:	2200      	movs	r2, #0
 800dd98:	4621      	mov	r1, r4
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f7ff fe92 	bl	800dac4 <tcp_output_alloc_header_common>
 800dda0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800dda2:	693b      	ldr	r3, [r7, #16]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d00c      	beq.n	800ddc2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dda8:	7dfb      	ldrb	r3, [r7, #23]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	6939      	ldr	r1, [r7, #16]
 800ddae:	68f8      	ldr	r0, [r7, #12]
 800ddb0:	f7ff ff38 	bl	800dc24 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ddb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb6:	683a      	ldr	r2, [r7, #0]
 800ddb8:	6939      	ldr	r1, [r7, #16]
 800ddba:	68f8      	ldr	r0, [r7, #12]
 800ddbc:	f7ff ff72 	bl	800dca4 <tcp_output_control_segment>
 800ddc0:	e000      	b.n	800ddc4 <tcp_rst+0x8c>
    return;
 800ddc2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ddc4:	371c      	adds	r7, #28
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd90      	pop	{r4, r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	08013f20 	.word	0x08013f20
 800ddd0:	080146a4 	.word	0x080146a4
 800ddd4:	08013f74 	.word	0x08013f74
 800ddd8:	080146c0 	.word	0x080146c0

0800dddc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800dddc:	b590      	push	{r4, r7, lr}
 800ddde:	b087      	sub	sp, #28
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800dde4:	2300      	movs	r3, #0
 800dde6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800dde8:	2300      	movs	r3, #0
 800ddea:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d106      	bne.n	800de00 <tcp_send_empty_ack+0x24>
 800ddf2:	4b28      	ldr	r3, [pc, #160]	; (800de94 <tcp_send_empty_ack+0xb8>)
 800ddf4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800ddf8:	4927      	ldr	r1, [pc, #156]	; (800de98 <tcp_send_empty_ack+0xbc>)
 800ddfa:	4828      	ldr	r0, [pc, #160]	; (800de9c <tcp_send_empty_ack+0xc0>)
 800ddfc:	f003 fabc 	bl	8011378 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800de00:	7dfb      	ldrb	r3, [r7, #23]
 800de02:	009b      	lsls	r3, r3, #2
 800de04:	b2db      	uxtb	r3, r3
 800de06:	f003 0304 	and.w	r3, r3, #4
 800de0a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800de0c:	7d7b      	ldrb	r3, [r7, #21]
 800de0e:	b29c      	uxth	r4, r3
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de14:	4618      	mov	r0, r3
 800de16:	f7f9 f97c 	bl	8007112 <lwip_htonl>
 800de1a:	4603      	mov	r3, r0
 800de1c:	2200      	movs	r2, #0
 800de1e:	4621      	mov	r1, r4
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f7ff fec1 	bl	800dba8 <tcp_output_alloc_header>
 800de26:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d109      	bne.n	800de42 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	8b5b      	ldrh	r3, [r3, #26]
 800de32:	f043 0303 	orr.w	r3, r3, #3
 800de36:	b29a      	uxth	r2, r3
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800de3c:	f06f 0301 	mvn.w	r3, #1
 800de40:	e023      	b.n	800de8a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800de42:	7dbb      	ldrb	r3, [r7, #22]
 800de44:	7dfa      	ldrb	r2, [r7, #23]
 800de46:	6939      	ldr	r1, [r7, #16]
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f7ff feeb 	bl	800dc24 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800de4e:	687a      	ldr	r2, [r7, #4]
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	3304      	adds	r3, #4
 800de54:	6939      	ldr	r1, [r7, #16]
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f7ff ff24 	bl	800dca4 <tcp_output_control_segment>
 800de5c:	4603      	mov	r3, r0
 800de5e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800de60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d007      	beq.n	800de78 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	8b5b      	ldrh	r3, [r3, #26]
 800de6c:	f043 0303 	orr.w	r3, r3, #3
 800de70:	b29a      	uxth	r2, r3
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	835a      	strh	r2, [r3, #26]
 800de76:	e006      	b.n	800de86 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	8b5b      	ldrh	r3, [r3, #26]
 800de7c:	f023 0303 	bic.w	r3, r3, #3
 800de80:	b29a      	uxth	r2, r3
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800de86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	371c      	adds	r7, #28
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd90      	pop	{r4, r7, pc}
 800de92:	bf00      	nop
 800de94:	08013f20 	.word	0x08013f20
 800de98:	080146dc 	.word	0x080146dc
 800de9c:	08013f74 	.word	0x08013f74

0800dea0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800dea0:	b590      	push	{r4, r7, lr}
 800dea2:	b087      	sub	sp, #28
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dea8:	2300      	movs	r3, #0
 800deaa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d106      	bne.n	800dec0 <tcp_keepalive+0x20>
 800deb2:	4b18      	ldr	r3, [pc, #96]	; (800df14 <tcp_keepalive+0x74>)
 800deb4:	f640 0224 	movw	r2, #2084	; 0x824
 800deb8:	4917      	ldr	r1, [pc, #92]	; (800df18 <tcp_keepalive+0x78>)
 800deba:	4818      	ldr	r0, [pc, #96]	; (800df1c <tcp_keepalive+0x7c>)
 800debc:	f003 fa5c 	bl	8011378 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800dec0:	7dfb      	ldrb	r3, [r7, #23]
 800dec2:	b29c      	uxth	r4, r3
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dec8:	3b01      	subs	r3, #1
 800deca:	4618      	mov	r0, r3
 800decc:	f7f9 f921 	bl	8007112 <lwip_htonl>
 800ded0:	4603      	mov	r3, r0
 800ded2:	2200      	movs	r2, #0
 800ded4:	4621      	mov	r1, r4
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f7ff fe66 	bl	800dba8 <tcp_output_alloc_header>
 800dedc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d102      	bne.n	800deea <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800dee4:	f04f 33ff 	mov.w	r3, #4294967295
 800dee8:	e010      	b.n	800df0c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800deea:	7dfb      	ldrb	r3, [r7, #23]
 800deec:	2200      	movs	r2, #0
 800deee:	6939      	ldr	r1, [r7, #16]
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f7ff fe97 	bl	800dc24 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800def6:	687a      	ldr	r2, [r7, #4]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	3304      	adds	r3, #4
 800defc:	6939      	ldr	r1, [r7, #16]
 800defe:	6878      	ldr	r0, [r7, #4]
 800df00:	f7ff fed0 	bl	800dca4 <tcp_output_control_segment>
 800df04:	4603      	mov	r3, r0
 800df06:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800df08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	371c      	adds	r7, #28
 800df10:	46bd      	mov	sp, r7
 800df12:	bd90      	pop	{r4, r7, pc}
 800df14:	08013f20 	.word	0x08013f20
 800df18:	080146fc 	.word	0x080146fc
 800df1c:	08013f74 	.word	0x08013f74

0800df20 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800df20:	b590      	push	{r4, r7, lr}
 800df22:	b08b      	sub	sp, #44	; 0x2c
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800df28:	2300      	movs	r3, #0
 800df2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d106      	bne.n	800df42 <tcp_zero_window_probe+0x22>
 800df34:	4b4c      	ldr	r3, [pc, #304]	; (800e068 <tcp_zero_window_probe+0x148>)
 800df36:	f640 024f 	movw	r2, #2127	; 0x84f
 800df3a:	494c      	ldr	r1, [pc, #304]	; (800e06c <tcp_zero_window_probe+0x14c>)
 800df3c:	484c      	ldr	r0, [pc, #304]	; (800e070 <tcp_zero_window_probe+0x150>)
 800df3e:	f003 fa1b 	bl	8011378 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df46:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800df48:	6a3b      	ldr	r3, [r7, #32]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d101      	bne.n	800df52 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800df4e:	2300      	movs	r3, #0
 800df50:	e086      	b.n	800e060 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800df58:	2bff      	cmp	r3, #255	; 0xff
 800df5a:	d007      	beq.n	800df6c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800df62:	3301      	adds	r3, #1
 800df64:	b2da      	uxtb	r2, r3
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800df6c:	6a3b      	ldr	r3, [r7, #32]
 800df6e:	68db      	ldr	r3, [r3, #12]
 800df70:	899b      	ldrh	r3, [r3, #12]
 800df72:	b29b      	uxth	r3, r3
 800df74:	4618      	mov	r0, r3
 800df76:	f7f9 f8b7 	bl	80070e8 <lwip_htons>
 800df7a:	4603      	mov	r3, r0
 800df7c:	b2db      	uxtb	r3, r3
 800df7e:	f003 0301 	and.w	r3, r3, #1
 800df82:	2b00      	cmp	r3, #0
 800df84:	d005      	beq.n	800df92 <tcp_zero_window_probe+0x72>
 800df86:	6a3b      	ldr	r3, [r7, #32]
 800df88:	891b      	ldrh	r3, [r3, #8]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d101      	bne.n	800df92 <tcp_zero_window_probe+0x72>
 800df8e:	2301      	movs	r3, #1
 800df90:	e000      	b.n	800df94 <tcp_zero_window_probe+0x74>
 800df92:	2300      	movs	r3, #0
 800df94:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800df96:	7ffb      	ldrb	r3, [r7, #31]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	bf0c      	ite	eq
 800df9c:	2301      	moveq	r3, #1
 800df9e:	2300      	movne	r3, #0
 800dfa0:	b2db      	uxtb	r3, r3
 800dfa2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800dfa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfa8:	b299      	uxth	r1, r3
 800dfaa:	6a3b      	ldr	r3, [r7, #32]
 800dfac:	68db      	ldr	r3, [r3, #12]
 800dfae:	685b      	ldr	r3, [r3, #4]
 800dfb0:	8bba      	ldrh	r2, [r7, #28]
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f7ff fdf8 	bl	800dba8 <tcp_output_alloc_header>
 800dfb8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800dfba:	69bb      	ldr	r3, [r7, #24]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d102      	bne.n	800dfc6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800dfc0:	f04f 33ff 	mov.w	r3, #4294967295
 800dfc4:	e04c      	b.n	800e060 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800dfc6:	69bb      	ldr	r3, [r7, #24]
 800dfc8:	685b      	ldr	r3, [r3, #4]
 800dfca:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800dfcc:	7ffb      	ldrb	r3, [r7, #31]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d011      	beq.n	800dff6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	899b      	ldrh	r3, [r3, #12]
 800dfd6:	b29b      	uxth	r3, r3
 800dfd8:	b21b      	sxth	r3, r3
 800dfda:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800dfde:	b21c      	sxth	r4, r3
 800dfe0:	2011      	movs	r0, #17
 800dfe2:	f7f9 f881 	bl	80070e8 <lwip_htons>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	b21b      	sxth	r3, r3
 800dfea:	4323      	orrs	r3, r4
 800dfec:	b21b      	sxth	r3, r3
 800dfee:	b29a      	uxth	r2, r3
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	819a      	strh	r2, [r3, #12]
 800dff4:	e010      	b.n	800e018 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800dff6:	69bb      	ldr	r3, [r7, #24]
 800dff8:	685b      	ldr	r3, [r3, #4]
 800dffa:	3314      	adds	r3, #20
 800dffc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800dffe:	6a3b      	ldr	r3, [r7, #32]
 800e000:	6858      	ldr	r0, [r3, #4]
 800e002:	6a3b      	ldr	r3, [r7, #32]
 800e004:	685b      	ldr	r3, [r3, #4]
 800e006:	891a      	ldrh	r2, [r3, #8]
 800e008:	6a3b      	ldr	r3, [r7, #32]
 800e00a:	891b      	ldrh	r3, [r3, #8]
 800e00c:	1ad3      	subs	r3, r2, r3
 800e00e:	b29b      	uxth	r3, r3
 800e010:	2201      	movs	r2, #1
 800e012:	6939      	ldr	r1, [r7, #16]
 800e014:	f7fa fdc0 	bl	8008b98 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e018:	6a3b      	ldr	r3, [r7, #32]
 800e01a:	68db      	ldr	r3, [r3, #12]
 800e01c:	685b      	ldr	r3, [r3, #4]
 800e01e:	4618      	mov	r0, r3
 800e020:	f7f9 f877 	bl	8007112 <lwip_htonl>
 800e024:	4603      	mov	r3, r0
 800e026:	3301      	adds	r3, #1
 800e028:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	1ad3      	subs	r3, r2, r3
 800e032:	2b00      	cmp	r3, #0
 800e034:	da02      	bge.n	800e03c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	68fa      	ldr	r2, [r7, #12]
 800e03a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e03c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e040:	2200      	movs	r2, #0
 800e042:	69b9      	ldr	r1, [r7, #24]
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f7ff fded 	bl	800dc24 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e04a:	687a      	ldr	r2, [r7, #4]
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	3304      	adds	r3, #4
 800e050:	69b9      	ldr	r1, [r7, #24]
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f7ff fe26 	bl	800dca4 <tcp_output_control_segment>
 800e058:	4603      	mov	r3, r0
 800e05a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e05c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e060:	4618      	mov	r0, r3
 800e062:	372c      	adds	r7, #44	; 0x2c
 800e064:	46bd      	mov	sp, r7
 800e066:	bd90      	pop	{r4, r7, pc}
 800e068:	08013f20 	.word	0x08013f20
 800e06c:	08014718 	.word	0x08014718
 800e070:	08013f74 	.word	0x08013f74

0800e074 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b082      	sub	sp, #8
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e07c:	f7fa ff0c 	bl	8008e98 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e080:	4b0a      	ldr	r3, [pc, #40]	; (800e0ac <tcpip_tcp_timer+0x38>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d103      	bne.n	800e090 <tcpip_tcp_timer+0x1c>
 800e088:	4b09      	ldr	r3, [pc, #36]	; (800e0b0 <tcpip_tcp_timer+0x3c>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d005      	beq.n	800e09c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e090:	2200      	movs	r2, #0
 800e092:	4908      	ldr	r1, [pc, #32]	; (800e0b4 <tcpip_tcp_timer+0x40>)
 800e094:	20fa      	movs	r0, #250	; 0xfa
 800e096:	f000 f8f3 	bl	800e280 <sys_timeout>
 800e09a:	e003      	b.n	800e0a4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e09c:	4b06      	ldr	r3, [pc, #24]	; (800e0b8 <tcpip_tcp_timer+0x44>)
 800e09e:	2200      	movs	r2, #0
 800e0a0:	601a      	str	r2, [r3, #0]
  }
}
 800e0a2:	bf00      	nop
 800e0a4:	bf00      	nop
 800e0a6:	3708      	adds	r7, #8
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}
 800e0ac:	2000bc38 	.word	0x2000bc38
 800e0b0:	2000bc3c 	.word	0x2000bc3c
 800e0b4:	0800e075 	.word	0x0800e075
 800e0b8:	2000bc84 	.word	0x2000bc84

0800e0bc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e0c0:	4b0a      	ldr	r3, [pc, #40]	; (800e0ec <tcp_timer_needed+0x30>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d10f      	bne.n	800e0e8 <tcp_timer_needed+0x2c>
 800e0c8:	4b09      	ldr	r3, [pc, #36]	; (800e0f0 <tcp_timer_needed+0x34>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d103      	bne.n	800e0d8 <tcp_timer_needed+0x1c>
 800e0d0:	4b08      	ldr	r3, [pc, #32]	; (800e0f4 <tcp_timer_needed+0x38>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d007      	beq.n	800e0e8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e0d8:	4b04      	ldr	r3, [pc, #16]	; (800e0ec <tcp_timer_needed+0x30>)
 800e0da:	2201      	movs	r2, #1
 800e0dc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e0de:	2200      	movs	r2, #0
 800e0e0:	4905      	ldr	r1, [pc, #20]	; (800e0f8 <tcp_timer_needed+0x3c>)
 800e0e2:	20fa      	movs	r0, #250	; 0xfa
 800e0e4:	f000 f8cc 	bl	800e280 <sys_timeout>
  }
}
 800e0e8:	bf00      	nop
 800e0ea:	bd80      	pop	{r7, pc}
 800e0ec:	2000bc84 	.word	0x2000bc84
 800e0f0:	2000bc38 	.word	0x2000bc38
 800e0f4:	2000bc3c 	.word	0x2000bc3c
 800e0f8:	0800e075 	.word	0x0800e075

0800e0fc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b086      	sub	sp, #24
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	60b9      	str	r1, [r7, #8]
 800e106:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e108:	2006      	movs	r0, #6
 800e10a:	f7f9 fc65 	bl	80079d8 <memp_malloc>
 800e10e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e110:	693b      	ldr	r3, [r7, #16]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d109      	bne.n	800e12a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d151      	bne.n	800e1c0 <sys_timeout_abs+0xc4>
 800e11c:	4b2a      	ldr	r3, [pc, #168]	; (800e1c8 <sys_timeout_abs+0xcc>)
 800e11e:	22be      	movs	r2, #190	; 0xbe
 800e120:	492a      	ldr	r1, [pc, #168]	; (800e1cc <sys_timeout_abs+0xd0>)
 800e122:	482b      	ldr	r0, [pc, #172]	; (800e1d0 <sys_timeout_abs+0xd4>)
 800e124:	f003 f928 	bl	8011378 <iprintf>
    return;
 800e128:	e04a      	b.n	800e1c0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	2200      	movs	r2, #0
 800e12e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	68ba      	ldr	r2, [r7, #8]
 800e134:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	687a      	ldr	r2, [r7, #4]
 800e13a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	68fa      	ldr	r2, [r7, #12]
 800e140:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e142:	4b24      	ldr	r3, [pc, #144]	; (800e1d4 <sys_timeout_abs+0xd8>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d103      	bne.n	800e152 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800e14a:	4a22      	ldr	r2, [pc, #136]	; (800e1d4 <sys_timeout_abs+0xd8>)
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	6013      	str	r3, [r2, #0]
    return;
 800e150:	e037      	b.n	800e1c2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	685a      	ldr	r2, [r3, #4]
 800e156:	4b1f      	ldr	r3, [pc, #124]	; (800e1d4 <sys_timeout_abs+0xd8>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	685b      	ldr	r3, [r3, #4]
 800e15c:	1ad3      	subs	r3, r2, r3
 800e15e:	0fdb      	lsrs	r3, r3, #31
 800e160:	f003 0301 	and.w	r3, r3, #1
 800e164:	b2db      	uxtb	r3, r3
 800e166:	2b00      	cmp	r3, #0
 800e168:	d007      	beq.n	800e17a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e16a:	4b1a      	ldr	r3, [pc, #104]	; (800e1d4 <sys_timeout_abs+0xd8>)
 800e16c:	681a      	ldr	r2, [r3, #0]
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e172:	4a18      	ldr	r2, [pc, #96]	; (800e1d4 <sys_timeout_abs+0xd8>)
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	6013      	str	r3, [r2, #0]
 800e178:	e023      	b.n	800e1c2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e17a:	4b16      	ldr	r3, [pc, #88]	; (800e1d4 <sys_timeout_abs+0xd8>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	617b      	str	r3, [r7, #20]
 800e180:	e01a      	b.n	800e1b8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d00b      	beq.n	800e1a2 <sys_timeout_abs+0xa6>
 800e18a:	693b      	ldr	r3, [r7, #16]
 800e18c:	685a      	ldr	r2, [r3, #4]
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	685b      	ldr	r3, [r3, #4]
 800e194:	1ad3      	subs	r3, r2, r3
 800e196:	0fdb      	lsrs	r3, r3, #31
 800e198:	f003 0301 	and.w	r3, r3, #1
 800e19c:	b2db      	uxtb	r3, r3
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d007      	beq.n	800e1b2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	681a      	ldr	r2, [r3, #0]
 800e1a6:	693b      	ldr	r3, [r7, #16]
 800e1a8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	693a      	ldr	r2, [r7, #16]
 800e1ae:	601a      	str	r2, [r3, #0]
        break;
 800e1b0:	e007      	b.n	800e1c2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	617b      	str	r3, [r7, #20]
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d1e1      	bne.n	800e182 <sys_timeout_abs+0x86>
 800e1be:	e000      	b.n	800e1c2 <sys_timeout_abs+0xc6>
    return;
 800e1c0:	bf00      	nop
      }
    }
  }
}
 800e1c2:	3718      	adds	r7, #24
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}
 800e1c8:	0801473c 	.word	0x0801473c
 800e1cc:	08014770 	.word	0x08014770
 800e1d0:	080147b0 	.word	0x080147b0
 800e1d4:	2000bc7c 	.word	0x2000bc7c

0800e1d8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b086      	sub	sp, #24
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	4798      	blx	r3

  now = sys_now();
 800e1ea:	f7f8 fd69 	bl	8006cc0 <sys_now>
 800e1ee:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	681a      	ldr	r2, [r3, #0]
 800e1f4:	4b0f      	ldr	r3, [pc, #60]	; (800e234 <lwip_cyclic_timer+0x5c>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	4413      	add	r3, r2
 800e1fa:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e1fc:	68fa      	ldr	r2, [r7, #12]
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	1ad3      	subs	r3, r2, r3
 800e202:	0fdb      	lsrs	r3, r3, #31
 800e204:	f003 0301 	and.w	r3, r3, #1
 800e208:	b2db      	uxtb	r3, r3
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d009      	beq.n	800e222 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	681a      	ldr	r2, [r3, #0]
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	4413      	add	r3, r2
 800e216:	687a      	ldr	r2, [r7, #4]
 800e218:	4907      	ldr	r1, [pc, #28]	; (800e238 <lwip_cyclic_timer+0x60>)
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7ff ff6e 	bl	800e0fc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e220:	e004      	b.n	800e22c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	4904      	ldr	r1, [pc, #16]	; (800e238 <lwip_cyclic_timer+0x60>)
 800e226:	68f8      	ldr	r0, [r7, #12]
 800e228:	f7ff ff68 	bl	800e0fc <sys_timeout_abs>
}
 800e22c:	bf00      	nop
 800e22e:	3718      	adds	r7, #24
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}
 800e234:	2000bc80 	.word	0x2000bc80
 800e238:	0800e1d9 	.word	0x0800e1d9

0800e23c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b082      	sub	sp, #8
 800e240:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e242:	2301      	movs	r3, #1
 800e244:	607b      	str	r3, [r7, #4]
 800e246:	e00e      	b.n	800e266 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e248:	4a0b      	ldr	r2, [pc, #44]	; (800e278 <sys_timeouts_init+0x3c>)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	00db      	lsls	r3, r3, #3
 800e254:	4a08      	ldr	r2, [pc, #32]	; (800e278 <sys_timeouts_init+0x3c>)
 800e256:	4413      	add	r3, r2
 800e258:	461a      	mov	r2, r3
 800e25a:	4908      	ldr	r1, [pc, #32]	; (800e27c <sys_timeouts_init+0x40>)
 800e25c:	f000 f810 	bl	800e280 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	3301      	adds	r3, #1
 800e264:	607b      	str	r3, [r7, #4]
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2b02      	cmp	r3, #2
 800e26a:	d9ed      	bls.n	800e248 <sys_timeouts_init+0xc>
  }
}
 800e26c:	bf00      	nop
 800e26e:	bf00      	nop
 800e270:	3708      	adds	r7, #8
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
 800e276:	bf00      	nop
 800e278:	08015328 	.word	0x08015328
 800e27c:	0800e1d9 	.word	0x0800e1d9

0800e280 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b086      	sub	sp, #24
 800e284:	af00      	add	r7, sp, #0
 800e286:	60f8      	str	r0, [r7, #12]
 800e288:	60b9      	str	r1, [r7, #8]
 800e28a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e292:	d306      	bcc.n	800e2a2 <sys_timeout+0x22>
 800e294:	4b0a      	ldr	r3, [pc, #40]	; (800e2c0 <sys_timeout+0x40>)
 800e296:	f240 1229 	movw	r2, #297	; 0x129
 800e29a:	490a      	ldr	r1, [pc, #40]	; (800e2c4 <sys_timeout+0x44>)
 800e29c:	480a      	ldr	r0, [pc, #40]	; (800e2c8 <sys_timeout+0x48>)
 800e29e:	f003 f86b 	bl	8011378 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e2a2:	f7f8 fd0d 	bl	8006cc0 <sys_now>
 800e2a6:	4602      	mov	r2, r0
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	4413      	add	r3, r2
 800e2ac:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e2ae:	687a      	ldr	r2, [r7, #4]
 800e2b0:	68b9      	ldr	r1, [r7, #8]
 800e2b2:	6978      	ldr	r0, [r7, #20]
 800e2b4:	f7ff ff22 	bl	800e0fc <sys_timeout_abs>
#endif
}
 800e2b8:	bf00      	nop
 800e2ba:	3718      	adds	r7, #24
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}
 800e2c0:	0801473c 	.word	0x0801473c
 800e2c4:	080147d8 	.word	0x080147d8
 800e2c8:	080147b0 	.word	0x080147b0

0800e2cc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b084      	sub	sp, #16
 800e2d0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e2d2:	f7f8 fcf5 	bl	8006cc0 <sys_now>
 800e2d6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800e2d8:	4b1a      	ldr	r3, [pc, #104]	; (800e344 <sys_check_timeouts+0x78>)
 800e2da:	781b      	ldrb	r3, [r3, #0]
 800e2dc:	b2db      	uxtb	r3, r3
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d001      	beq.n	800e2e6 <sys_check_timeouts+0x1a>
 800e2e2:	f7f9 ff25 	bl	8008130 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800e2e6:	4b18      	ldr	r3, [pc, #96]	; (800e348 <sys_check_timeouts+0x7c>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d022      	beq.n	800e338 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	685b      	ldr	r3, [r3, #4]
 800e2f6:	68fa      	ldr	r2, [r7, #12]
 800e2f8:	1ad3      	subs	r3, r2, r3
 800e2fa:	0fdb      	lsrs	r3, r3, #31
 800e2fc:	f003 0301 	and.w	r3, r3, #1
 800e300:	b2db      	uxtb	r3, r3
 800e302:	2b00      	cmp	r3, #0
 800e304:	d11a      	bne.n	800e33c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	4a0f      	ldr	r2, [pc, #60]	; (800e348 <sys_check_timeouts+0x7c>)
 800e30c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	689b      	ldr	r3, [r3, #8]
 800e312:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	68db      	ldr	r3, [r3, #12]
 800e318:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	685b      	ldr	r3, [r3, #4]
 800e31e:	4a0b      	ldr	r2, [pc, #44]	; (800e34c <sys_check_timeouts+0x80>)
 800e320:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e322:	68b9      	ldr	r1, [r7, #8]
 800e324:	2006      	movs	r0, #6
 800e326:	f7f9 fbc7 	bl	8007ab8 <memp_free>
    if (handler != NULL) {
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d0d3      	beq.n	800e2d8 <sys_check_timeouts+0xc>
      handler(arg);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6838      	ldr	r0, [r7, #0]
 800e334:	4798      	blx	r3
  do {
 800e336:	e7cf      	b.n	800e2d8 <sys_check_timeouts+0xc>
      return;
 800e338:	bf00      	nop
 800e33a:	e000      	b.n	800e33e <sys_check_timeouts+0x72>
      return;
 800e33c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e33e:	3710      	adds	r7, #16
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}
 800e344:	2000bc29 	.word	0x2000bc29
 800e348:	2000bc7c 	.word	0x2000bc7c
 800e34c:	2000bc80 	.word	0x2000bc80

0800e350 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e354:	f003 f828 	bl	80113a8 <rand>
 800e358:	4603      	mov	r3, r0
 800e35a:	b29b      	uxth	r3, r3
 800e35c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e360:	b29b      	uxth	r3, r3
 800e362:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e366:	b29a      	uxth	r2, r3
 800e368:	4b01      	ldr	r3, [pc, #4]	; (800e370 <udp_init+0x20>)
 800e36a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e36c:	bf00      	nop
 800e36e:	bd80      	pop	{r7, pc}
 800e370:	20000028 	.word	0x20000028

0800e374 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800e374:	b480      	push	{r7}
 800e376:	b083      	sub	sp, #12
 800e378:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800e37a:	2300      	movs	r3, #0
 800e37c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800e37e:	4b17      	ldr	r3, [pc, #92]	; (800e3dc <udp_new_port+0x68>)
 800e380:	881b      	ldrh	r3, [r3, #0]
 800e382:	1c5a      	adds	r2, r3, #1
 800e384:	b291      	uxth	r1, r2
 800e386:	4a15      	ldr	r2, [pc, #84]	; (800e3dc <udp_new_port+0x68>)
 800e388:	8011      	strh	r1, [r2, #0]
 800e38a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e38e:	4293      	cmp	r3, r2
 800e390:	d103      	bne.n	800e39a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800e392:	4b12      	ldr	r3, [pc, #72]	; (800e3dc <udp_new_port+0x68>)
 800e394:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e398:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e39a:	4b11      	ldr	r3, [pc, #68]	; (800e3e0 <udp_new_port+0x6c>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	603b      	str	r3, [r7, #0]
 800e3a0:	e011      	b.n	800e3c6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	8a5a      	ldrh	r2, [r3, #18]
 800e3a6:	4b0d      	ldr	r3, [pc, #52]	; (800e3dc <udp_new_port+0x68>)
 800e3a8:	881b      	ldrh	r3, [r3, #0]
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d108      	bne.n	800e3c0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800e3ae:	88fb      	ldrh	r3, [r7, #6]
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	80fb      	strh	r3, [r7, #6]
 800e3b4:	88fb      	ldrh	r3, [r7, #6]
 800e3b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e3ba:	d3e0      	bcc.n	800e37e <udp_new_port+0xa>
        return 0;
 800e3bc:	2300      	movs	r3, #0
 800e3be:	e007      	b.n	800e3d0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	68db      	ldr	r3, [r3, #12]
 800e3c4:	603b      	str	r3, [r7, #0]
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d1ea      	bne.n	800e3a2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800e3cc:	4b03      	ldr	r3, [pc, #12]	; (800e3dc <udp_new_port+0x68>)
 800e3ce:	881b      	ldrh	r3, [r3, #0]
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	370c      	adds	r7, #12
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3da:	4770      	bx	lr
 800e3dc:	20000028 	.word	0x20000028
 800e3e0:	2000bc88 	.word	0x2000bc88

0800e3e4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b084      	sub	sp, #16
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	60f8      	str	r0, [r7, #12]
 800e3ec:	60b9      	str	r1, [r7, #8]
 800e3ee:	4613      	mov	r3, r2
 800e3f0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d105      	bne.n	800e404 <udp_input_local_match+0x20>
 800e3f8:	4b27      	ldr	r3, [pc, #156]	; (800e498 <udp_input_local_match+0xb4>)
 800e3fa:	2287      	movs	r2, #135	; 0x87
 800e3fc:	4927      	ldr	r1, [pc, #156]	; (800e49c <udp_input_local_match+0xb8>)
 800e3fe:	4828      	ldr	r0, [pc, #160]	; (800e4a0 <udp_input_local_match+0xbc>)
 800e400:	f002 ffba 	bl	8011378 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e404:	68bb      	ldr	r3, [r7, #8]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d105      	bne.n	800e416 <udp_input_local_match+0x32>
 800e40a:	4b23      	ldr	r3, [pc, #140]	; (800e498 <udp_input_local_match+0xb4>)
 800e40c:	2288      	movs	r2, #136	; 0x88
 800e40e:	4925      	ldr	r1, [pc, #148]	; (800e4a4 <udp_input_local_match+0xc0>)
 800e410:	4823      	ldr	r0, [pc, #140]	; (800e4a0 <udp_input_local_match+0xbc>)
 800e412:	f002 ffb1 	bl	8011378 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	7a1b      	ldrb	r3, [r3, #8]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d00b      	beq.n	800e436 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	7a1a      	ldrb	r2, [r3, #8]
 800e422:	4b21      	ldr	r3, [pc, #132]	; (800e4a8 <udp_input_local_match+0xc4>)
 800e424:	685b      	ldr	r3, [r3, #4]
 800e426:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e42a:	3301      	adds	r3, #1
 800e42c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e42e:	429a      	cmp	r2, r3
 800e430:	d001      	beq.n	800e436 <udp_input_local_match+0x52>
    return 0;
 800e432:	2300      	movs	r3, #0
 800e434:	e02b      	b.n	800e48e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e436:	79fb      	ldrb	r3, [r7, #7]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d018      	beq.n	800e46e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d013      	beq.n	800e46a <udp_input_local_match+0x86>
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d00f      	beq.n	800e46a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e44a:	4b17      	ldr	r3, [pc, #92]	; (800e4a8 <udp_input_local_match+0xc4>)
 800e44c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e44e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e452:	d00a      	beq.n	800e46a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	681a      	ldr	r2, [r3, #0]
 800e458:	4b13      	ldr	r3, [pc, #76]	; (800e4a8 <udp_input_local_match+0xc4>)
 800e45a:	695b      	ldr	r3, [r3, #20]
 800e45c:	405a      	eors	r2, r3
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	3308      	adds	r3, #8
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e466:	2b00      	cmp	r3, #0
 800e468:	d110      	bne.n	800e48c <udp_input_local_match+0xa8>
          return 1;
 800e46a:	2301      	movs	r3, #1
 800e46c:	e00f      	b.n	800e48e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d009      	beq.n	800e488 <udp_input_local_match+0xa4>
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d005      	beq.n	800e488 <udp_input_local_match+0xa4>
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	681a      	ldr	r2, [r3, #0]
 800e480:	4b09      	ldr	r3, [pc, #36]	; (800e4a8 <udp_input_local_match+0xc4>)
 800e482:	695b      	ldr	r3, [r3, #20]
 800e484:	429a      	cmp	r2, r3
 800e486:	d101      	bne.n	800e48c <udp_input_local_match+0xa8>
        return 1;
 800e488:	2301      	movs	r3, #1
 800e48a:	e000      	b.n	800e48e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e48c:	2300      	movs	r3, #0
}
 800e48e:	4618      	mov	r0, r3
 800e490:	3710      	adds	r7, #16
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}
 800e496:	bf00      	nop
 800e498:	08014824 	.word	0x08014824
 800e49c:	08014854 	.word	0x08014854
 800e4a0:	08014878 	.word	0x08014878
 800e4a4:	080148a0 	.word	0x080148a0
 800e4a8:	200064fc 	.word	0x200064fc

0800e4ac <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e4ac:	b590      	push	{r4, r7, lr}
 800e4ae:	b08d      	sub	sp, #52	; 0x34
 800e4b0:	af02      	add	r7, sp, #8
 800e4b2:	6078      	str	r0, [r7, #4]
 800e4b4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d105      	bne.n	800e4cc <udp_input+0x20>
 800e4c0:	4b7c      	ldr	r3, [pc, #496]	; (800e6b4 <udp_input+0x208>)
 800e4c2:	22cf      	movs	r2, #207	; 0xcf
 800e4c4:	497c      	ldr	r1, [pc, #496]	; (800e6b8 <udp_input+0x20c>)
 800e4c6:	487d      	ldr	r0, [pc, #500]	; (800e6bc <udp_input+0x210>)
 800e4c8:	f002 ff56 	bl	8011378 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d105      	bne.n	800e4de <udp_input+0x32>
 800e4d2:	4b78      	ldr	r3, [pc, #480]	; (800e6b4 <udp_input+0x208>)
 800e4d4:	22d0      	movs	r2, #208	; 0xd0
 800e4d6:	497a      	ldr	r1, [pc, #488]	; (800e6c0 <udp_input+0x214>)
 800e4d8:	4878      	ldr	r0, [pc, #480]	; (800e6bc <udp_input+0x210>)
 800e4da:	f002 ff4d 	bl	8011378 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	895b      	ldrh	r3, [r3, #10]
 800e4e2:	2b07      	cmp	r3, #7
 800e4e4:	d803      	bhi.n	800e4ee <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f7fa f95c 	bl	80087a4 <pbuf_free>
    goto end;
 800e4ec:	e0de      	b.n	800e6ac <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	685b      	ldr	r3, [r3, #4]
 800e4f2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e4f4:	4b73      	ldr	r3, [pc, #460]	; (800e6c4 <udp_input+0x218>)
 800e4f6:	695b      	ldr	r3, [r3, #20]
 800e4f8:	4a72      	ldr	r2, [pc, #456]	; (800e6c4 <udp_input+0x218>)
 800e4fa:	6812      	ldr	r2, [r2, #0]
 800e4fc:	4611      	mov	r1, r2
 800e4fe:	4618      	mov	r0, r3
 800e500:	f001 ff80 	bl	8010404 <ip4_addr_isbroadcast_u32>
 800e504:	4603      	mov	r3, r0
 800e506:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	881b      	ldrh	r3, [r3, #0]
 800e50c:	b29b      	uxth	r3, r3
 800e50e:	4618      	mov	r0, r3
 800e510:	f7f8 fdea 	bl	80070e8 <lwip_htons>
 800e514:	4603      	mov	r3, r0
 800e516:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	885b      	ldrh	r3, [r3, #2]
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	4618      	mov	r0, r3
 800e520:	f7f8 fde2 	bl	80070e8 <lwip_htons>
 800e524:	4603      	mov	r3, r0
 800e526:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e528:	2300      	movs	r3, #0
 800e52a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e52c:	2300      	movs	r3, #0
 800e52e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e530:	2300      	movs	r3, #0
 800e532:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e534:	4b64      	ldr	r3, [pc, #400]	; (800e6c8 <udp_input+0x21c>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	627b      	str	r3, [r7, #36]	; 0x24
 800e53a:	e054      	b.n	800e5e6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53e:	8a5b      	ldrh	r3, [r3, #18]
 800e540:	89fa      	ldrh	r2, [r7, #14]
 800e542:	429a      	cmp	r2, r3
 800e544:	d14a      	bne.n	800e5dc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e546:	7cfb      	ldrb	r3, [r7, #19]
 800e548:	461a      	mov	r2, r3
 800e54a:	6839      	ldr	r1, [r7, #0]
 800e54c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e54e:	f7ff ff49 	bl	800e3e4 <udp_input_local_match>
 800e552:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e554:	2b00      	cmp	r3, #0
 800e556:	d041      	beq.n	800e5dc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55a:	7c1b      	ldrb	r3, [r3, #16]
 800e55c:	f003 0304 	and.w	r3, r3, #4
 800e560:	2b00      	cmp	r3, #0
 800e562:	d11d      	bne.n	800e5a0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e564:	69fb      	ldr	r3, [r7, #28]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d102      	bne.n	800e570 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e56c:	61fb      	str	r3, [r7, #28]
 800e56e:	e017      	b.n	800e5a0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e570:	7cfb      	ldrb	r3, [r7, #19]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d014      	beq.n	800e5a0 <udp_input+0xf4>
 800e576:	4b53      	ldr	r3, [pc, #332]	; (800e6c4 <udp_input+0x218>)
 800e578:	695b      	ldr	r3, [r3, #20]
 800e57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e57e:	d10f      	bne.n	800e5a0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e580:	69fb      	ldr	r3, [r7, #28]
 800e582:	681a      	ldr	r2, [r3, #0]
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	3304      	adds	r3, #4
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	429a      	cmp	r2, r3
 800e58c:	d008      	beq.n	800e5a0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e590:	681a      	ldr	r2, [r3, #0]
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	3304      	adds	r3, #4
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	429a      	cmp	r2, r3
 800e59a:	d101      	bne.n	800e5a0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a2:	8a9b      	ldrh	r3, [r3, #20]
 800e5a4:	8a3a      	ldrh	r2, [r7, #16]
 800e5a6:	429a      	cmp	r2, r3
 800e5a8:	d118      	bne.n	800e5dc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ac:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d005      	beq.n	800e5be <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b4:	685a      	ldr	r2, [r3, #4]
 800e5b6:	4b43      	ldr	r3, [pc, #268]	; (800e6c4 <udp_input+0x218>)
 800e5b8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	d10e      	bne.n	800e5dc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e5be:	6a3b      	ldr	r3, [r7, #32]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d014      	beq.n	800e5ee <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c6:	68da      	ldr	r2, [r3, #12]
 800e5c8:	6a3b      	ldr	r3, [r7, #32]
 800e5ca:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e5cc:	4b3e      	ldr	r3, [pc, #248]	; (800e6c8 <udp_input+0x21c>)
 800e5ce:	681a      	ldr	r2, [r3, #0]
 800e5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e5d4:	4a3c      	ldr	r2, [pc, #240]	; (800e6c8 <udp_input+0x21c>)
 800e5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e5da:	e008      	b.n	800e5ee <udp_input+0x142>
      }
    }

    prev = pcb;
 800e5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5de:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e2:	68db      	ldr	r3, [r3, #12]
 800e5e4:	627b      	str	r3, [r7, #36]	; 0x24
 800e5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d1a7      	bne.n	800e53c <udp_input+0x90>
 800e5ec:	e000      	b.n	800e5f0 <udp_input+0x144>
        break;
 800e5ee:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d101      	bne.n	800e5fa <udp_input+0x14e>
    pcb = uncon_pcb;
 800e5f6:	69fb      	ldr	r3, [r7, #28]
 800e5f8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d002      	beq.n	800e606 <udp_input+0x15a>
    for_us = 1;
 800e600:	2301      	movs	r3, #1
 800e602:	76fb      	strb	r3, [r7, #27]
 800e604:	e00a      	b.n	800e61c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	3304      	adds	r3, #4
 800e60a:	681a      	ldr	r2, [r3, #0]
 800e60c:	4b2d      	ldr	r3, [pc, #180]	; (800e6c4 <udp_input+0x218>)
 800e60e:	695b      	ldr	r3, [r3, #20]
 800e610:	429a      	cmp	r2, r3
 800e612:	bf0c      	ite	eq
 800e614:	2301      	moveq	r3, #1
 800e616:	2300      	movne	r3, #0
 800e618:	b2db      	uxtb	r3, r3
 800e61a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e61c:	7efb      	ldrb	r3, [r7, #27]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d041      	beq.n	800e6a6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e622:	2108      	movs	r1, #8
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f7fa f837 	bl	8008698 <pbuf_remove_header>
 800e62a:	4603      	mov	r3, r0
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d00a      	beq.n	800e646 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e630:	4b20      	ldr	r3, [pc, #128]	; (800e6b4 <udp_input+0x208>)
 800e632:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e636:	4925      	ldr	r1, [pc, #148]	; (800e6cc <udp_input+0x220>)
 800e638:	4820      	ldr	r0, [pc, #128]	; (800e6bc <udp_input+0x210>)
 800e63a:	f002 fe9d 	bl	8011378 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f7fa f8b0 	bl	80087a4 <pbuf_free>
      goto end;
 800e644:	e032      	b.n	800e6ac <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d012      	beq.n	800e672 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64e:	699b      	ldr	r3, [r3, #24]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d00a      	beq.n	800e66a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e656:	699c      	ldr	r4, [r3, #24]
 800e658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65a:	69d8      	ldr	r0, [r3, #28]
 800e65c:	8a3b      	ldrh	r3, [r7, #16]
 800e65e:	9300      	str	r3, [sp, #0]
 800e660:	4b1b      	ldr	r3, [pc, #108]	; (800e6d0 <udp_input+0x224>)
 800e662:	687a      	ldr	r2, [r7, #4]
 800e664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e666:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e668:	e021      	b.n	800e6ae <udp_input+0x202>
        pbuf_free(p);
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f7fa f89a 	bl	80087a4 <pbuf_free>
        goto end;
 800e670:	e01c      	b.n	800e6ac <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e672:	7cfb      	ldrb	r3, [r7, #19]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d112      	bne.n	800e69e <udp_input+0x1f2>
 800e678:	4b12      	ldr	r3, [pc, #72]	; (800e6c4 <udp_input+0x218>)
 800e67a:	695b      	ldr	r3, [r3, #20]
 800e67c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e680:	2be0      	cmp	r3, #224	; 0xe0
 800e682:	d00c      	beq.n	800e69e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e684:	4b0f      	ldr	r3, [pc, #60]	; (800e6c4 <udp_input+0x218>)
 800e686:	899b      	ldrh	r3, [r3, #12]
 800e688:	3308      	adds	r3, #8
 800e68a:	b29b      	uxth	r3, r3
 800e68c:	b21b      	sxth	r3, r3
 800e68e:	4619      	mov	r1, r3
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	f7fa f874 	bl	800877e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e696:	2103      	movs	r1, #3
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f001 fb93 	bl	800fdc4 <icmp_dest_unreach>
      pbuf_free(p);
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f7fa f880 	bl	80087a4 <pbuf_free>
  return;
 800e6a4:	e003      	b.n	800e6ae <udp_input+0x202>
    pbuf_free(p);
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f7fa f87c 	bl	80087a4 <pbuf_free>
  return;
 800e6ac:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e6ae:	372c      	adds	r7, #44	; 0x2c
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd90      	pop	{r4, r7, pc}
 800e6b4:	08014824 	.word	0x08014824
 800e6b8:	080148c8 	.word	0x080148c8
 800e6bc:	08014878 	.word	0x08014878
 800e6c0:	080148e0 	.word	0x080148e0
 800e6c4:	200064fc 	.word	0x200064fc
 800e6c8:	2000bc88 	.word	0x2000bc88
 800e6cc:	080148fc 	.word	0x080148fc
 800e6d0:	2000650c 	.word	0x2000650c

0800e6d4 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b082      	sub	sp, #8
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d109      	bne.n	800e6f8 <udp_send+0x24>
 800e6e4:	4b11      	ldr	r3, [pc, #68]	; (800e72c <udp_send+0x58>)
 800e6e6:	f240 12d5 	movw	r2, #469	; 0x1d5
 800e6ea:	4911      	ldr	r1, [pc, #68]	; (800e730 <udp_send+0x5c>)
 800e6ec:	4811      	ldr	r0, [pc, #68]	; (800e734 <udp_send+0x60>)
 800e6ee:	f002 fe43 	bl	8011378 <iprintf>
 800e6f2:	f06f 030f 	mvn.w	r3, #15
 800e6f6:	e015      	b.n	800e724 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d109      	bne.n	800e712 <udp_send+0x3e>
 800e6fe:	4b0b      	ldr	r3, [pc, #44]	; (800e72c <udp_send+0x58>)
 800e700:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800e704:	490c      	ldr	r1, [pc, #48]	; (800e738 <udp_send+0x64>)
 800e706:	480b      	ldr	r0, [pc, #44]	; (800e734 <udp_send+0x60>)
 800e708:	f002 fe36 	bl	8011378 <iprintf>
 800e70c:	f06f 030f 	mvn.w	r3, #15
 800e710:	e008      	b.n	800e724 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	1d1a      	adds	r2, r3, #4
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	8a9b      	ldrh	r3, [r3, #20]
 800e71a:	6839      	ldr	r1, [r7, #0]
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f000 f80d 	bl	800e73c <udp_sendto>
 800e722:	4603      	mov	r3, r0
}
 800e724:	4618      	mov	r0, r3
 800e726:	3708      	adds	r7, #8
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}
 800e72c:	08014824 	.word	0x08014824
 800e730:	08014918 	.word	0x08014918
 800e734:	08014878 	.word	0x08014878
 800e738:	08014930 	.word	0x08014930

0800e73c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b088      	sub	sp, #32
 800e740:	af02      	add	r7, sp, #8
 800e742:	60f8      	str	r0, [r7, #12]
 800e744:	60b9      	str	r1, [r7, #8]
 800e746:	607a      	str	r2, [r7, #4]
 800e748:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d109      	bne.n	800e764 <udp_sendto+0x28>
 800e750:	4b23      	ldr	r3, [pc, #140]	; (800e7e0 <udp_sendto+0xa4>)
 800e752:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e756:	4923      	ldr	r1, [pc, #140]	; (800e7e4 <udp_sendto+0xa8>)
 800e758:	4823      	ldr	r0, [pc, #140]	; (800e7e8 <udp_sendto+0xac>)
 800e75a:	f002 fe0d 	bl	8011378 <iprintf>
 800e75e:	f06f 030f 	mvn.w	r3, #15
 800e762:	e038      	b.n	800e7d6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d109      	bne.n	800e77e <udp_sendto+0x42>
 800e76a:	4b1d      	ldr	r3, [pc, #116]	; (800e7e0 <udp_sendto+0xa4>)
 800e76c:	f240 2219 	movw	r2, #537	; 0x219
 800e770:	491e      	ldr	r1, [pc, #120]	; (800e7ec <udp_sendto+0xb0>)
 800e772:	481d      	ldr	r0, [pc, #116]	; (800e7e8 <udp_sendto+0xac>)
 800e774:	f002 fe00 	bl	8011378 <iprintf>
 800e778:	f06f 030f 	mvn.w	r3, #15
 800e77c:	e02b      	b.n	800e7d6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d109      	bne.n	800e798 <udp_sendto+0x5c>
 800e784:	4b16      	ldr	r3, [pc, #88]	; (800e7e0 <udp_sendto+0xa4>)
 800e786:	f240 221a 	movw	r2, #538	; 0x21a
 800e78a:	4919      	ldr	r1, [pc, #100]	; (800e7f0 <udp_sendto+0xb4>)
 800e78c:	4816      	ldr	r0, [pc, #88]	; (800e7e8 <udp_sendto+0xac>)
 800e78e:	f002 fdf3 	bl	8011378 <iprintf>
 800e792:	f06f 030f 	mvn.w	r3, #15
 800e796:	e01e      	b.n	800e7d6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	7a1b      	ldrb	r3, [r3, #8]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d006      	beq.n	800e7ae <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	7a1b      	ldrb	r3, [r3, #8]
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f7f9 fc9d 	bl	80080e4 <netif_get_by_index>
 800e7aa:	6178      	str	r0, [r7, #20]
 800e7ac:	e003      	b.n	800e7b6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f001 fb92 	bl	800fed8 <ip4_route>
 800e7b4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d102      	bne.n	800e7c2 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800e7bc:	f06f 0303 	mvn.w	r3, #3
 800e7c0:	e009      	b.n	800e7d6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800e7c2:	887a      	ldrh	r2, [r7, #2]
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	9300      	str	r3, [sp, #0]
 800e7c8:	4613      	mov	r3, r2
 800e7ca:	687a      	ldr	r2, [r7, #4]
 800e7cc:	68b9      	ldr	r1, [r7, #8]
 800e7ce:	68f8      	ldr	r0, [r7, #12]
 800e7d0:	f000 f810 	bl	800e7f4 <udp_sendto_if>
 800e7d4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3718      	adds	r7, #24
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}
 800e7de:	bf00      	nop
 800e7e0:	08014824 	.word	0x08014824
 800e7e4:	08014948 	.word	0x08014948
 800e7e8:	08014878 	.word	0x08014878
 800e7ec:	08014960 	.word	0x08014960
 800e7f0:	0801497c 	.word	0x0801497c

0800e7f4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b088      	sub	sp, #32
 800e7f8:	af02      	add	r7, sp, #8
 800e7fa:	60f8      	str	r0, [r7, #12]
 800e7fc:	60b9      	str	r1, [r7, #8]
 800e7fe:	607a      	str	r2, [r7, #4]
 800e800:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d109      	bne.n	800e81c <udp_sendto_if+0x28>
 800e808:	4b2e      	ldr	r3, [pc, #184]	; (800e8c4 <udp_sendto_if+0xd0>)
 800e80a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e80e:	492e      	ldr	r1, [pc, #184]	; (800e8c8 <udp_sendto_if+0xd4>)
 800e810:	482e      	ldr	r0, [pc, #184]	; (800e8cc <udp_sendto_if+0xd8>)
 800e812:	f002 fdb1 	bl	8011378 <iprintf>
 800e816:	f06f 030f 	mvn.w	r3, #15
 800e81a:	e04f      	b.n	800e8bc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d109      	bne.n	800e836 <udp_sendto_if+0x42>
 800e822:	4b28      	ldr	r3, [pc, #160]	; (800e8c4 <udp_sendto_if+0xd0>)
 800e824:	f240 2281 	movw	r2, #641	; 0x281
 800e828:	4929      	ldr	r1, [pc, #164]	; (800e8d0 <udp_sendto_if+0xdc>)
 800e82a:	4828      	ldr	r0, [pc, #160]	; (800e8cc <udp_sendto_if+0xd8>)
 800e82c:	f002 fda4 	bl	8011378 <iprintf>
 800e830:	f06f 030f 	mvn.w	r3, #15
 800e834:	e042      	b.n	800e8bc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d109      	bne.n	800e850 <udp_sendto_if+0x5c>
 800e83c:	4b21      	ldr	r3, [pc, #132]	; (800e8c4 <udp_sendto_if+0xd0>)
 800e83e:	f240 2282 	movw	r2, #642	; 0x282
 800e842:	4924      	ldr	r1, [pc, #144]	; (800e8d4 <udp_sendto_if+0xe0>)
 800e844:	4821      	ldr	r0, [pc, #132]	; (800e8cc <udp_sendto_if+0xd8>)
 800e846:	f002 fd97 	bl	8011378 <iprintf>
 800e84a:	f06f 030f 	mvn.w	r3, #15
 800e84e:	e035      	b.n	800e8bc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800e850:	6a3b      	ldr	r3, [r7, #32]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d109      	bne.n	800e86a <udp_sendto_if+0x76>
 800e856:	4b1b      	ldr	r3, [pc, #108]	; (800e8c4 <udp_sendto_if+0xd0>)
 800e858:	f240 2283 	movw	r2, #643	; 0x283
 800e85c:	491e      	ldr	r1, [pc, #120]	; (800e8d8 <udp_sendto_if+0xe4>)
 800e85e:	481b      	ldr	r0, [pc, #108]	; (800e8cc <udp_sendto_if+0xd8>)
 800e860:	f002 fd8a 	bl	8011378 <iprintf>
 800e864:	f06f 030f 	mvn.w	r3, #15
 800e868:	e028      	b.n	800e8bc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d009      	beq.n	800e884 <udp_sendto_if+0x90>
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d005      	beq.n	800e884 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e880:	2be0      	cmp	r3, #224	; 0xe0
 800e882:	d103      	bne.n	800e88c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800e884:	6a3b      	ldr	r3, [r7, #32]
 800e886:	3304      	adds	r3, #4
 800e888:	617b      	str	r3, [r7, #20]
 800e88a:	e00b      	b.n	800e8a4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	681a      	ldr	r2, [r3, #0]
 800e890:	6a3b      	ldr	r3, [r7, #32]
 800e892:	3304      	adds	r3, #4
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	429a      	cmp	r2, r3
 800e898:	d002      	beq.n	800e8a0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800e89a:	f06f 0303 	mvn.w	r3, #3
 800e89e:	e00d      	b.n	800e8bc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800e8a4:	887a      	ldrh	r2, [r7, #2]
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	9301      	str	r3, [sp, #4]
 800e8aa:	6a3b      	ldr	r3, [r7, #32]
 800e8ac:	9300      	str	r3, [sp, #0]
 800e8ae:	4613      	mov	r3, r2
 800e8b0:	687a      	ldr	r2, [r7, #4]
 800e8b2:	68b9      	ldr	r1, [r7, #8]
 800e8b4:	68f8      	ldr	r0, [r7, #12]
 800e8b6:	f000 f811 	bl	800e8dc <udp_sendto_if_src>
 800e8ba:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	3718      	adds	r7, #24
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}
 800e8c4:	08014824 	.word	0x08014824
 800e8c8:	08014998 	.word	0x08014998
 800e8cc:	08014878 	.word	0x08014878
 800e8d0:	080149b4 	.word	0x080149b4
 800e8d4:	080149d0 	.word	0x080149d0
 800e8d8:	080149f0 	.word	0x080149f0

0800e8dc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b08c      	sub	sp, #48	; 0x30
 800e8e0:	af04      	add	r7, sp, #16
 800e8e2:	60f8      	str	r0, [r7, #12]
 800e8e4:	60b9      	str	r1, [r7, #8]
 800e8e6:	607a      	str	r2, [r7, #4]
 800e8e8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d109      	bne.n	800e904 <udp_sendto_if_src+0x28>
 800e8f0:	4b65      	ldr	r3, [pc, #404]	; (800ea88 <udp_sendto_if_src+0x1ac>)
 800e8f2:	f240 22d1 	movw	r2, #721	; 0x2d1
 800e8f6:	4965      	ldr	r1, [pc, #404]	; (800ea8c <udp_sendto_if_src+0x1b0>)
 800e8f8:	4865      	ldr	r0, [pc, #404]	; (800ea90 <udp_sendto_if_src+0x1b4>)
 800e8fa:	f002 fd3d 	bl	8011378 <iprintf>
 800e8fe:	f06f 030f 	mvn.w	r3, #15
 800e902:	e0bc      	b.n	800ea7e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d109      	bne.n	800e91e <udp_sendto_if_src+0x42>
 800e90a:	4b5f      	ldr	r3, [pc, #380]	; (800ea88 <udp_sendto_if_src+0x1ac>)
 800e90c:	f240 22d2 	movw	r2, #722	; 0x2d2
 800e910:	4960      	ldr	r1, [pc, #384]	; (800ea94 <udp_sendto_if_src+0x1b8>)
 800e912:	485f      	ldr	r0, [pc, #380]	; (800ea90 <udp_sendto_if_src+0x1b4>)
 800e914:	f002 fd30 	bl	8011378 <iprintf>
 800e918:	f06f 030f 	mvn.w	r3, #15
 800e91c:	e0af      	b.n	800ea7e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d109      	bne.n	800e938 <udp_sendto_if_src+0x5c>
 800e924:	4b58      	ldr	r3, [pc, #352]	; (800ea88 <udp_sendto_if_src+0x1ac>)
 800e926:	f240 22d3 	movw	r2, #723	; 0x2d3
 800e92a:	495b      	ldr	r1, [pc, #364]	; (800ea98 <udp_sendto_if_src+0x1bc>)
 800e92c:	4858      	ldr	r0, [pc, #352]	; (800ea90 <udp_sendto_if_src+0x1b4>)
 800e92e:	f002 fd23 	bl	8011378 <iprintf>
 800e932:	f06f 030f 	mvn.w	r3, #15
 800e936:	e0a2      	b.n	800ea7e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800e938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d109      	bne.n	800e952 <udp_sendto_if_src+0x76>
 800e93e:	4b52      	ldr	r3, [pc, #328]	; (800ea88 <udp_sendto_if_src+0x1ac>)
 800e940:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800e944:	4955      	ldr	r1, [pc, #340]	; (800ea9c <udp_sendto_if_src+0x1c0>)
 800e946:	4852      	ldr	r0, [pc, #328]	; (800ea90 <udp_sendto_if_src+0x1b4>)
 800e948:	f002 fd16 	bl	8011378 <iprintf>
 800e94c:	f06f 030f 	mvn.w	r3, #15
 800e950:	e095      	b.n	800ea7e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800e952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e954:	2b00      	cmp	r3, #0
 800e956:	d109      	bne.n	800e96c <udp_sendto_if_src+0x90>
 800e958:	4b4b      	ldr	r3, [pc, #300]	; (800ea88 <udp_sendto_if_src+0x1ac>)
 800e95a:	f240 22d5 	movw	r2, #725	; 0x2d5
 800e95e:	4950      	ldr	r1, [pc, #320]	; (800eaa0 <udp_sendto_if_src+0x1c4>)
 800e960:	484b      	ldr	r0, [pc, #300]	; (800ea90 <udp_sendto_if_src+0x1b4>)
 800e962:	f002 fd09 	bl	8011378 <iprintf>
 800e966:	f06f 030f 	mvn.w	r3, #15
 800e96a:	e088      	b.n	800ea7e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	8a5b      	ldrh	r3, [r3, #18]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d10f      	bne.n	800e994 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e974:	68f9      	ldr	r1, [r7, #12]
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	8a5b      	ldrh	r3, [r3, #18]
 800e97a:	461a      	mov	r2, r3
 800e97c:	68f8      	ldr	r0, [r7, #12]
 800e97e:	f000 f893 	bl	800eaa8 <udp_bind>
 800e982:	4603      	mov	r3, r0
 800e984:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800e986:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d002      	beq.n	800e994 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800e98e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e992:	e074      	b.n	800ea7e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	891b      	ldrh	r3, [r3, #8]
 800e998:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800e99c:	4293      	cmp	r3, r2
 800e99e:	d902      	bls.n	800e9a6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800e9a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e9a4:	e06b      	b.n	800ea7e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800e9a6:	2108      	movs	r1, #8
 800e9a8:	68b8      	ldr	r0, [r7, #8]
 800e9aa:	f7f9 fe65 	bl	8008678 <pbuf_add_header>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d015      	beq.n	800e9e0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800e9b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e9b8:	2108      	movs	r1, #8
 800e9ba:	2022      	movs	r0, #34	; 0x22
 800e9bc:	f7f9 fc0e 	bl	80081dc <pbuf_alloc>
 800e9c0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800e9c2:	69fb      	ldr	r3, [r7, #28]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d102      	bne.n	800e9ce <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800e9c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e9cc:	e057      	b.n	800ea7e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	891b      	ldrh	r3, [r3, #8]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d006      	beq.n	800e9e4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800e9d6:	68b9      	ldr	r1, [r7, #8]
 800e9d8:	69f8      	ldr	r0, [r7, #28]
 800e9da:	f7f9 fffb 	bl	80089d4 <pbuf_chain>
 800e9de:	e001      	b.n	800e9e4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800e9e4:	69fb      	ldr	r3, [r7, #28]
 800e9e6:	895b      	ldrh	r3, [r3, #10]
 800e9e8:	2b07      	cmp	r3, #7
 800e9ea:	d806      	bhi.n	800e9fa <udp_sendto_if_src+0x11e>
 800e9ec:	4b26      	ldr	r3, [pc, #152]	; (800ea88 <udp_sendto_if_src+0x1ac>)
 800e9ee:	f240 320d 	movw	r2, #781	; 0x30d
 800e9f2:	492c      	ldr	r1, [pc, #176]	; (800eaa4 <udp_sendto_if_src+0x1c8>)
 800e9f4:	4826      	ldr	r0, [pc, #152]	; (800ea90 <udp_sendto_if_src+0x1b4>)
 800e9f6:	f002 fcbf 	bl	8011378 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800e9fa:	69fb      	ldr	r3, [r7, #28]
 800e9fc:	685b      	ldr	r3, [r3, #4]
 800e9fe:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	8a5b      	ldrh	r3, [r3, #18]
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7f8 fb6f 	bl	80070e8 <lwip_htons>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	461a      	mov	r2, r3
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800ea12:	887b      	ldrh	r3, [r7, #2]
 800ea14:	4618      	mov	r0, r3
 800ea16:	f7f8 fb67 	bl	80070e8 <lwip_htons>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	461a      	mov	r2, r3
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	2200      	movs	r2, #0
 800ea26:	719a      	strb	r2, [r3, #6]
 800ea28:	2200      	movs	r2, #0
 800ea2a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800ea2c:	69fb      	ldr	r3, [r7, #28]
 800ea2e:	891b      	ldrh	r3, [r3, #8]
 800ea30:	4618      	mov	r0, r3
 800ea32:	f7f8 fb59 	bl	80070e8 <lwip_htons>
 800ea36:	4603      	mov	r3, r0
 800ea38:	461a      	mov	r2, r3
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800ea3e:	2311      	movs	r3, #17
 800ea40:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	7adb      	ldrb	r3, [r3, #11]
 800ea46:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	7a9b      	ldrb	r3, [r3, #10]
 800ea4c:	7cb9      	ldrb	r1, [r7, #18]
 800ea4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea50:	9202      	str	r2, [sp, #8]
 800ea52:	7cfa      	ldrb	r2, [r7, #19]
 800ea54:	9201      	str	r2, [sp, #4]
 800ea56:	9300      	str	r3, [sp, #0]
 800ea58:	460b      	mov	r3, r1
 800ea5a:	687a      	ldr	r2, [r7, #4]
 800ea5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea5e:	69f8      	ldr	r0, [r7, #28]
 800ea60:	f001 fc22 	bl	80102a8 <ip4_output_if_src>
 800ea64:	4603      	mov	r3, r0
 800ea66:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800ea68:	69fa      	ldr	r2, [r7, #28]
 800ea6a:	68bb      	ldr	r3, [r7, #8]
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d004      	beq.n	800ea7a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800ea70:	69f8      	ldr	r0, [r7, #28]
 800ea72:	f7f9 fe97 	bl	80087a4 <pbuf_free>
    q = NULL;
 800ea76:	2300      	movs	r3, #0
 800ea78:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800ea7a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	3720      	adds	r7, #32
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bd80      	pop	{r7, pc}
 800ea86:	bf00      	nop
 800ea88:	08014824 	.word	0x08014824
 800ea8c:	08014a10 	.word	0x08014a10
 800ea90:	08014878 	.word	0x08014878
 800ea94:	08014a30 	.word	0x08014a30
 800ea98:	08014a50 	.word	0x08014a50
 800ea9c:	08014a74 	.word	0x08014a74
 800eaa0:	08014a98 	.word	0x08014a98
 800eaa4:	08014abc 	.word	0x08014abc

0800eaa8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b086      	sub	sp, #24
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	60f8      	str	r0, [r7, #12]
 800eab0:	60b9      	str	r1, [r7, #8]
 800eab2:	4613      	mov	r3, r2
 800eab4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d101      	bne.n	800eac0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800eabc:	4b39      	ldr	r3, [pc, #228]	; (800eba4 <udp_bind+0xfc>)
 800eabe:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d109      	bne.n	800eada <udp_bind+0x32>
 800eac6:	4b38      	ldr	r3, [pc, #224]	; (800eba8 <udp_bind+0x100>)
 800eac8:	f240 32b7 	movw	r2, #951	; 0x3b7
 800eacc:	4937      	ldr	r1, [pc, #220]	; (800ebac <udp_bind+0x104>)
 800eace:	4838      	ldr	r0, [pc, #224]	; (800ebb0 <udp_bind+0x108>)
 800ead0:	f002 fc52 	bl	8011378 <iprintf>
 800ead4:	f06f 030f 	mvn.w	r3, #15
 800ead8:	e060      	b.n	800eb9c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800eada:	2300      	movs	r3, #0
 800eadc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800eade:	4b35      	ldr	r3, [pc, #212]	; (800ebb4 <udp_bind+0x10c>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	617b      	str	r3, [r7, #20]
 800eae4:	e009      	b.n	800eafa <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800eae6:	68fa      	ldr	r2, [r7, #12]
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	429a      	cmp	r2, r3
 800eaec:	d102      	bne.n	800eaf4 <udp_bind+0x4c>
      rebind = 1;
 800eaee:	2301      	movs	r3, #1
 800eaf0:	74fb      	strb	r3, [r7, #19]
      break;
 800eaf2:	e005      	b.n	800eb00 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	68db      	ldr	r3, [r3, #12]
 800eaf8:	617b      	str	r3, [r7, #20]
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d1f2      	bne.n	800eae6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800eb00:	88fb      	ldrh	r3, [r7, #6]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d109      	bne.n	800eb1a <udp_bind+0x72>
    port = udp_new_port();
 800eb06:	f7ff fc35 	bl	800e374 <udp_new_port>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800eb0e:	88fb      	ldrh	r3, [r7, #6]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d12c      	bne.n	800eb6e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800eb14:	f06f 0307 	mvn.w	r3, #7
 800eb18:	e040      	b.n	800eb9c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800eb1a:	4b26      	ldr	r3, [pc, #152]	; (800ebb4 <udp_bind+0x10c>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	617b      	str	r3, [r7, #20]
 800eb20:	e022      	b.n	800eb68 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800eb22:	68fa      	ldr	r2, [r7, #12]
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	429a      	cmp	r2, r3
 800eb28:	d01b      	beq.n	800eb62 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800eb2a:	697b      	ldr	r3, [r7, #20]
 800eb2c:	8a5b      	ldrh	r3, [r3, #18]
 800eb2e:	88fa      	ldrh	r2, [r7, #6]
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d116      	bne.n	800eb62 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	681a      	ldr	r2, [r3, #0]
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800eb3c:	429a      	cmp	r2, r3
 800eb3e:	d00d      	beq.n	800eb5c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d00a      	beq.n	800eb5c <udp_bind+0xb4>
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d006      	beq.n	800eb5c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800eb4e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d003      	beq.n	800eb5c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d102      	bne.n	800eb62 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800eb5c:	f06f 0307 	mvn.w	r3, #7
 800eb60:	e01c      	b.n	800eb9c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	68db      	ldr	r3, [r3, #12]
 800eb66:	617b      	str	r3, [r7, #20]
 800eb68:	697b      	ldr	r3, [r7, #20]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d1d9      	bne.n	800eb22 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800eb6e:	68bb      	ldr	r3, [r7, #8]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d002      	beq.n	800eb7a <udp_bind+0xd2>
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	e000      	b.n	800eb7c <udp_bind+0xd4>
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	68fa      	ldr	r2, [r7, #12]
 800eb7e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	88fa      	ldrh	r2, [r7, #6]
 800eb84:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800eb86:	7cfb      	ldrb	r3, [r7, #19]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d106      	bne.n	800eb9a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800eb8c:	4b09      	ldr	r3, [pc, #36]	; (800ebb4 <udp_bind+0x10c>)
 800eb8e:	681a      	ldr	r2, [r3, #0]
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800eb94:	4a07      	ldr	r2, [pc, #28]	; (800ebb4 <udp_bind+0x10c>)
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800eb9a:	2300      	movs	r3, #0
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3718      	adds	r7, #24
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}
 800eba4:	08015340 	.word	0x08015340
 800eba8:	08014824 	.word	0x08014824
 800ebac:	08014aec 	.word	0x08014aec
 800ebb0:	08014878 	.word	0x08014878
 800ebb4:	2000bc88 	.word	0x2000bc88

0800ebb8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b086      	sub	sp, #24
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	60f8      	str	r0, [r7, #12]
 800ebc0:	60b9      	str	r1, [r7, #8]
 800ebc2:	4613      	mov	r3, r2
 800ebc4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d109      	bne.n	800ebe0 <udp_connect+0x28>
 800ebcc:	4b2c      	ldr	r3, [pc, #176]	; (800ec80 <udp_connect+0xc8>)
 800ebce:	f240 4235 	movw	r2, #1077	; 0x435
 800ebd2:	492c      	ldr	r1, [pc, #176]	; (800ec84 <udp_connect+0xcc>)
 800ebd4:	482c      	ldr	r0, [pc, #176]	; (800ec88 <udp_connect+0xd0>)
 800ebd6:	f002 fbcf 	bl	8011378 <iprintf>
 800ebda:	f06f 030f 	mvn.w	r3, #15
 800ebde:	e04b      	b.n	800ec78 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d109      	bne.n	800ebfa <udp_connect+0x42>
 800ebe6:	4b26      	ldr	r3, [pc, #152]	; (800ec80 <udp_connect+0xc8>)
 800ebe8:	f240 4236 	movw	r2, #1078	; 0x436
 800ebec:	4927      	ldr	r1, [pc, #156]	; (800ec8c <udp_connect+0xd4>)
 800ebee:	4826      	ldr	r0, [pc, #152]	; (800ec88 <udp_connect+0xd0>)
 800ebf0:	f002 fbc2 	bl	8011378 <iprintf>
 800ebf4:	f06f 030f 	mvn.w	r3, #15
 800ebf8:	e03e      	b.n	800ec78 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	8a5b      	ldrh	r3, [r3, #18]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d10f      	bne.n	800ec22 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ec02:	68f9      	ldr	r1, [r7, #12]
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	8a5b      	ldrh	r3, [r3, #18]
 800ec08:	461a      	mov	r2, r3
 800ec0a:	68f8      	ldr	r0, [r7, #12]
 800ec0c:	f7ff ff4c 	bl	800eaa8 <udp_bind>
 800ec10:	4603      	mov	r3, r0
 800ec12:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800ec14:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d002      	beq.n	800ec22 <udp_connect+0x6a>
      return err;
 800ec1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec20:	e02a      	b.n	800ec78 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d002      	beq.n	800ec2e <udp_connect+0x76>
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	e000      	b.n	800ec30 <udp_connect+0x78>
 800ec2e:	2300      	movs	r3, #0
 800ec30:	68fa      	ldr	r2, [r7, #12]
 800ec32:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	88fa      	ldrh	r2, [r7, #6]
 800ec38:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	7c1b      	ldrb	r3, [r3, #16]
 800ec3e:	f043 0304 	orr.w	r3, r3, #4
 800ec42:	b2da      	uxtb	r2, r3
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ec48:	4b11      	ldr	r3, [pc, #68]	; (800ec90 <udp_connect+0xd8>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	617b      	str	r3, [r7, #20]
 800ec4e:	e008      	b.n	800ec62 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800ec50:	68fa      	ldr	r2, [r7, #12]
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d101      	bne.n	800ec5c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	e00d      	b.n	800ec78 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	68db      	ldr	r3, [r3, #12]
 800ec60:	617b      	str	r3, [r7, #20]
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d1f3      	bne.n	800ec50 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800ec68:	4b09      	ldr	r3, [pc, #36]	; (800ec90 <udp_connect+0xd8>)
 800ec6a:	681a      	ldr	r2, [r3, #0]
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800ec70:	4a07      	ldr	r2, [pc, #28]	; (800ec90 <udp_connect+0xd8>)
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800ec76:	2300      	movs	r3, #0
}
 800ec78:	4618      	mov	r0, r3
 800ec7a:	3718      	adds	r7, #24
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}
 800ec80:	08014824 	.word	0x08014824
 800ec84:	08014b04 	.word	0x08014b04
 800ec88:	08014878 	.word	0x08014878
 800ec8c:	08014b20 	.word	0x08014b20
 800ec90:	2000bc88 	.word	0x2000bc88

0800ec94 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b082      	sub	sp, #8
 800ec98:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800ec9a:	2000      	movs	r0, #0
 800ec9c:	f7f8 fe9c 	bl	80079d8 <memp_malloc>
 800eca0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d007      	beq.n	800ecb8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800eca8:	2220      	movs	r2, #32
 800ecaa:	2100      	movs	r1, #0
 800ecac:	6878      	ldr	r0, [r7, #4]
 800ecae:	f002 fb5b 	bl	8011368 <memset>
    pcb->ttl = UDP_TTL;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	22ff      	movs	r2, #255	; 0xff
 800ecb6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800ecb8:	687b      	ldr	r3, [r7, #4]
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3708      	adds	r7, #8
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
	...

0800ecc4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b085      	sub	sp, #20
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d01e      	beq.n	800ed12 <udp_netif_ip_addr_changed+0x4e>
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d01a      	beq.n	800ed12 <udp_netif_ip_addr_changed+0x4e>
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d017      	beq.n	800ed12 <udp_netif_ip_addr_changed+0x4e>
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d013      	beq.n	800ed12 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ecea:	4b0d      	ldr	r3, [pc, #52]	; (800ed20 <udp_netif_ip_addr_changed+0x5c>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	60fb      	str	r3, [r7, #12]
 800ecf0:	e00c      	b.n	800ed0c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	681a      	ldr	r2, [r3, #0]
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	d103      	bne.n	800ed06 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	681a      	ldr	r2, [r3, #0]
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	68db      	ldr	r3, [r3, #12]
 800ed0a:	60fb      	str	r3, [r7, #12]
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d1ef      	bne.n	800ecf2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ed12:	bf00      	nop
 800ed14:	3714      	adds	r7, #20
 800ed16:	46bd      	mov	sp, r7
 800ed18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1c:	4770      	bx	lr
 800ed1e:	bf00      	nop
 800ed20:	2000bc88 	.word	0x2000bc88

0800ed24 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b082      	sub	sp, #8
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ed2c:	4915      	ldr	r1, [pc, #84]	; (800ed84 <etharp_free_entry+0x60>)
 800ed2e:	687a      	ldr	r2, [r7, #4]
 800ed30:	4613      	mov	r3, r2
 800ed32:	005b      	lsls	r3, r3, #1
 800ed34:	4413      	add	r3, r2
 800ed36:	00db      	lsls	r3, r3, #3
 800ed38:	440b      	add	r3, r1
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d013      	beq.n	800ed68 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ed40:	4910      	ldr	r1, [pc, #64]	; (800ed84 <etharp_free_entry+0x60>)
 800ed42:	687a      	ldr	r2, [r7, #4]
 800ed44:	4613      	mov	r3, r2
 800ed46:	005b      	lsls	r3, r3, #1
 800ed48:	4413      	add	r3, r2
 800ed4a:	00db      	lsls	r3, r3, #3
 800ed4c:	440b      	add	r3, r1
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	4618      	mov	r0, r3
 800ed52:	f7f9 fd27 	bl	80087a4 <pbuf_free>
    arp_table[i].q = NULL;
 800ed56:	490b      	ldr	r1, [pc, #44]	; (800ed84 <etharp_free_entry+0x60>)
 800ed58:	687a      	ldr	r2, [r7, #4]
 800ed5a:	4613      	mov	r3, r2
 800ed5c:	005b      	lsls	r3, r3, #1
 800ed5e:	4413      	add	r3, r2
 800ed60:	00db      	lsls	r3, r3, #3
 800ed62:	440b      	add	r3, r1
 800ed64:	2200      	movs	r2, #0
 800ed66:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ed68:	4906      	ldr	r1, [pc, #24]	; (800ed84 <etharp_free_entry+0x60>)
 800ed6a:	687a      	ldr	r2, [r7, #4]
 800ed6c:	4613      	mov	r3, r2
 800ed6e:	005b      	lsls	r3, r3, #1
 800ed70:	4413      	add	r3, r2
 800ed72:	00db      	lsls	r3, r3, #3
 800ed74:	440b      	add	r3, r1
 800ed76:	3314      	adds	r3, #20
 800ed78:	2200      	movs	r2, #0
 800ed7a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ed7c:	bf00      	nop
 800ed7e:	3708      	adds	r7, #8
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}
 800ed84:	2000bc8c 	.word	0x2000bc8c

0800ed88 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b082      	sub	sp, #8
 800ed8c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ed8e:	2300      	movs	r3, #0
 800ed90:	607b      	str	r3, [r7, #4]
 800ed92:	e096      	b.n	800eec2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ed94:	494f      	ldr	r1, [pc, #316]	; (800eed4 <etharp_tmr+0x14c>)
 800ed96:	687a      	ldr	r2, [r7, #4]
 800ed98:	4613      	mov	r3, r2
 800ed9a:	005b      	lsls	r3, r3, #1
 800ed9c:	4413      	add	r3, r2
 800ed9e:	00db      	lsls	r3, r3, #3
 800eda0:	440b      	add	r3, r1
 800eda2:	3314      	adds	r3, #20
 800eda4:	781b      	ldrb	r3, [r3, #0]
 800eda6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800eda8:	78fb      	ldrb	r3, [r7, #3]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	f000 8086 	beq.w	800eebc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800edb0:	4948      	ldr	r1, [pc, #288]	; (800eed4 <etharp_tmr+0x14c>)
 800edb2:	687a      	ldr	r2, [r7, #4]
 800edb4:	4613      	mov	r3, r2
 800edb6:	005b      	lsls	r3, r3, #1
 800edb8:	4413      	add	r3, r2
 800edba:	00db      	lsls	r3, r3, #3
 800edbc:	440b      	add	r3, r1
 800edbe:	3312      	adds	r3, #18
 800edc0:	881b      	ldrh	r3, [r3, #0]
 800edc2:	3301      	adds	r3, #1
 800edc4:	b298      	uxth	r0, r3
 800edc6:	4943      	ldr	r1, [pc, #268]	; (800eed4 <etharp_tmr+0x14c>)
 800edc8:	687a      	ldr	r2, [r7, #4]
 800edca:	4613      	mov	r3, r2
 800edcc:	005b      	lsls	r3, r3, #1
 800edce:	4413      	add	r3, r2
 800edd0:	00db      	lsls	r3, r3, #3
 800edd2:	440b      	add	r3, r1
 800edd4:	3312      	adds	r3, #18
 800edd6:	4602      	mov	r2, r0
 800edd8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800edda:	493e      	ldr	r1, [pc, #248]	; (800eed4 <etharp_tmr+0x14c>)
 800eddc:	687a      	ldr	r2, [r7, #4]
 800edde:	4613      	mov	r3, r2
 800ede0:	005b      	lsls	r3, r3, #1
 800ede2:	4413      	add	r3, r2
 800ede4:	00db      	lsls	r3, r3, #3
 800ede6:	440b      	add	r3, r1
 800ede8:	3312      	adds	r3, #18
 800edea:	881b      	ldrh	r3, [r3, #0]
 800edec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800edf0:	d215      	bcs.n	800ee1e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800edf2:	4938      	ldr	r1, [pc, #224]	; (800eed4 <etharp_tmr+0x14c>)
 800edf4:	687a      	ldr	r2, [r7, #4]
 800edf6:	4613      	mov	r3, r2
 800edf8:	005b      	lsls	r3, r3, #1
 800edfa:	4413      	add	r3, r2
 800edfc:	00db      	lsls	r3, r3, #3
 800edfe:	440b      	add	r3, r1
 800ee00:	3314      	adds	r3, #20
 800ee02:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ee04:	2b01      	cmp	r3, #1
 800ee06:	d10e      	bne.n	800ee26 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ee08:	4932      	ldr	r1, [pc, #200]	; (800eed4 <etharp_tmr+0x14c>)
 800ee0a:	687a      	ldr	r2, [r7, #4]
 800ee0c:	4613      	mov	r3, r2
 800ee0e:	005b      	lsls	r3, r3, #1
 800ee10:	4413      	add	r3, r2
 800ee12:	00db      	lsls	r3, r3, #3
 800ee14:	440b      	add	r3, r1
 800ee16:	3312      	adds	r3, #18
 800ee18:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ee1a:	2b04      	cmp	r3, #4
 800ee1c:	d903      	bls.n	800ee26 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ee1e:	6878      	ldr	r0, [r7, #4]
 800ee20:	f7ff ff80 	bl	800ed24 <etharp_free_entry>
 800ee24:	e04a      	b.n	800eebc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ee26:	492b      	ldr	r1, [pc, #172]	; (800eed4 <etharp_tmr+0x14c>)
 800ee28:	687a      	ldr	r2, [r7, #4]
 800ee2a:	4613      	mov	r3, r2
 800ee2c:	005b      	lsls	r3, r3, #1
 800ee2e:	4413      	add	r3, r2
 800ee30:	00db      	lsls	r3, r3, #3
 800ee32:	440b      	add	r3, r1
 800ee34:	3314      	adds	r3, #20
 800ee36:	781b      	ldrb	r3, [r3, #0]
 800ee38:	2b03      	cmp	r3, #3
 800ee3a:	d10a      	bne.n	800ee52 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ee3c:	4925      	ldr	r1, [pc, #148]	; (800eed4 <etharp_tmr+0x14c>)
 800ee3e:	687a      	ldr	r2, [r7, #4]
 800ee40:	4613      	mov	r3, r2
 800ee42:	005b      	lsls	r3, r3, #1
 800ee44:	4413      	add	r3, r2
 800ee46:	00db      	lsls	r3, r3, #3
 800ee48:	440b      	add	r3, r1
 800ee4a:	3314      	adds	r3, #20
 800ee4c:	2204      	movs	r2, #4
 800ee4e:	701a      	strb	r2, [r3, #0]
 800ee50:	e034      	b.n	800eebc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ee52:	4920      	ldr	r1, [pc, #128]	; (800eed4 <etharp_tmr+0x14c>)
 800ee54:	687a      	ldr	r2, [r7, #4]
 800ee56:	4613      	mov	r3, r2
 800ee58:	005b      	lsls	r3, r3, #1
 800ee5a:	4413      	add	r3, r2
 800ee5c:	00db      	lsls	r3, r3, #3
 800ee5e:	440b      	add	r3, r1
 800ee60:	3314      	adds	r3, #20
 800ee62:	781b      	ldrb	r3, [r3, #0]
 800ee64:	2b04      	cmp	r3, #4
 800ee66:	d10a      	bne.n	800ee7e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ee68:	491a      	ldr	r1, [pc, #104]	; (800eed4 <etharp_tmr+0x14c>)
 800ee6a:	687a      	ldr	r2, [r7, #4]
 800ee6c:	4613      	mov	r3, r2
 800ee6e:	005b      	lsls	r3, r3, #1
 800ee70:	4413      	add	r3, r2
 800ee72:	00db      	lsls	r3, r3, #3
 800ee74:	440b      	add	r3, r1
 800ee76:	3314      	adds	r3, #20
 800ee78:	2202      	movs	r2, #2
 800ee7a:	701a      	strb	r2, [r3, #0]
 800ee7c:	e01e      	b.n	800eebc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ee7e:	4915      	ldr	r1, [pc, #84]	; (800eed4 <etharp_tmr+0x14c>)
 800ee80:	687a      	ldr	r2, [r7, #4]
 800ee82:	4613      	mov	r3, r2
 800ee84:	005b      	lsls	r3, r3, #1
 800ee86:	4413      	add	r3, r2
 800ee88:	00db      	lsls	r3, r3, #3
 800ee8a:	440b      	add	r3, r1
 800ee8c:	3314      	adds	r3, #20
 800ee8e:	781b      	ldrb	r3, [r3, #0]
 800ee90:	2b01      	cmp	r3, #1
 800ee92:	d113      	bne.n	800eebc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ee94:	490f      	ldr	r1, [pc, #60]	; (800eed4 <etharp_tmr+0x14c>)
 800ee96:	687a      	ldr	r2, [r7, #4]
 800ee98:	4613      	mov	r3, r2
 800ee9a:	005b      	lsls	r3, r3, #1
 800ee9c:	4413      	add	r3, r2
 800ee9e:	00db      	lsls	r3, r3, #3
 800eea0:	440b      	add	r3, r1
 800eea2:	3308      	adds	r3, #8
 800eea4:	6818      	ldr	r0, [r3, #0]
 800eea6:	687a      	ldr	r2, [r7, #4]
 800eea8:	4613      	mov	r3, r2
 800eeaa:	005b      	lsls	r3, r3, #1
 800eeac:	4413      	add	r3, r2
 800eeae:	00db      	lsls	r3, r3, #3
 800eeb0:	4a08      	ldr	r2, [pc, #32]	; (800eed4 <etharp_tmr+0x14c>)
 800eeb2:	4413      	add	r3, r2
 800eeb4:	3304      	adds	r3, #4
 800eeb6:	4619      	mov	r1, r3
 800eeb8:	f000 fe6e 	bl	800fb98 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	3301      	adds	r3, #1
 800eec0:	607b      	str	r3, [r7, #4]
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2b09      	cmp	r3, #9
 800eec6:	f77f af65 	ble.w	800ed94 <etharp_tmr+0xc>
      }
    }
  }
}
 800eeca:	bf00      	nop
 800eecc:	bf00      	nop
 800eece:	3708      	adds	r7, #8
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}
 800eed4:	2000bc8c 	.word	0x2000bc8c

0800eed8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b08a      	sub	sp, #40	; 0x28
 800eedc:	af00      	add	r7, sp, #0
 800eede:	60f8      	str	r0, [r7, #12]
 800eee0:	460b      	mov	r3, r1
 800eee2:	607a      	str	r2, [r7, #4]
 800eee4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800eee6:	230a      	movs	r3, #10
 800eee8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800eeea:	230a      	movs	r3, #10
 800eeec:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800eeee:	230a      	movs	r3, #10
 800eef0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800eef2:	2300      	movs	r3, #0
 800eef4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800eef6:	230a      	movs	r3, #10
 800eef8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800eefa:	2300      	movs	r3, #0
 800eefc:	83bb      	strh	r3, [r7, #28]
 800eefe:	2300      	movs	r3, #0
 800ef00:	837b      	strh	r3, [r7, #26]
 800ef02:	2300      	movs	r3, #0
 800ef04:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ef06:	2300      	movs	r3, #0
 800ef08:	843b      	strh	r3, [r7, #32]
 800ef0a:	e0ae      	b.n	800f06a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ef0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef10:	49a6      	ldr	r1, [pc, #664]	; (800f1ac <etharp_find_entry+0x2d4>)
 800ef12:	4613      	mov	r3, r2
 800ef14:	005b      	lsls	r3, r3, #1
 800ef16:	4413      	add	r3, r2
 800ef18:	00db      	lsls	r3, r3, #3
 800ef1a:	440b      	add	r3, r1
 800ef1c:	3314      	adds	r3, #20
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ef22:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ef26:	2b0a      	cmp	r3, #10
 800ef28:	d105      	bne.n	800ef36 <etharp_find_entry+0x5e>
 800ef2a:	7dfb      	ldrb	r3, [r7, #23]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d102      	bne.n	800ef36 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ef30:	8c3b      	ldrh	r3, [r7, #32]
 800ef32:	847b      	strh	r3, [r7, #34]	; 0x22
 800ef34:	e095      	b.n	800f062 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ef36:	7dfb      	ldrb	r3, [r7, #23]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	f000 8092 	beq.w	800f062 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ef3e:	7dfb      	ldrb	r3, [r7, #23]
 800ef40:	2b01      	cmp	r3, #1
 800ef42:	d009      	beq.n	800ef58 <etharp_find_entry+0x80>
 800ef44:	7dfb      	ldrb	r3, [r7, #23]
 800ef46:	2b01      	cmp	r3, #1
 800ef48:	d806      	bhi.n	800ef58 <etharp_find_entry+0x80>
 800ef4a:	4b99      	ldr	r3, [pc, #612]	; (800f1b0 <etharp_find_entry+0x2d8>)
 800ef4c:	f240 1223 	movw	r2, #291	; 0x123
 800ef50:	4998      	ldr	r1, [pc, #608]	; (800f1b4 <etharp_find_entry+0x2dc>)
 800ef52:	4899      	ldr	r0, [pc, #612]	; (800f1b8 <etharp_find_entry+0x2e0>)
 800ef54:	f002 fa10 	bl	8011378 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d020      	beq.n	800efa0 <etharp_find_entry+0xc8>
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	6819      	ldr	r1, [r3, #0]
 800ef62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef66:	4891      	ldr	r0, [pc, #580]	; (800f1ac <etharp_find_entry+0x2d4>)
 800ef68:	4613      	mov	r3, r2
 800ef6a:	005b      	lsls	r3, r3, #1
 800ef6c:	4413      	add	r3, r2
 800ef6e:	00db      	lsls	r3, r3, #3
 800ef70:	4403      	add	r3, r0
 800ef72:	3304      	adds	r3, #4
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	4299      	cmp	r1, r3
 800ef78:	d112      	bne.n	800efa0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d00c      	beq.n	800ef9a <etharp_find_entry+0xc2>
 800ef80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef84:	4989      	ldr	r1, [pc, #548]	; (800f1ac <etharp_find_entry+0x2d4>)
 800ef86:	4613      	mov	r3, r2
 800ef88:	005b      	lsls	r3, r3, #1
 800ef8a:	4413      	add	r3, r2
 800ef8c:	00db      	lsls	r3, r3, #3
 800ef8e:	440b      	add	r3, r1
 800ef90:	3308      	adds	r3, #8
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	687a      	ldr	r2, [r7, #4]
 800ef96:	429a      	cmp	r2, r3
 800ef98:	d102      	bne.n	800efa0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800ef9a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ef9e:	e100      	b.n	800f1a2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800efa0:	7dfb      	ldrb	r3, [r7, #23]
 800efa2:	2b01      	cmp	r3, #1
 800efa4:	d140      	bne.n	800f028 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800efa6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800efaa:	4980      	ldr	r1, [pc, #512]	; (800f1ac <etharp_find_entry+0x2d4>)
 800efac:	4613      	mov	r3, r2
 800efae:	005b      	lsls	r3, r3, #1
 800efb0:	4413      	add	r3, r2
 800efb2:	00db      	lsls	r3, r3, #3
 800efb4:	440b      	add	r3, r1
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d01a      	beq.n	800eff2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800efbc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800efc0:	497a      	ldr	r1, [pc, #488]	; (800f1ac <etharp_find_entry+0x2d4>)
 800efc2:	4613      	mov	r3, r2
 800efc4:	005b      	lsls	r3, r3, #1
 800efc6:	4413      	add	r3, r2
 800efc8:	00db      	lsls	r3, r3, #3
 800efca:	440b      	add	r3, r1
 800efcc:	3312      	adds	r3, #18
 800efce:	881b      	ldrh	r3, [r3, #0]
 800efd0:	8bba      	ldrh	r2, [r7, #28]
 800efd2:	429a      	cmp	r2, r3
 800efd4:	d845      	bhi.n	800f062 <etharp_find_entry+0x18a>
            old_queue = i;
 800efd6:	8c3b      	ldrh	r3, [r7, #32]
 800efd8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800efda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800efde:	4973      	ldr	r1, [pc, #460]	; (800f1ac <etharp_find_entry+0x2d4>)
 800efe0:	4613      	mov	r3, r2
 800efe2:	005b      	lsls	r3, r3, #1
 800efe4:	4413      	add	r3, r2
 800efe6:	00db      	lsls	r3, r3, #3
 800efe8:	440b      	add	r3, r1
 800efea:	3312      	adds	r3, #18
 800efec:	881b      	ldrh	r3, [r3, #0]
 800efee:	83bb      	strh	r3, [r7, #28]
 800eff0:	e037      	b.n	800f062 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800eff2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eff6:	496d      	ldr	r1, [pc, #436]	; (800f1ac <etharp_find_entry+0x2d4>)
 800eff8:	4613      	mov	r3, r2
 800effa:	005b      	lsls	r3, r3, #1
 800effc:	4413      	add	r3, r2
 800effe:	00db      	lsls	r3, r3, #3
 800f000:	440b      	add	r3, r1
 800f002:	3312      	adds	r3, #18
 800f004:	881b      	ldrh	r3, [r3, #0]
 800f006:	8b7a      	ldrh	r2, [r7, #26]
 800f008:	429a      	cmp	r2, r3
 800f00a:	d82a      	bhi.n	800f062 <etharp_find_entry+0x18a>
            old_pending = i;
 800f00c:	8c3b      	ldrh	r3, [r7, #32]
 800f00e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800f010:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f014:	4965      	ldr	r1, [pc, #404]	; (800f1ac <etharp_find_entry+0x2d4>)
 800f016:	4613      	mov	r3, r2
 800f018:	005b      	lsls	r3, r3, #1
 800f01a:	4413      	add	r3, r2
 800f01c:	00db      	lsls	r3, r3, #3
 800f01e:	440b      	add	r3, r1
 800f020:	3312      	adds	r3, #18
 800f022:	881b      	ldrh	r3, [r3, #0]
 800f024:	837b      	strh	r3, [r7, #26]
 800f026:	e01c      	b.n	800f062 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f028:	7dfb      	ldrb	r3, [r7, #23]
 800f02a:	2b01      	cmp	r3, #1
 800f02c:	d919      	bls.n	800f062 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f02e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f032:	495e      	ldr	r1, [pc, #376]	; (800f1ac <etharp_find_entry+0x2d4>)
 800f034:	4613      	mov	r3, r2
 800f036:	005b      	lsls	r3, r3, #1
 800f038:	4413      	add	r3, r2
 800f03a:	00db      	lsls	r3, r3, #3
 800f03c:	440b      	add	r3, r1
 800f03e:	3312      	adds	r3, #18
 800f040:	881b      	ldrh	r3, [r3, #0]
 800f042:	8b3a      	ldrh	r2, [r7, #24]
 800f044:	429a      	cmp	r2, r3
 800f046:	d80c      	bhi.n	800f062 <etharp_find_entry+0x18a>
            old_stable = i;
 800f048:	8c3b      	ldrh	r3, [r7, #32]
 800f04a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800f04c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f050:	4956      	ldr	r1, [pc, #344]	; (800f1ac <etharp_find_entry+0x2d4>)
 800f052:	4613      	mov	r3, r2
 800f054:	005b      	lsls	r3, r3, #1
 800f056:	4413      	add	r3, r2
 800f058:	00db      	lsls	r3, r3, #3
 800f05a:	440b      	add	r3, r1
 800f05c:	3312      	adds	r3, #18
 800f05e:	881b      	ldrh	r3, [r3, #0]
 800f060:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f062:	8c3b      	ldrh	r3, [r7, #32]
 800f064:	3301      	adds	r3, #1
 800f066:	b29b      	uxth	r3, r3
 800f068:	843b      	strh	r3, [r7, #32]
 800f06a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f06e:	2b09      	cmp	r3, #9
 800f070:	f77f af4c 	ble.w	800ef0c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f074:	7afb      	ldrb	r3, [r7, #11]
 800f076:	f003 0302 	and.w	r3, r3, #2
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d108      	bne.n	800f090 <etharp_find_entry+0x1b8>
 800f07e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f082:	2b0a      	cmp	r3, #10
 800f084:	d107      	bne.n	800f096 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800f086:	7afb      	ldrb	r3, [r7, #11]
 800f088:	f003 0301 	and.w	r3, r3, #1
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d102      	bne.n	800f096 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800f090:	f04f 33ff 	mov.w	r3, #4294967295
 800f094:	e085      	b.n	800f1a2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f096:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f09a:	2b09      	cmp	r3, #9
 800f09c:	dc02      	bgt.n	800f0a4 <etharp_find_entry+0x1cc>
    i = empty;
 800f09e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f0a0:	843b      	strh	r3, [r7, #32]
 800f0a2:	e039      	b.n	800f118 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f0a4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f0a8:	2b09      	cmp	r3, #9
 800f0aa:	dc14      	bgt.n	800f0d6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800f0ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0ae:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f0b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f0b4:	493d      	ldr	r1, [pc, #244]	; (800f1ac <etharp_find_entry+0x2d4>)
 800f0b6:	4613      	mov	r3, r2
 800f0b8:	005b      	lsls	r3, r3, #1
 800f0ba:	4413      	add	r3, r2
 800f0bc:	00db      	lsls	r3, r3, #3
 800f0be:	440b      	add	r3, r1
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d018      	beq.n	800f0f8 <etharp_find_entry+0x220>
 800f0c6:	4b3a      	ldr	r3, [pc, #232]	; (800f1b0 <etharp_find_entry+0x2d8>)
 800f0c8:	f240 126d 	movw	r2, #365	; 0x16d
 800f0cc:	493b      	ldr	r1, [pc, #236]	; (800f1bc <etharp_find_entry+0x2e4>)
 800f0ce:	483a      	ldr	r0, [pc, #232]	; (800f1b8 <etharp_find_entry+0x2e0>)
 800f0d0:	f002 f952 	bl	8011378 <iprintf>
 800f0d4:	e010      	b.n	800f0f8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f0d6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f0da:	2b09      	cmp	r3, #9
 800f0dc:	dc02      	bgt.n	800f0e4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800f0de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f0e0:	843b      	strh	r3, [r7, #32]
 800f0e2:	e009      	b.n	800f0f8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f0e4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f0e8:	2b09      	cmp	r3, #9
 800f0ea:	dc02      	bgt.n	800f0f2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800f0ec:	8bfb      	ldrh	r3, [r7, #30]
 800f0ee:	843b      	strh	r3, [r7, #32]
 800f0f0:	e002      	b.n	800f0f8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800f0f2:	f04f 33ff 	mov.w	r3, #4294967295
 800f0f6:	e054      	b.n	800f1a2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f0f8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f0fc:	2b09      	cmp	r3, #9
 800f0fe:	dd06      	ble.n	800f10e <etharp_find_entry+0x236>
 800f100:	4b2b      	ldr	r3, [pc, #172]	; (800f1b0 <etharp_find_entry+0x2d8>)
 800f102:	f240 127f 	movw	r2, #383	; 0x17f
 800f106:	492e      	ldr	r1, [pc, #184]	; (800f1c0 <etharp_find_entry+0x2e8>)
 800f108:	482b      	ldr	r0, [pc, #172]	; (800f1b8 <etharp_find_entry+0x2e0>)
 800f10a:	f002 f935 	bl	8011378 <iprintf>
    etharp_free_entry(i);
 800f10e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f112:	4618      	mov	r0, r3
 800f114:	f7ff fe06 	bl	800ed24 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f118:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f11c:	2b09      	cmp	r3, #9
 800f11e:	dd06      	ble.n	800f12e <etharp_find_entry+0x256>
 800f120:	4b23      	ldr	r3, [pc, #140]	; (800f1b0 <etharp_find_entry+0x2d8>)
 800f122:	f240 1283 	movw	r2, #387	; 0x183
 800f126:	4926      	ldr	r1, [pc, #152]	; (800f1c0 <etharp_find_entry+0x2e8>)
 800f128:	4823      	ldr	r0, [pc, #140]	; (800f1b8 <etharp_find_entry+0x2e0>)
 800f12a:	f002 f925 	bl	8011378 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f12e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f132:	491e      	ldr	r1, [pc, #120]	; (800f1ac <etharp_find_entry+0x2d4>)
 800f134:	4613      	mov	r3, r2
 800f136:	005b      	lsls	r3, r3, #1
 800f138:	4413      	add	r3, r2
 800f13a:	00db      	lsls	r3, r3, #3
 800f13c:	440b      	add	r3, r1
 800f13e:	3314      	adds	r3, #20
 800f140:	781b      	ldrb	r3, [r3, #0]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d006      	beq.n	800f154 <etharp_find_entry+0x27c>
 800f146:	4b1a      	ldr	r3, [pc, #104]	; (800f1b0 <etharp_find_entry+0x2d8>)
 800f148:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800f14c:	491d      	ldr	r1, [pc, #116]	; (800f1c4 <etharp_find_entry+0x2ec>)
 800f14e:	481a      	ldr	r0, [pc, #104]	; (800f1b8 <etharp_find_entry+0x2e0>)
 800f150:	f002 f912 	bl	8011378 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d00b      	beq.n	800f172 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f15a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	6819      	ldr	r1, [r3, #0]
 800f162:	4812      	ldr	r0, [pc, #72]	; (800f1ac <etharp_find_entry+0x2d4>)
 800f164:	4613      	mov	r3, r2
 800f166:	005b      	lsls	r3, r3, #1
 800f168:	4413      	add	r3, r2
 800f16a:	00db      	lsls	r3, r3, #3
 800f16c:	4403      	add	r3, r0
 800f16e:	3304      	adds	r3, #4
 800f170:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f172:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f176:	490d      	ldr	r1, [pc, #52]	; (800f1ac <etharp_find_entry+0x2d4>)
 800f178:	4613      	mov	r3, r2
 800f17a:	005b      	lsls	r3, r3, #1
 800f17c:	4413      	add	r3, r2
 800f17e:	00db      	lsls	r3, r3, #3
 800f180:	440b      	add	r3, r1
 800f182:	3312      	adds	r3, #18
 800f184:	2200      	movs	r2, #0
 800f186:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f188:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f18c:	4907      	ldr	r1, [pc, #28]	; (800f1ac <etharp_find_entry+0x2d4>)
 800f18e:	4613      	mov	r3, r2
 800f190:	005b      	lsls	r3, r3, #1
 800f192:	4413      	add	r3, r2
 800f194:	00db      	lsls	r3, r3, #3
 800f196:	440b      	add	r3, r1
 800f198:	3308      	adds	r3, #8
 800f19a:	687a      	ldr	r2, [r7, #4]
 800f19c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800f19e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3728      	adds	r7, #40	; 0x28
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	2000bc8c 	.word	0x2000bc8c
 800f1b0:	08014b88 	.word	0x08014b88
 800f1b4:	08014bc0 	.word	0x08014bc0
 800f1b8:	08014c00 	.word	0x08014c00
 800f1bc:	08014c28 	.word	0x08014c28
 800f1c0:	08014c40 	.word	0x08014c40
 800f1c4:	08014c54 	.word	0x08014c54

0800f1c8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b088      	sub	sp, #32
 800f1cc:	af02      	add	r7, sp, #8
 800f1ce:	60f8      	str	r0, [r7, #12]
 800f1d0:	60b9      	str	r1, [r7, #8]
 800f1d2:	607a      	str	r2, [r7, #4]
 800f1d4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f1dc:	2b06      	cmp	r3, #6
 800f1de:	d006      	beq.n	800f1ee <etharp_update_arp_entry+0x26>
 800f1e0:	4b48      	ldr	r3, [pc, #288]	; (800f304 <etharp_update_arp_entry+0x13c>)
 800f1e2:	f240 12a9 	movw	r2, #425	; 0x1a9
 800f1e6:	4948      	ldr	r1, [pc, #288]	; (800f308 <etharp_update_arp_entry+0x140>)
 800f1e8:	4848      	ldr	r0, [pc, #288]	; (800f30c <etharp_update_arp_entry+0x144>)
 800f1ea:	f002 f8c5 	bl	8011378 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d012      	beq.n	800f21a <etharp_update_arp_entry+0x52>
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d00e      	beq.n	800f21a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	68f9      	ldr	r1, [r7, #12]
 800f202:	4618      	mov	r0, r3
 800f204:	f001 f8fe 	bl	8010404 <ip4_addr_isbroadcast_u32>
 800f208:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d105      	bne.n	800f21a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f216:	2be0      	cmp	r3, #224	; 0xe0
 800f218:	d102      	bne.n	800f220 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f21a:	f06f 030f 	mvn.w	r3, #15
 800f21e:	e06c      	b.n	800f2fa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f220:	78fb      	ldrb	r3, [r7, #3]
 800f222:	68fa      	ldr	r2, [r7, #12]
 800f224:	4619      	mov	r1, r3
 800f226:	68b8      	ldr	r0, [r7, #8]
 800f228:	f7ff fe56 	bl	800eed8 <etharp_find_entry>
 800f22c:	4603      	mov	r3, r0
 800f22e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f230:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f234:	2b00      	cmp	r3, #0
 800f236:	da02      	bge.n	800f23e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800f238:	8afb      	ldrh	r3, [r7, #22]
 800f23a:	b25b      	sxtb	r3, r3
 800f23c:	e05d      	b.n	800f2fa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f23e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f242:	4933      	ldr	r1, [pc, #204]	; (800f310 <etharp_update_arp_entry+0x148>)
 800f244:	4613      	mov	r3, r2
 800f246:	005b      	lsls	r3, r3, #1
 800f248:	4413      	add	r3, r2
 800f24a:	00db      	lsls	r3, r3, #3
 800f24c:	440b      	add	r3, r1
 800f24e:	3314      	adds	r3, #20
 800f250:	2202      	movs	r2, #2
 800f252:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f254:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f258:	492d      	ldr	r1, [pc, #180]	; (800f310 <etharp_update_arp_entry+0x148>)
 800f25a:	4613      	mov	r3, r2
 800f25c:	005b      	lsls	r3, r3, #1
 800f25e:	4413      	add	r3, r2
 800f260:	00db      	lsls	r3, r3, #3
 800f262:	440b      	add	r3, r1
 800f264:	3308      	adds	r3, #8
 800f266:	68fa      	ldr	r2, [r7, #12]
 800f268:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f26a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f26e:	4613      	mov	r3, r2
 800f270:	005b      	lsls	r3, r3, #1
 800f272:	4413      	add	r3, r2
 800f274:	00db      	lsls	r3, r3, #3
 800f276:	3308      	adds	r3, #8
 800f278:	4a25      	ldr	r2, [pc, #148]	; (800f310 <etharp_update_arp_entry+0x148>)
 800f27a:	4413      	add	r3, r2
 800f27c:	3304      	adds	r3, #4
 800f27e:	2206      	movs	r2, #6
 800f280:	6879      	ldr	r1, [r7, #4]
 800f282:	4618      	mov	r0, r3
 800f284:	f002 f848 	bl	8011318 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f288:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f28c:	4920      	ldr	r1, [pc, #128]	; (800f310 <etharp_update_arp_entry+0x148>)
 800f28e:	4613      	mov	r3, r2
 800f290:	005b      	lsls	r3, r3, #1
 800f292:	4413      	add	r3, r2
 800f294:	00db      	lsls	r3, r3, #3
 800f296:	440b      	add	r3, r1
 800f298:	3312      	adds	r3, #18
 800f29a:	2200      	movs	r2, #0
 800f29c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f29e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f2a2:	491b      	ldr	r1, [pc, #108]	; (800f310 <etharp_update_arp_entry+0x148>)
 800f2a4:	4613      	mov	r3, r2
 800f2a6:	005b      	lsls	r3, r3, #1
 800f2a8:	4413      	add	r3, r2
 800f2aa:	00db      	lsls	r3, r3, #3
 800f2ac:	440b      	add	r3, r1
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d021      	beq.n	800f2f8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800f2b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f2b8:	4915      	ldr	r1, [pc, #84]	; (800f310 <etharp_update_arp_entry+0x148>)
 800f2ba:	4613      	mov	r3, r2
 800f2bc:	005b      	lsls	r3, r3, #1
 800f2be:	4413      	add	r3, r2
 800f2c0:	00db      	lsls	r3, r3, #3
 800f2c2:	440b      	add	r3, r1
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f2c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f2cc:	4910      	ldr	r1, [pc, #64]	; (800f310 <etharp_update_arp_entry+0x148>)
 800f2ce:	4613      	mov	r3, r2
 800f2d0:	005b      	lsls	r3, r3, #1
 800f2d2:	4413      	add	r3, r2
 800f2d4:	00db      	lsls	r3, r3, #3
 800f2d6:	440b      	add	r3, r1
 800f2d8:	2200      	movs	r2, #0
 800f2da:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f2e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f2e6:	9300      	str	r3, [sp, #0]
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	6939      	ldr	r1, [r7, #16]
 800f2ec:	68f8      	ldr	r0, [r7, #12]
 800f2ee:	f001 ff97 	bl	8011220 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f2f2:	6938      	ldr	r0, [r7, #16]
 800f2f4:	f7f9 fa56 	bl	80087a4 <pbuf_free>
  }
  return ERR_OK;
 800f2f8:	2300      	movs	r3, #0
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3718      	adds	r7, #24
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}
 800f302:	bf00      	nop
 800f304:	08014b88 	.word	0x08014b88
 800f308:	08014c80 	.word	0x08014c80
 800f30c:	08014c00 	.word	0x08014c00
 800f310:	2000bc8c 	.word	0x2000bc8c

0800f314 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b084      	sub	sp, #16
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f31c:	2300      	movs	r3, #0
 800f31e:	60fb      	str	r3, [r7, #12]
 800f320:	e01e      	b.n	800f360 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800f322:	4913      	ldr	r1, [pc, #76]	; (800f370 <etharp_cleanup_netif+0x5c>)
 800f324:	68fa      	ldr	r2, [r7, #12]
 800f326:	4613      	mov	r3, r2
 800f328:	005b      	lsls	r3, r3, #1
 800f32a:	4413      	add	r3, r2
 800f32c:	00db      	lsls	r3, r3, #3
 800f32e:	440b      	add	r3, r1
 800f330:	3314      	adds	r3, #20
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f336:	7afb      	ldrb	r3, [r7, #11]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d00e      	beq.n	800f35a <etharp_cleanup_netif+0x46>
 800f33c:	490c      	ldr	r1, [pc, #48]	; (800f370 <etharp_cleanup_netif+0x5c>)
 800f33e:	68fa      	ldr	r2, [r7, #12]
 800f340:	4613      	mov	r3, r2
 800f342:	005b      	lsls	r3, r3, #1
 800f344:	4413      	add	r3, r2
 800f346:	00db      	lsls	r3, r3, #3
 800f348:	440b      	add	r3, r1
 800f34a:	3308      	adds	r3, #8
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	687a      	ldr	r2, [r7, #4]
 800f350:	429a      	cmp	r2, r3
 800f352:	d102      	bne.n	800f35a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800f354:	68f8      	ldr	r0, [r7, #12]
 800f356:	f7ff fce5 	bl	800ed24 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	3301      	adds	r3, #1
 800f35e:	60fb      	str	r3, [r7, #12]
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	2b09      	cmp	r3, #9
 800f364:	dddd      	ble.n	800f322 <etharp_cleanup_netif+0xe>
    }
  }
}
 800f366:	bf00      	nop
 800f368:	bf00      	nop
 800f36a:	3710      	adds	r7, #16
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd80      	pop	{r7, pc}
 800f370:	2000bc8c 	.word	0x2000bc8c

0800f374 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f374:	b5b0      	push	{r4, r5, r7, lr}
 800f376:	b08a      	sub	sp, #40	; 0x28
 800f378:	af04      	add	r7, sp, #16
 800f37a:	6078      	str	r0, [r7, #4]
 800f37c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d107      	bne.n	800f394 <etharp_input+0x20>
 800f384:	4b3d      	ldr	r3, [pc, #244]	; (800f47c <etharp_input+0x108>)
 800f386:	f240 228a 	movw	r2, #650	; 0x28a
 800f38a:	493d      	ldr	r1, [pc, #244]	; (800f480 <etharp_input+0x10c>)
 800f38c:	483d      	ldr	r0, [pc, #244]	; (800f484 <etharp_input+0x110>)
 800f38e:	f001 fff3 	bl	8011378 <iprintf>
 800f392:	e06f      	b.n	800f474 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	685b      	ldr	r3, [r3, #4]
 800f398:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f39a:	693b      	ldr	r3, [r7, #16]
 800f39c:	881b      	ldrh	r3, [r3, #0]
 800f39e:	b29b      	uxth	r3, r3
 800f3a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f3a4:	d10c      	bne.n	800f3c0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f3a6:	693b      	ldr	r3, [r7, #16]
 800f3a8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f3aa:	2b06      	cmp	r3, #6
 800f3ac:	d108      	bne.n	800f3c0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f3b2:	2b04      	cmp	r3, #4
 800f3b4:	d104      	bne.n	800f3c0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f3b6:	693b      	ldr	r3, [r7, #16]
 800f3b8:	885b      	ldrh	r3, [r3, #2]
 800f3ba:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f3bc:	2b08      	cmp	r3, #8
 800f3be:	d003      	beq.n	800f3c8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f7f9 f9ef 	bl	80087a4 <pbuf_free>
    return;
 800f3c6:	e055      	b.n	800f474 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f3c8:	693b      	ldr	r3, [r7, #16]
 800f3ca:	330e      	adds	r3, #14
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	3318      	adds	r3, #24
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	3304      	adds	r3, #4
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d102      	bne.n	800f3e8 <etharp_input+0x74>
    for_us = 0;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	75fb      	strb	r3, [r7, #23]
 800f3e6:	e009      	b.n	800f3fc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f3e8:	68ba      	ldr	r2, [r7, #8]
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	3304      	adds	r3, #4
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	bf0c      	ite	eq
 800f3f4:	2301      	moveq	r3, #1
 800f3f6:	2300      	movne	r3, #0
 800f3f8:	b2db      	uxtb	r3, r3
 800f3fa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f3fc:	693b      	ldr	r3, [r7, #16]
 800f3fe:	f103 0208 	add.w	r2, r3, #8
 800f402:	7dfb      	ldrb	r3, [r7, #23]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d001      	beq.n	800f40c <etharp_input+0x98>
 800f408:	2301      	movs	r3, #1
 800f40a:	e000      	b.n	800f40e <etharp_input+0x9a>
 800f40c:	2302      	movs	r3, #2
 800f40e:	f107 010c 	add.w	r1, r7, #12
 800f412:	6838      	ldr	r0, [r7, #0]
 800f414:	f7ff fed8 	bl	800f1c8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800f418:	693b      	ldr	r3, [r7, #16]
 800f41a:	88db      	ldrh	r3, [r3, #6]
 800f41c:	b29b      	uxth	r3, r3
 800f41e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f422:	d003      	beq.n	800f42c <etharp_input+0xb8>
 800f424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f428:	d01e      	beq.n	800f468 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800f42a:	e020      	b.n	800f46e <etharp_input+0xfa>
      if (for_us) {
 800f42c:	7dfb      	ldrb	r3, [r7, #23]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d01c      	beq.n	800f46c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f438:	693b      	ldr	r3, [r7, #16]
 800f43a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f448:	693a      	ldr	r2, [r7, #16]
 800f44a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f44c:	2102      	movs	r1, #2
 800f44e:	9103      	str	r1, [sp, #12]
 800f450:	f107 010c 	add.w	r1, r7, #12
 800f454:	9102      	str	r1, [sp, #8]
 800f456:	9201      	str	r2, [sp, #4]
 800f458:	9300      	str	r3, [sp, #0]
 800f45a:	462b      	mov	r3, r5
 800f45c:	4622      	mov	r2, r4
 800f45e:	4601      	mov	r1, r0
 800f460:	6838      	ldr	r0, [r7, #0]
 800f462:	f000 faeb 	bl	800fa3c <etharp_raw>
      break;
 800f466:	e001      	b.n	800f46c <etharp_input+0xf8>
      break;
 800f468:	bf00      	nop
 800f46a:	e000      	b.n	800f46e <etharp_input+0xfa>
      break;
 800f46c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f7f9 f998 	bl	80087a4 <pbuf_free>
}
 800f474:	3718      	adds	r7, #24
 800f476:	46bd      	mov	sp, r7
 800f478:	bdb0      	pop	{r4, r5, r7, pc}
 800f47a:	bf00      	nop
 800f47c:	08014b88 	.word	0x08014b88
 800f480:	08014cd8 	.word	0x08014cd8
 800f484:	08014c00 	.word	0x08014c00

0800f488 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b086      	sub	sp, #24
 800f48c:	af02      	add	r7, sp, #8
 800f48e:	60f8      	str	r0, [r7, #12]
 800f490:	60b9      	str	r1, [r7, #8]
 800f492:	4613      	mov	r3, r2
 800f494:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f496:	79fa      	ldrb	r2, [r7, #7]
 800f498:	4944      	ldr	r1, [pc, #272]	; (800f5ac <etharp_output_to_arp_index+0x124>)
 800f49a:	4613      	mov	r3, r2
 800f49c:	005b      	lsls	r3, r3, #1
 800f49e:	4413      	add	r3, r2
 800f4a0:	00db      	lsls	r3, r3, #3
 800f4a2:	440b      	add	r3, r1
 800f4a4:	3314      	adds	r3, #20
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	2b01      	cmp	r3, #1
 800f4aa:	d806      	bhi.n	800f4ba <etharp_output_to_arp_index+0x32>
 800f4ac:	4b40      	ldr	r3, [pc, #256]	; (800f5b0 <etharp_output_to_arp_index+0x128>)
 800f4ae:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f4b2:	4940      	ldr	r1, [pc, #256]	; (800f5b4 <etharp_output_to_arp_index+0x12c>)
 800f4b4:	4840      	ldr	r0, [pc, #256]	; (800f5b8 <etharp_output_to_arp_index+0x130>)
 800f4b6:	f001 ff5f 	bl	8011378 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f4ba:	79fa      	ldrb	r2, [r7, #7]
 800f4bc:	493b      	ldr	r1, [pc, #236]	; (800f5ac <etharp_output_to_arp_index+0x124>)
 800f4be:	4613      	mov	r3, r2
 800f4c0:	005b      	lsls	r3, r3, #1
 800f4c2:	4413      	add	r3, r2
 800f4c4:	00db      	lsls	r3, r3, #3
 800f4c6:	440b      	add	r3, r1
 800f4c8:	3314      	adds	r3, #20
 800f4ca:	781b      	ldrb	r3, [r3, #0]
 800f4cc:	2b02      	cmp	r3, #2
 800f4ce:	d153      	bne.n	800f578 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f4d0:	79fa      	ldrb	r2, [r7, #7]
 800f4d2:	4936      	ldr	r1, [pc, #216]	; (800f5ac <etharp_output_to_arp_index+0x124>)
 800f4d4:	4613      	mov	r3, r2
 800f4d6:	005b      	lsls	r3, r3, #1
 800f4d8:	4413      	add	r3, r2
 800f4da:	00db      	lsls	r3, r3, #3
 800f4dc:	440b      	add	r3, r1
 800f4de:	3312      	adds	r3, #18
 800f4e0:	881b      	ldrh	r3, [r3, #0]
 800f4e2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800f4e6:	d919      	bls.n	800f51c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f4e8:	79fa      	ldrb	r2, [r7, #7]
 800f4ea:	4613      	mov	r3, r2
 800f4ec:	005b      	lsls	r3, r3, #1
 800f4ee:	4413      	add	r3, r2
 800f4f0:	00db      	lsls	r3, r3, #3
 800f4f2:	4a2e      	ldr	r2, [pc, #184]	; (800f5ac <etharp_output_to_arp_index+0x124>)
 800f4f4:	4413      	add	r3, r2
 800f4f6:	3304      	adds	r3, #4
 800f4f8:	4619      	mov	r1, r3
 800f4fa:	68f8      	ldr	r0, [r7, #12]
 800f4fc:	f000 fb4c 	bl	800fb98 <etharp_request>
 800f500:	4603      	mov	r3, r0
 800f502:	2b00      	cmp	r3, #0
 800f504:	d138      	bne.n	800f578 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f506:	79fa      	ldrb	r2, [r7, #7]
 800f508:	4928      	ldr	r1, [pc, #160]	; (800f5ac <etharp_output_to_arp_index+0x124>)
 800f50a:	4613      	mov	r3, r2
 800f50c:	005b      	lsls	r3, r3, #1
 800f50e:	4413      	add	r3, r2
 800f510:	00db      	lsls	r3, r3, #3
 800f512:	440b      	add	r3, r1
 800f514:	3314      	adds	r3, #20
 800f516:	2203      	movs	r2, #3
 800f518:	701a      	strb	r2, [r3, #0]
 800f51a:	e02d      	b.n	800f578 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f51c:	79fa      	ldrb	r2, [r7, #7]
 800f51e:	4923      	ldr	r1, [pc, #140]	; (800f5ac <etharp_output_to_arp_index+0x124>)
 800f520:	4613      	mov	r3, r2
 800f522:	005b      	lsls	r3, r3, #1
 800f524:	4413      	add	r3, r2
 800f526:	00db      	lsls	r3, r3, #3
 800f528:	440b      	add	r3, r1
 800f52a:	3312      	adds	r3, #18
 800f52c:	881b      	ldrh	r3, [r3, #0]
 800f52e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f532:	d321      	bcc.n	800f578 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f534:	79fa      	ldrb	r2, [r7, #7]
 800f536:	4613      	mov	r3, r2
 800f538:	005b      	lsls	r3, r3, #1
 800f53a:	4413      	add	r3, r2
 800f53c:	00db      	lsls	r3, r3, #3
 800f53e:	4a1b      	ldr	r2, [pc, #108]	; (800f5ac <etharp_output_to_arp_index+0x124>)
 800f540:	4413      	add	r3, r2
 800f542:	1d19      	adds	r1, r3, #4
 800f544:	79fa      	ldrb	r2, [r7, #7]
 800f546:	4613      	mov	r3, r2
 800f548:	005b      	lsls	r3, r3, #1
 800f54a:	4413      	add	r3, r2
 800f54c:	00db      	lsls	r3, r3, #3
 800f54e:	3308      	adds	r3, #8
 800f550:	4a16      	ldr	r2, [pc, #88]	; (800f5ac <etharp_output_to_arp_index+0x124>)
 800f552:	4413      	add	r3, r2
 800f554:	3304      	adds	r3, #4
 800f556:	461a      	mov	r2, r3
 800f558:	68f8      	ldr	r0, [r7, #12]
 800f55a:	f000 fafb 	bl	800fb54 <etharp_request_dst>
 800f55e:	4603      	mov	r3, r0
 800f560:	2b00      	cmp	r3, #0
 800f562:	d109      	bne.n	800f578 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f564:	79fa      	ldrb	r2, [r7, #7]
 800f566:	4911      	ldr	r1, [pc, #68]	; (800f5ac <etharp_output_to_arp_index+0x124>)
 800f568:	4613      	mov	r3, r2
 800f56a:	005b      	lsls	r3, r3, #1
 800f56c:	4413      	add	r3, r2
 800f56e:	00db      	lsls	r3, r3, #3
 800f570:	440b      	add	r3, r1
 800f572:	3314      	adds	r3, #20
 800f574:	2203      	movs	r2, #3
 800f576:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800f57e:	79fa      	ldrb	r2, [r7, #7]
 800f580:	4613      	mov	r3, r2
 800f582:	005b      	lsls	r3, r3, #1
 800f584:	4413      	add	r3, r2
 800f586:	00db      	lsls	r3, r3, #3
 800f588:	3308      	adds	r3, #8
 800f58a:	4a08      	ldr	r2, [pc, #32]	; (800f5ac <etharp_output_to_arp_index+0x124>)
 800f58c:	4413      	add	r3, r2
 800f58e:	3304      	adds	r3, #4
 800f590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f594:	9200      	str	r2, [sp, #0]
 800f596:	460a      	mov	r2, r1
 800f598:	68b9      	ldr	r1, [r7, #8]
 800f59a:	68f8      	ldr	r0, [r7, #12]
 800f59c:	f001 fe40 	bl	8011220 <ethernet_output>
 800f5a0:	4603      	mov	r3, r0
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	3710      	adds	r7, #16
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
 800f5aa:	bf00      	nop
 800f5ac:	2000bc8c 	.word	0x2000bc8c
 800f5b0:	08014b88 	.word	0x08014b88
 800f5b4:	08014cf8 	.word	0x08014cf8
 800f5b8:	08014c00 	.word	0x08014c00

0800f5bc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b08a      	sub	sp, #40	; 0x28
 800f5c0:	af02      	add	r7, sp, #8
 800f5c2:	60f8      	str	r0, [r7, #12]
 800f5c4:	60b9      	str	r1, [r7, #8]
 800f5c6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d106      	bne.n	800f5e0 <etharp_output+0x24>
 800f5d2:	4b73      	ldr	r3, [pc, #460]	; (800f7a0 <etharp_output+0x1e4>)
 800f5d4:	f240 321e 	movw	r2, #798	; 0x31e
 800f5d8:	4972      	ldr	r1, [pc, #456]	; (800f7a4 <etharp_output+0x1e8>)
 800f5da:	4873      	ldr	r0, [pc, #460]	; (800f7a8 <etharp_output+0x1ec>)
 800f5dc:	f001 fecc 	bl	8011378 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d106      	bne.n	800f5f4 <etharp_output+0x38>
 800f5e6:	4b6e      	ldr	r3, [pc, #440]	; (800f7a0 <etharp_output+0x1e4>)
 800f5e8:	f240 321f 	movw	r2, #799	; 0x31f
 800f5ec:	496f      	ldr	r1, [pc, #444]	; (800f7ac <etharp_output+0x1f0>)
 800f5ee:	486e      	ldr	r0, [pc, #440]	; (800f7a8 <etharp_output+0x1ec>)
 800f5f0:	f001 fec2 	bl	8011378 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d106      	bne.n	800f608 <etharp_output+0x4c>
 800f5fa:	4b69      	ldr	r3, [pc, #420]	; (800f7a0 <etharp_output+0x1e4>)
 800f5fc:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f600:	496b      	ldr	r1, [pc, #428]	; (800f7b0 <etharp_output+0x1f4>)
 800f602:	4869      	ldr	r0, [pc, #420]	; (800f7a8 <etharp_output+0x1ec>)
 800f604:	f001 feb8 	bl	8011378 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	68f9      	ldr	r1, [r7, #12]
 800f60e:	4618      	mov	r0, r3
 800f610:	f000 fef8 	bl	8010404 <ip4_addr_isbroadcast_u32>
 800f614:	4603      	mov	r3, r0
 800f616:	2b00      	cmp	r3, #0
 800f618:	d002      	beq.n	800f620 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f61a:	4b66      	ldr	r3, [pc, #408]	; (800f7b4 <etharp_output+0x1f8>)
 800f61c:	61fb      	str	r3, [r7, #28]
 800f61e:	e0af      	b.n	800f780 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f628:	2be0      	cmp	r3, #224	; 0xe0
 800f62a:	d118      	bne.n	800f65e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f62c:	2301      	movs	r3, #1
 800f62e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f630:	2300      	movs	r3, #0
 800f632:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f634:	235e      	movs	r3, #94	; 0x5e
 800f636:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	3301      	adds	r3, #1
 800f63c:	781b      	ldrb	r3, [r3, #0]
 800f63e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f642:	b2db      	uxtb	r3, r3
 800f644:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	3302      	adds	r3, #2
 800f64a:	781b      	ldrb	r3, [r3, #0]
 800f64c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	3303      	adds	r3, #3
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f656:	f107 0310 	add.w	r3, r7, #16
 800f65a:	61fb      	str	r3, [r7, #28]
 800f65c:	e090      	b.n	800f780 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681a      	ldr	r2, [r3, #0]
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	3304      	adds	r3, #4
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	405a      	eors	r2, r3
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	3308      	adds	r3, #8
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	4013      	ands	r3, r2
 800f672:	2b00      	cmp	r3, #0
 800f674:	d012      	beq.n	800f69c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f67c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f680:	4293      	cmp	r3, r2
 800f682:	d00b      	beq.n	800f69c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	330c      	adds	r3, #12
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d003      	beq.n	800f696 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	330c      	adds	r3, #12
 800f692:	61bb      	str	r3, [r7, #24]
 800f694:	e002      	b.n	800f69c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f696:	f06f 0303 	mvn.w	r3, #3
 800f69a:	e07d      	b.n	800f798 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f69c:	4b46      	ldr	r3, [pc, #280]	; (800f7b8 <etharp_output+0x1fc>)
 800f69e:	781b      	ldrb	r3, [r3, #0]
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	4a46      	ldr	r2, [pc, #280]	; (800f7bc <etharp_output+0x200>)
 800f6a4:	460b      	mov	r3, r1
 800f6a6:	005b      	lsls	r3, r3, #1
 800f6a8:	440b      	add	r3, r1
 800f6aa:	00db      	lsls	r3, r3, #3
 800f6ac:	4413      	add	r3, r2
 800f6ae:	3314      	adds	r3, #20
 800f6b0:	781b      	ldrb	r3, [r3, #0]
 800f6b2:	2b01      	cmp	r3, #1
 800f6b4:	d925      	bls.n	800f702 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f6b6:	4b40      	ldr	r3, [pc, #256]	; (800f7b8 <etharp_output+0x1fc>)
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	4619      	mov	r1, r3
 800f6bc:	4a3f      	ldr	r2, [pc, #252]	; (800f7bc <etharp_output+0x200>)
 800f6be:	460b      	mov	r3, r1
 800f6c0:	005b      	lsls	r3, r3, #1
 800f6c2:	440b      	add	r3, r1
 800f6c4:	00db      	lsls	r3, r3, #3
 800f6c6:	4413      	add	r3, r2
 800f6c8:	3308      	adds	r3, #8
 800f6ca:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f6cc:	68fa      	ldr	r2, [r7, #12]
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d117      	bne.n	800f702 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f6d2:	69bb      	ldr	r3, [r7, #24]
 800f6d4:	681a      	ldr	r2, [r3, #0]
 800f6d6:	4b38      	ldr	r3, [pc, #224]	; (800f7b8 <etharp_output+0x1fc>)
 800f6d8:	781b      	ldrb	r3, [r3, #0]
 800f6da:	4618      	mov	r0, r3
 800f6dc:	4937      	ldr	r1, [pc, #220]	; (800f7bc <etharp_output+0x200>)
 800f6de:	4603      	mov	r3, r0
 800f6e0:	005b      	lsls	r3, r3, #1
 800f6e2:	4403      	add	r3, r0
 800f6e4:	00db      	lsls	r3, r3, #3
 800f6e6:	440b      	add	r3, r1
 800f6e8:	3304      	adds	r3, #4
 800f6ea:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f6ec:	429a      	cmp	r2, r3
 800f6ee:	d108      	bne.n	800f702 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f6f0:	4b31      	ldr	r3, [pc, #196]	; (800f7b8 <etharp_output+0x1fc>)
 800f6f2:	781b      	ldrb	r3, [r3, #0]
 800f6f4:	461a      	mov	r2, r3
 800f6f6:	68b9      	ldr	r1, [r7, #8]
 800f6f8:	68f8      	ldr	r0, [r7, #12]
 800f6fa:	f7ff fec5 	bl	800f488 <etharp_output_to_arp_index>
 800f6fe:	4603      	mov	r3, r0
 800f700:	e04a      	b.n	800f798 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f702:	2300      	movs	r3, #0
 800f704:	75fb      	strb	r3, [r7, #23]
 800f706:	e031      	b.n	800f76c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f708:	7dfa      	ldrb	r2, [r7, #23]
 800f70a:	492c      	ldr	r1, [pc, #176]	; (800f7bc <etharp_output+0x200>)
 800f70c:	4613      	mov	r3, r2
 800f70e:	005b      	lsls	r3, r3, #1
 800f710:	4413      	add	r3, r2
 800f712:	00db      	lsls	r3, r3, #3
 800f714:	440b      	add	r3, r1
 800f716:	3314      	adds	r3, #20
 800f718:	781b      	ldrb	r3, [r3, #0]
 800f71a:	2b01      	cmp	r3, #1
 800f71c:	d923      	bls.n	800f766 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f71e:	7dfa      	ldrb	r2, [r7, #23]
 800f720:	4926      	ldr	r1, [pc, #152]	; (800f7bc <etharp_output+0x200>)
 800f722:	4613      	mov	r3, r2
 800f724:	005b      	lsls	r3, r3, #1
 800f726:	4413      	add	r3, r2
 800f728:	00db      	lsls	r3, r3, #3
 800f72a:	440b      	add	r3, r1
 800f72c:	3308      	adds	r3, #8
 800f72e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f730:	68fa      	ldr	r2, [r7, #12]
 800f732:	429a      	cmp	r2, r3
 800f734:	d117      	bne.n	800f766 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f736:	69bb      	ldr	r3, [r7, #24]
 800f738:	6819      	ldr	r1, [r3, #0]
 800f73a:	7dfa      	ldrb	r2, [r7, #23]
 800f73c:	481f      	ldr	r0, [pc, #124]	; (800f7bc <etharp_output+0x200>)
 800f73e:	4613      	mov	r3, r2
 800f740:	005b      	lsls	r3, r3, #1
 800f742:	4413      	add	r3, r2
 800f744:	00db      	lsls	r3, r3, #3
 800f746:	4403      	add	r3, r0
 800f748:	3304      	adds	r3, #4
 800f74a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f74c:	4299      	cmp	r1, r3
 800f74e:	d10a      	bne.n	800f766 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f750:	4a19      	ldr	r2, [pc, #100]	; (800f7b8 <etharp_output+0x1fc>)
 800f752:	7dfb      	ldrb	r3, [r7, #23]
 800f754:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f756:	7dfb      	ldrb	r3, [r7, #23]
 800f758:	461a      	mov	r2, r3
 800f75a:	68b9      	ldr	r1, [r7, #8]
 800f75c:	68f8      	ldr	r0, [r7, #12]
 800f75e:	f7ff fe93 	bl	800f488 <etharp_output_to_arp_index>
 800f762:	4603      	mov	r3, r0
 800f764:	e018      	b.n	800f798 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f766:	7dfb      	ldrb	r3, [r7, #23]
 800f768:	3301      	adds	r3, #1
 800f76a:	75fb      	strb	r3, [r7, #23]
 800f76c:	7dfb      	ldrb	r3, [r7, #23]
 800f76e:	2b09      	cmp	r3, #9
 800f770:	d9ca      	bls.n	800f708 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f772:	68ba      	ldr	r2, [r7, #8]
 800f774:	69b9      	ldr	r1, [r7, #24]
 800f776:	68f8      	ldr	r0, [r7, #12]
 800f778:	f000 f822 	bl	800f7c0 <etharp_query>
 800f77c:	4603      	mov	r3, r0
 800f77e:	e00b      	b.n	800f798 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f786:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f78a:	9300      	str	r3, [sp, #0]
 800f78c:	69fb      	ldr	r3, [r7, #28]
 800f78e:	68b9      	ldr	r1, [r7, #8]
 800f790:	68f8      	ldr	r0, [r7, #12]
 800f792:	f001 fd45 	bl	8011220 <ethernet_output>
 800f796:	4603      	mov	r3, r0
}
 800f798:	4618      	mov	r0, r3
 800f79a:	3720      	adds	r7, #32
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd80      	pop	{r7, pc}
 800f7a0:	08014b88 	.word	0x08014b88
 800f7a4:	08014cd8 	.word	0x08014cd8
 800f7a8:	08014c00 	.word	0x08014c00
 800f7ac:	08014d28 	.word	0x08014d28
 800f7b0:	08014cc8 	.word	0x08014cc8
 800f7b4:	08015344 	.word	0x08015344
 800f7b8:	2000bd7c 	.word	0x2000bd7c
 800f7bc:	2000bc8c 	.word	0x2000bc8c

0800f7c0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b08c      	sub	sp, #48	; 0x30
 800f7c4:	af02      	add	r7, sp, #8
 800f7c6:	60f8      	str	r0, [r7, #12]
 800f7c8:	60b9      	str	r1, [r7, #8]
 800f7ca:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	3326      	adds	r3, #38	; 0x26
 800f7d0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f7d2:	23ff      	movs	r3, #255	; 0xff
 800f7d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800f7d8:	2300      	movs	r3, #0
 800f7da:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	68f9      	ldr	r1, [r7, #12]
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f000 fe0e 	bl	8010404 <ip4_addr_isbroadcast_u32>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d10c      	bne.n	800f808 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f7f6:	2be0      	cmp	r3, #224	; 0xe0
 800f7f8:	d006      	beq.n	800f808 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d003      	beq.n	800f808 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d102      	bne.n	800f80e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f808:	f06f 030f 	mvn.w	r3, #15
 800f80c:	e101      	b.n	800fa12 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f80e:	68fa      	ldr	r2, [r7, #12]
 800f810:	2101      	movs	r1, #1
 800f812:	68b8      	ldr	r0, [r7, #8]
 800f814:	f7ff fb60 	bl	800eed8 <etharp_find_entry>
 800f818:	4603      	mov	r3, r0
 800f81a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f81c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f820:	2b00      	cmp	r3, #0
 800f822:	da02      	bge.n	800f82a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f824:	8a7b      	ldrh	r3, [r7, #18]
 800f826:	b25b      	sxtb	r3, r3
 800f828:	e0f3      	b.n	800fa12 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f82a:	8a7b      	ldrh	r3, [r7, #18]
 800f82c:	2b7e      	cmp	r3, #126	; 0x7e
 800f82e:	d906      	bls.n	800f83e <etharp_query+0x7e>
 800f830:	4b7a      	ldr	r3, [pc, #488]	; (800fa1c <etharp_query+0x25c>)
 800f832:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f836:	497a      	ldr	r1, [pc, #488]	; (800fa20 <etharp_query+0x260>)
 800f838:	487a      	ldr	r0, [pc, #488]	; (800fa24 <etharp_query+0x264>)
 800f83a:	f001 fd9d 	bl	8011378 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f83e:	8a7b      	ldrh	r3, [r7, #18]
 800f840:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f842:	7c7a      	ldrb	r2, [r7, #17]
 800f844:	4978      	ldr	r1, [pc, #480]	; (800fa28 <etharp_query+0x268>)
 800f846:	4613      	mov	r3, r2
 800f848:	005b      	lsls	r3, r3, #1
 800f84a:	4413      	add	r3, r2
 800f84c:	00db      	lsls	r3, r3, #3
 800f84e:	440b      	add	r3, r1
 800f850:	3314      	adds	r3, #20
 800f852:	781b      	ldrb	r3, [r3, #0]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d115      	bne.n	800f884 <etharp_query+0xc4>
    is_new_entry = 1;
 800f858:	2301      	movs	r3, #1
 800f85a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f85c:	7c7a      	ldrb	r2, [r7, #17]
 800f85e:	4972      	ldr	r1, [pc, #456]	; (800fa28 <etharp_query+0x268>)
 800f860:	4613      	mov	r3, r2
 800f862:	005b      	lsls	r3, r3, #1
 800f864:	4413      	add	r3, r2
 800f866:	00db      	lsls	r3, r3, #3
 800f868:	440b      	add	r3, r1
 800f86a:	3314      	adds	r3, #20
 800f86c:	2201      	movs	r2, #1
 800f86e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f870:	7c7a      	ldrb	r2, [r7, #17]
 800f872:	496d      	ldr	r1, [pc, #436]	; (800fa28 <etharp_query+0x268>)
 800f874:	4613      	mov	r3, r2
 800f876:	005b      	lsls	r3, r3, #1
 800f878:	4413      	add	r3, r2
 800f87a:	00db      	lsls	r3, r3, #3
 800f87c:	440b      	add	r3, r1
 800f87e:	3308      	adds	r3, #8
 800f880:	68fa      	ldr	r2, [r7, #12]
 800f882:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f884:	7c7a      	ldrb	r2, [r7, #17]
 800f886:	4968      	ldr	r1, [pc, #416]	; (800fa28 <etharp_query+0x268>)
 800f888:	4613      	mov	r3, r2
 800f88a:	005b      	lsls	r3, r3, #1
 800f88c:	4413      	add	r3, r2
 800f88e:	00db      	lsls	r3, r3, #3
 800f890:	440b      	add	r3, r1
 800f892:	3314      	adds	r3, #20
 800f894:	781b      	ldrb	r3, [r3, #0]
 800f896:	2b01      	cmp	r3, #1
 800f898:	d011      	beq.n	800f8be <etharp_query+0xfe>
 800f89a:	7c7a      	ldrb	r2, [r7, #17]
 800f89c:	4962      	ldr	r1, [pc, #392]	; (800fa28 <etharp_query+0x268>)
 800f89e:	4613      	mov	r3, r2
 800f8a0:	005b      	lsls	r3, r3, #1
 800f8a2:	4413      	add	r3, r2
 800f8a4:	00db      	lsls	r3, r3, #3
 800f8a6:	440b      	add	r3, r1
 800f8a8:	3314      	adds	r3, #20
 800f8aa:	781b      	ldrb	r3, [r3, #0]
 800f8ac:	2b01      	cmp	r3, #1
 800f8ae:	d806      	bhi.n	800f8be <etharp_query+0xfe>
 800f8b0:	4b5a      	ldr	r3, [pc, #360]	; (800fa1c <etharp_query+0x25c>)
 800f8b2:	f240 32cd 	movw	r2, #973	; 0x3cd
 800f8b6:	495d      	ldr	r1, [pc, #372]	; (800fa2c <etharp_query+0x26c>)
 800f8b8:	485a      	ldr	r0, [pc, #360]	; (800fa24 <etharp_query+0x264>)
 800f8ba:	f001 fd5d 	bl	8011378 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f8be:	6a3b      	ldr	r3, [r7, #32]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d102      	bne.n	800f8ca <etharp_query+0x10a>
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d10c      	bne.n	800f8e4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f8ca:	68b9      	ldr	r1, [r7, #8]
 800f8cc:	68f8      	ldr	r0, [r7, #12]
 800f8ce:	f000 f963 	bl	800fb98 <etharp_request>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d102      	bne.n	800f8e4 <etharp_query+0x124>
      return result;
 800f8de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f8e2:	e096      	b.n	800fa12 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d106      	bne.n	800f8f8 <etharp_query+0x138>
 800f8ea:	4b4c      	ldr	r3, [pc, #304]	; (800fa1c <etharp_query+0x25c>)
 800f8ec:	f240 32e1 	movw	r2, #993	; 0x3e1
 800f8f0:	494f      	ldr	r1, [pc, #316]	; (800fa30 <etharp_query+0x270>)
 800f8f2:	484c      	ldr	r0, [pc, #304]	; (800fa24 <etharp_query+0x264>)
 800f8f4:	f001 fd40 	bl	8011378 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f8f8:	7c7a      	ldrb	r2, [r7, #17]
 800f8fa:	494b      	ldr	r1, [pc, #300]	; (800fa28 <etharp_query+0x268>)
 800f8fc:	4613      	mov	r3, r2
 800f8fe:	005b      	lsls	r3, r3, #1
 800f900:	4413      	add	r3, r2
 800f902:	00db      	lsls	r3, r3, #3
 800f904:	440b      	add	r3, r1
 800f906:	3314      	adds	r3, #20
 800f908:	781b      	ldrb	r3, [r3, #0]
 800f90a:	2b01      	cmp	r3, #1
 800f90c:	d917      	bls.n	800f93e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f90e:	4a49      	ldr	r2, [pc, #292]	; (800fa34 <etharp_query+0x274>)
 800f910:	7c7b      	ldrb	r3, [r7, #17]
 800f912:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f914:	7c7a      	ldrb	r2, [r7, #17]
 800f916:	4613      	mov	r3, r2
 800f918:	005b      	lsls	r3, r3, #1
 800f91a:	4413      	add	r3, r2
 800f91c:	00db      	lsls	r3, r3, #3
 800f91e:	3308      	adds	r3, #8
 800f920:	4a41      	ldr	r2, [pc, #260]	; (800fa28 <etharp_query+0x268>)
 800f922:	4413      	add	r3, r2
 800f924:	3304      	adds	r3, #4
 800f926:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f92a:	9200      	str	r2, [sp, #0]
 800f92c:	697a      	ldr	r2, [r7, #20]
 800f92e:	6879      	ldr	r1, [r7, #4]
 800f930:	68f8      	ldr	r0, [r7, #12]
 800f932:	f001 fc75 	bl	8011220 <ethernet_output>
 800f936:	4603      	mov	r3, r0
 800f938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f93c:	e067      	b.n	800fa0e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f93e:	7c7a      	ldrb	r2, [r7, #17]
 800f940:	4939      	ldr	r1, [pc, #228]	; (800fa28 <etharp_query+0x268>)
 800f942:	4613      	mov	r3, r2
 800f944:	005b      	lsls	r3, r3, #1
 800f946:	4413      	add	r3, r2
 800f948:	00db      	lsls	r3, r3, #3
 800f94a:	440b      	add	r3, r1
 800f94c:	3314      	adds	r3, #20
 800f94e:	781b      	ldrb	r3, [r3, #0]
 800f950:	2b01      	cmp	r3, #1
 800f952:	d15c      	bne.n	800fa0e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f954:	2300      	movs	r3, #0
 800f956:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f95c:	e01c      	b.n	800f998 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f95e:	69fb      	ldr	r3, [r7, #28]
 800f960:	895a      	ldrh	r2, [r3, #10]
 800f962:	69fb      	ldr	r3, [r7, #28]
 800f964:	891b      	ldrh	r3, [r3, #8]
 800f966:	429a      	cmp	r2, r3
 800f968:	d10a      	bne.n	800f980 <etharp_query+0x1c0>
 800f96a:	69fb      	ldr	r3, [r7, #28]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d006      	beq.n	800f980 <etharp_query+0x1c0>
 800f972:	4b2a      	ldr	r3, [pc, #168]	; (800fa1c <etharp_query+0x25c>)
 800f974:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f978:	492f      	ldr	r1, [pc, #188]	; (800fa38 <etharp_query+0x278>)
 800f97a:	482a      	ldr	r0, [pc, #168]	; (800fa24 <etharp_query+0x264>)
 800f97c:	f001 fcfc 	bl	8011378 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f980:	69fb      	ldr	r3, [r7, #28]
 800f982:	7b1b      	ldrb	r3, [r3, #12]
 800f984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d002      	beq.n	800f992 <etharp_query+0x1d2>
        copy_needed = 1;
 800f98c:	2301      	movs	r3, #1
 800f98e:	61bb      	str	r3, [r7, #24]
        break;
 800f990:	e005      	b.n	800f99e <etharp_query+0x1de>
      }
      p = p->next;
 800f992:	69fb      	ldr	r3, [r7, #28]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f998:	69fb      	ldr	r3, [r7, #28]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d1df      	bne.n	800f95e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800f99e:	69bb      	ldr	r3, [r7, #24]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d007      	beq.n	800f9b4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f9a4:	687a      	ldr	r2, [r7, #4]
 800f9a6:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f9aa:	200e      	movs	r0, #14
 800f9ac:	f7f9 f9f8 	bl	8008da0 <pbuf_clone>
 800f9b0:	61f8      	str	r0, [r7, #28]
 800f9b2:	e004      	b.n	800f9be <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f9b8:	69f8      	ldr	r0, [r7, #28]
 800f9ba:	f7f8 ff93 	bl	80088e4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f9be:	69fb      	ldr	r3, [r7, #28]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d021      	beq.n	800fa08 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f9c4:	7c7a      	ldrb	r2, [r7, #17]
 800f9c6:	4918      	ldr	r1, [pc, #96]	; (800fa28 <etharp_query+0x268>)
 800f9c8:	4613      	mov	r3, r2
 800f9ca:	005b      	lsls	r3, r3, #1
 800f9cc:	4413      	add	r3, r2
 800f9ce:	00db      	lsls	r3, r3, #3
 800f9d0:	440b      	add	r3, r1
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d00a      	beq.n	800f9ee <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f9d8:	7c7a      	ldrb	r2, [r7, #17]
 800f9da:	4913      	ldr	r1, [pc, #76]	; (800fa28 <etharp_query+0x268>)
 800f9dc:	4613      	mov	r3, r2
 800f9de:	005b      	lsls	r3, r3, #1
 800f9e0:	4413      	add	r3, r2
 800f9e2:	00db      	lsls	r3, r3, #3
 800f9e4:	440b      	add	r3, r1
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f7f8 fedb 	bl	80087a4 <pbuf_free>
      }
      arp_table[i].q = p;
 800f9ee:	7c7a      	ldrb	r2, [r7, #17]
 800f9f0:	490d      	ldr	r1, [pc, #52]	; (800fa28 <etharp_query+0x268>)
 800f9f2:	4613      	mov	r3, r2
 800f9f4:	005b      	lsls	r3, r3, #1
 800f9f6:	4413      	add	r3, r2
 800f9f8:	00db      	lsls	r3, r3, #3
 800f9fa:	440b      	add	r3, r1
 800f9fc:	69fa      	ldr	r2, [r7, #28]
 800f9fe:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800fa00:	2300      	movs	r3, #0
 800fa02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa06:	e002      	b.n	800fa0e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800fa08:	23ff      	movs	r3, #255	; 0xff
 800fa0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800fa0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	3728      	adds	r7, #40	; 0x28
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}
 800fa1a:	bf00      	nop
 800fa1c:	08014b88 	.word	0x08014b88
 800fa20:	08014d34 	.word	0x08014d34
 800fa24:	08014c00 	.word	0x08014c00
 800fa28:	2000bc8c 	.word	0x2000bc8c
 800fa2c:	08014d44 	.word	0x08014d44
 800fa30:	08014d28 	.word	0x08014d28
 800fa34:	2000bd7c 	.word	0x2000bd7c
 800fa38:	08014d6c 	.word	0x08014d6c

0800fa3c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b08a      	sub	sp, #40	; 0x28
 800fa40:	af02      	add	r7, sp, #8
 800fa42:	60f8      	str	r0, [r7, #12]
 800fa44:	60b9      	str	r1, [r7, #8]
 800fa46:	607a      	str	r2, [r7, #4]
 800fa48:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d106      	bne.n	800fa62 <etharp_raw+0x26>
 800fa54:	4b3a      	ldr	r3, [pc, #232]	; (800fb40 <etharp_raw+0x104>)
 800fa56:	f240 4257 	movw	r2, #1111	; 0x457
 800fa5a:	493a      	ldr	r1, [pc, #232]	; (800fb44 <etharp_raw+0x108>)
 800fa5c:	483a      	ldr	r0, [pc, #232]	; (800fb48 <etharp_raw+0x10c>)
 800fa5e:	f001 fc8b 	bl	8011378 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800fa62:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fa66:	211c      	movs	r1, #28
 800fa68:	200e      	movs	r0, #14
 800fa6a:	f7f8 fbb7 	bl	80081dc <pbuf_alloc>
 800fa6e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800fa70:	69bb      	ldr	r3, [r7, #24]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d102      	bne.n	800fa7c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800fa76:	f04f 33ff 	mov.w	r3, #4294967295
 800fa7a:	e05d      	b.n	800fb38 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800fa7c:	69bb      	ldr	r3, [r7, #24]
 800fa7e:	895b      	ldrh	r3, [r3, #10]
 800fa80:	2b1b      	cmp	r3, #27
 800fa82:	d806      	bhi.n	800fa92 <etharp_raw+0x56>
 800fa84:	4b2e      	ldr	r3, [pc, #184]	; (800fb40 <etharp_raw+0x104>)
 800fa86:	f240 4262 	movw	r2, #1122	; 0x462
 800fa8a:	4930      	ldr	r1, [pc, #192]	; (800fb4c <etharp_raw+0x110>)
 800fa8c:	482e      	ldr	r0, [pc, #184]	; (800fb48 <etharp_raw+0x10c>)
 800fa8e:	f001 fc73 	bl	8011378 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800fa92:	69bb      	ldr	r3, [r7, #24]
 800fa94:	685b      	ldr	r3, [r3, #4]
 800fa96:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800fa98:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	f7f7 fb24 	bl	80070e8 <lwip_htons>
 800faa0:	4603      	mov	r3, r0
 800faa2:	461a      	mov	r2, r3
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800faae:	2b06      	cmp	r3, #6
 800fab0:	d006      	beq.n	800fac0 <etharp_raw+0x84>
 800fab2:	4b23      	ldr	r3, [pc, #140]	; (800fb40 <etharp_raw+0x104>)
 800fab4:	f240 4269 	movw	r2, #1129	; 0x469
 800fab8:	4925      	ldr	r1, [pc, #148]	; (800fb50 <etharp_raw+0x114>)
 800faba:	4823      	ldr	r0, [pc, #140]	; (800fb48 <etharp_raw+0x10c>)
 800fabc:	f001 fc5c 	bl	8011378 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	3308      	adds	r3, #8
 800fac4:	2206      	movs	r2, #6
 800fac6:	6839      	ldr	r1, [r7, #0]
 800fac8:	4618      	mov	r0, r3
 800faca:	f001 fc25 	bl	8011318 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	3312      	adds	r3, #18
 800fad2:	2206      	movs	r2, #6
 800fad4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fad6:	4618      	mov	r0, r3
 800fad8:	f001 fc1e 	bl	8011318 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800fadc:	697b      	ldr	r3, [r7, #20]
 800fade:	330e      	adds	r3, #14
 800fae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fae2:	6812      	ldr	r2, [r2, #0]
 800fae4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800fae6:	697b      	ldr	r3, [r7, #20]
 800fae8:	3318      	adds	r3, #24
 800faea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800faec:	6812      	ldr	r2, [r2, #0]
 800faee:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800faf0:	697b      	ldr	r3, [r7, #20]
 800faf2:	2200      	movs	r2, #0
 800faf4:	701a      	strb	r2, [r3, #0]
 800faf6:	2200      	movs	r2, #0
 800faf8:	f042 0201 	orr.w	r2, r2, #1
 800fafc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800fafe:	697b      	ldr	r3, [r7, #20]
 800fb00:	2200      	movs	r2, #0
 800fb02:	f042 0208 	orr.w	r2, r2, #8
 800fb06:	709a      	strb	r2, [r3, #2]
 800fb08:	2200      	movs	r2, #0
 800fb0a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800fb0c:	697b      	ldr	r3, [r7, #20]
 800fb0e:	2206      	movs	r2, #6
 800fb10:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	2204      	movs	r2, #4
 800fb16:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800fb18:	f640 0306 	movw	r3, #2054	; 0x806
 800fb1c:	9300      	str	r3, [sp, #0]
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	68ba      	ldr	r2, [r7, #8]
 800fb22:	69b9      	ldr	r1, [r7, #24]
 800fb24:	68f8      	ldr	r0, [r7, #12]
 800fb26:	f001 fb7b 	bl	8011220 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800fb2a:	69b8      	ldr	r0, [r7, #24]
 800fb2c:	f7f8 fe3a 	bl	80087a4 <pbuf_free>
  p = NULL;
 800fb30:	2300      	movs	r3, #0
 800fb32:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800fb34:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3720      	adds	r7, #32
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}
 800fb40:	08014b88 	.word	0x08014b88
 800fb44:	08014cd8 	.word	0x08014cd8
 800fb48:	08014c00 	.word	0x08014c00
 800fb4c:	08014d88 	.word	0x08014d88
 800fb50:	08014dbc 	.word	0x08014dbc

0800fb54 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b088      	sub	sp, #32
 800fb58:	af04      	add	r7, sp, #16
 800fb5a:	60f8      	str	r0, [r7, #12]
 800fb5c:	60b9      	str	r1, [r7, #8]
 800fb5e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fb70:	2201      	movs	r2, #1
 800fb72:	9203      	str	r2, [sp, #12]
 800fb74:	68ba      	ldr	r2, [r7, #8]
 800fb76:	9202      	str	r2, [sp, #8]
 800fb78:	4a06      	ldr	r2, [pc, #24]	; (800fb94 <etharp_request_dst+0x40>)
 800fb7a:	9201      	str	r2, [sp, #4]
 800fb7c:	9300      	str	r3, [sp, #0]
 800fb7e:	4603      	mov	r3, r0
 800fb80:	687a      	ldr	r2, [r7, #4]
 800fb82:	68f8      	ldr	r0, [r7, #12]
 800fb84:	f7ff ff5a 	bl	800fa3c <etharp_raw>
 800fb88:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	3710      	adds	r7, #16
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	bd80      	pop	{r7, pc}
 800fb92:	bf00      	nop
 800fb94:	0801534c 	.word	0x0801534c

0800fb98 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800fba2:	4a05      	ldr	r2, [pc, #20]	; (800fbb8 <etharp_request+0x20>)
 800fba4:	6839      	ldr	r1, [r7, #0]
 800fba6:	6878      	ldr	r0, [r7, #4]
 800fba8:	f7ff ffd4 	bl	800fb54 <etharp_request_dst>
 800fbac:	4603      	mov	r3, r0
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	3708      	adds	r7, #8
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}
 800fbb6:	bf00      	nop
 800fbb8:	08015344 	.word	0x08015344

0800fbbc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b08e      	sub	sp, #56	; 0x38
 800fbc0:	af04      	add	r7, sp, #16
 800fbc2:	6078      	str	r0, [r7, #4]
 800fbc4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800fbc6:	4b79      	ldr	r3, [pc, #484]	; (800fdac <icmp_input+0x1f0>)
 800fbc8:	689b      	ldr	r3, [r3, #8]
 800fbca:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800fbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbce:	781b      	ldrb	r3, [r3, #0]
 800fbd0:	f003 030f 	and.w	r3, r3, #15
 800fbd4:	b2db      	uxtb	r3, r3
 800fbd6:	009b      	lsls	r3, r3, #2
 800fbd8:	b2db      	uxtb	r3, r3
 800fbda:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800fbdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fbde:	2b13      	cmp	r3, #19
 800fbe0:	f240 80cd 	bls.w	800fd7e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	895b      	ldrh	r3, [r3, #10]
 800fbe8:	2b03      	cmp	r3, #3
 800fbea:	f240 80ca 	bls.w	800fd82 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	685b      	ldr	r3, [r3, #4]
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800fbf8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	f000 80b7 	beq.w	800fd70 <icmp_input+0x1b4>
 800fc02:	2b08      	cmp	r3, #8
 800fc04:	f040 80b7 	bne.w	800fd76 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800fc08:	4b69      	ldr	r3, [pc, #420]	; (800fdb0 <icmp_input+0x1f4>)
 800fc0a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fc0c:	4b67      	ldr	r3, [pc, #412]	; (800fdac <icmp_input+0x1f0>)
 800fc0e:	695b      	ldr	r3, [r3, #20]
 800fc10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fc14:	2be0      	cmp	r3, #224	; 0xe0
 800fc16:	f000 80bb 	beq.w	800fd90 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800fc1a:	4b64      	ldr	r3, [pc, #400]	; (800fdac <icmp_input+0x1f0>)
 800fc1c:	695b      	ldr	r3, [r3, #20]
 800fc1e:	4a63      	ldr	r2, [pc, #396]	; (800fdac <icmp_input+0x1f0>)
 800fc20:	6812      	ldr	r2, [r2, #0]
 800fc22:	4611      	mov	r1, r2
 800fc24:	4618      	mov	r0, r3
 800fc26:	f000 fbed 	bl	8010404 <ip4_addr_isbroadcast_u32>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	f040 80b1 	bne.w	800fd94 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	891b      	ldrh	r3, [r3, #8]
 800fc36:	2b07      	cmp	r3, #7
 800fc38:	f240 80a5 	bls.w	800fd86 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fc3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc3e:	330e      	adds	r3, #14
 800fc40:	4619      	mov	r1, r3
 800fc42:	6878      	ldr	r0, [r7, #4]
 800fc44:	f7f8 fd18 	bl	8008678 <pbuf_add_header>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d04b      	beq.n	800fce6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	891a      	ldrh	r2, [r3, #8]
 800fc52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc54:	4413      	add	r3, r2
 800fc56:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	891b      	ldrh	r3, [r3, #8]
 800fc5c:	8b7a      	ldrh	r2, [r7, #26]
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	f0c0 809a 	bcc.w	800fd98 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800fc64:	8b7b      	ldrh	r3, [r7, #26]
 800fc66:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	200e      	movs	r0, #14
 800fc6e:	f7f8 fab5 	bl	80081dc <pbuf_alloc>
 800fc72:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800fc74:	697b      	ldr	r3, [r7, #20]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	f000 8090 	beq.w	800fd9c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	895b      	ldrh	r3, [r3, #10]
 800fc80:	461a      	mov	r2, r3
 800fc82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc84:	3308      	adds	r3, #8
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d203      	bcs.n	800fc92 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800fc8a:	6978      	ldr	r0, [r7, #20]
 800fc8c:	f7f8 fd8a 	bl	80087a4 <pbuf_free>
          goto icmperr;
 800fc90:	e085      	b.n	800fd9e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	685b      	ldr	r3, [r3, #4]
 800fc96:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fc98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f001 fb3c 	bl	8011318 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800fca0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fca2:	4619      	mov	r1, r3
 800fca4:	6978      	ldr	r0, [r7, #20]
 800fca6:	f7f8 fcf7 	bl	8008698 <pbuf_remove_header>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d009      	beq.n	800fcc4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800fcb0:	4b40      	ldr	r3, [pc, #256]	; (800fdb4 <icmp_input+0x1f8>)
 800fcb2:	22b6      	movs	r2, #182	; 0xb6
 800fcb4:	4940      	ldr	r1, [pc, #256]	; (800fdb8 <icmp_input+0x1fc>)
 800fcb6:	4841      	ldr	r0, [pc, #260]	; (800fdbc <icmp_input+0x200>)
 800fcb8:	f001 fb5e 	bl	8011378 <iprintf>
          pbuf_free(r);
 800fcbc:	6978      	ldr	r0, [r7, #20]
 800fcbe:	f7f8 fd71 	bl	80087a4 <pbuf_free>
          goto icmperr;
 800fcc2:	e06c      	b.n	800fd9e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800fcc4:	6879      	ldr	r1, [r7, #4]
 800fcc6:	6978      	ldr	r0, [r7, #20]
 800fcc8:	f7f8 fe94 	bl	80089f4 <pbuf_copy>
 800fccc:	4603      	mov	r3, r0
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d003      	beq.n	800fcda <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800fcd2:	6978      	ldr	r0, [r7, #20]
 800fcd4:	f7f8 fd66 	bl	80087a4 <pbuf_free>
          goto icmperr;
 800fcd8:	e061      	b.n	800fd9e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f7f8 fd62 	bl	80087a4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800fce0:	697b      	ldr	r3, [r7, #20]
 800fce2:	607b      	str	r3, [r7, #4]
 800fce4:	e00f      	b.n	800fd06 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fce6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fce8:	330e      	adds	r3, #14
 800fcea:	4619      	mov	r1, r3
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	f7f8 fcd3 	bl	8008698 <pbuf_remove_header>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d006      	beq.n	800fd06 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800fcf8:	4b2e      	ldr	r3, [pc, #184]	; (800fdb4 <icmp_input+0x1f8>)
 800fcfa:	22c7      	movs	r2, #199	; 0xc7
 800fcfc:	4930      	ldr	r1, [pc, #192]	; (800fdc0 <icmp_input+0x204>)
 800fcfe:	482f      	ldr	r0, [pc, #188]	; (800fdbc <icmp_input+0x200>)
 800fd00:	f001 fb3a 	bl	8011378 <iprintf>
          goto icmperr;
 800fd04:	e04b      	b.n	800fd9e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	685b      	ldr	r3, [r3, #4]
 800fd0a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800fd0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd0e:	4619      	mov	r1, r3
 800fd10:	6878      	ldr	r0, [r7, #4]
 800fd12:	f7f8 fcb1 	bl	8008678 <pbuf_add_header>
 800fd16:	4603      	mov	r3, r0
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d12b      	bne.n	800fd74 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	685b      	ldr	r3, [r3, #4]
 800fd20:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800fd22:	69fb      	ldr	r3, [r7, #28]
 800fd24:	681a      	ldr	r2, [r3, #0]
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800fd2a:	4b20      	ldr	r3, [pc, #128]	; (800fdac <icmp_input+0x1f0>)
 800fd2c:	691a      	ldr	r2, [r3, #16]
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800fd32:	693b      	ldr	r3, [r7, #16]
 800fd34:	2200      	movs	r2, #0
 800fd36:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800fd38:	693b      	ldr	r3, [r7, #16]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	709a      	strb	r2, [r3, #2]
 800fd3e:	2200      	movs	r2, #0
 800fd40:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	22ff      	movs	r2, #255	; 0xff
 800fd46:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	729a      	strb	r2, [r3, #10]
 800fd4e:	2200      	movs	r2, #0
 800fd50:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	9302      	str	r3, [sp, #8]
 800fd56:	2301      	movs	r3, #1
 800fd58:	9301      	str	r3, [sp, #4]
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	9300      	str	r3, [sp, #0]
 800fd5e:	23ff      	movs	r3, #255	; 0xff
 800fd60:	2200      	movs	r2, #0
 800fd62:	69f9      	ldr	r1, [r7, #28]
 800fd64:	6878      	ldr	r0, [r7, #4]
 800fd66:	f000 fa75 	bl	8010254 <ip4_output_if>
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800fd6e:	e001      	b.n	800fd74 <icmp_input+0x1b8>
      break;
 800fd70:	bf00      	nop
 800fd72:	e000      	b.n	800fd76 <icmp_input+0x1ba>
      break;
 800fd74:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800fd76:	6878      	ldr	r0, [r7, #4]
 800fd78:	f7f8 fd14 	bl	80087a4 <pbuf_free>
  return;
 800fd7c:	e013      	b.n	800fda6 <icmp_input+0x1ea>
    goto lenerr;
 800fd7e:	bf00      	nop
 800fd80:	e002      	b.n	800fd88 <icmp_input+0x1cc>
    goto lenerr;
 800fd82:	bf00      	nop
 800fd84:	e000      	b.n	800fd88 <icmp_input+0x1cc>
        goto lenerr;
 800fd86:	bf00      	nop
lenerr:
  pbuf_free(p);
 800fd88:	6878      	ldr	r0, [r7, #4]
 800fd8a:	f7f8 fd0b 	bl	80087a4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fd8e:	e00a      	b.n	800fda6 <icmp_input+0x1ea>
        goto icmperr;
 800fd90:	bf00      	nop
 800fd92:	e004      	b.n	800fd9e <icmp_input+0x1e2>
        goto icmperr;
 800fd94:	bf00      	nop
 800fd96:	e002      	b.n	800fd9e <icmp_input+0x1e2>
          goto icmperr;
 800fd98:	bf00      	nop
 800fd9a:	e000      	b.n	800fd9e <icmp_input+0x1e2>
          goto icmperr;
 800fd9c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f7f8 fd00 	bl	80087a4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fda4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800fda6:	3728      	adds	r7, #40	; 0x28
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}
 800fdac:	200064fc 	.word	0x200064fc
 800fdb0:	20006510 	.word	0x20006510
 800fdb4:	08014e00 	.word	0x08014e00
 800fdb8:	08014e38 	.word	0x08014e38
 800fdbc:	08014e70 	.word	0x08014e70
 800fdc0:	08014e98 	.word	0x08014e98

0800fdc4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b082      	sub	sp, #8
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
 800fdcc:	460b      	mov	r3, r1
 800fdce:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800fdd0:	78fb      	ldrb	r3, [r7, #3]
 800fdd2:	461a      	mov	r2, r3
 800fdd4:	2103      	movs	r1, #3
 800fdd6:	6878      	ldr	r0, [r7, #4]
 800fdd8:	f000 f814 	bl	800fe04 <icmp_send_response>
}
 800fddc:	bf00      	nop
 800fdde:	3708      	adds	r7, #8
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}

0800fde4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b082      	sub	sp, #8
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	460b      	mov	r3, r1
 800fdee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800fdf0:	78fb      	ldrb	r3, [r7, #3]
 800fdf2:	461a      	mov	r2, r3
 800fdf4:	210b      	movs	r1, #11
 800fdf6:	6878      	ldr	r0, [r7, #4]
 800fdf8:	f000 f804 	bl	800fe04 <icmp_send_response>
}
 800fdfc:	bf00      	nop
 800fdfe:	3708      	adds	r7, #8
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}

0800fe04 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b08c      	sub	sp, #48	; 0x30
 800fe08:	af04      	add	r7, sp, #16
 800fe0a:	6078      	str	r0, [r7, #4]
 800fe0c:	460b      	mov	r3, r1
 800fe0e:	70fb      	strb	r3, [r7, #3]
 800fe10:	4613      	mov	r3, r2
 800fe12:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800fe14:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fe18:	2124      	movs	r1, #36	; 0x24
 800fe1a:	2022      	movs	r0, #34	; 0x22
 800fe1c:	f7f8 f9de 	bl	80081dc <pbuf_alloc>
 800fe20:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800fe22:	69fb      	ldr	r3, [r7, #28]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d04c      	beq.n	800fec2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800fe28:	69fb      	ldr	r3, [r7, #28]
 800fe2a:	895b      	ldrh	r3, [r3, #10]
 800fe2c:	2b23      	cmp	r3, #35	; 0x23
 800fe2e:	d806      	bhi.n	800fe3e <icmp_send_response+0x3a>
 800fe30:	4b26      	ldr	r3, [pc, #152]	; (800fecc <icmp_send_response+0xc8>)
 800fe32:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800fe36:	4926      	ldr	r1, [pc, #152]	; (800fed0 <icmp_send_response+0xcc>)
 800fe38:	4826      	ldr	r0, [pc, #152]	; (800fed4 <icmp_send_response+0xd0>)
 800fe3a:	f001 fa9d 	bl	8011378 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	685b      	ldr	r3, [r3, #4]
 800fe42:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800fe44:	69fb      	ldr	r3, [r7, #28]
 800fe46:	685b      	ldr	r3, [r3, #4]
 800fe48:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	78fa      	ldrb	r2, [r7, #3]
 800fe4e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	78ba      	ldrb	r2, [r7, #2]
 800fe54:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	2200      	movs	r2, #0
 800fe5a:	711a      	strb	r2, [r3, #4]
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800fe60:	697b      	ldr	r3, [r7, #20]
 800fe62:	2200      	movs	r2, #0
 800fe64:	719a      	strb	r2, [r3, #6]
 800fe66:	2200      	movs	r2, #0
 800fe68:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800fe6a:	69fb      	ldr	r3, [r7, #28]
 800fe6c:	685b      	ldr	r3, [r3, #4]
 800fe6e:	f103 0008 	add.w	r0, r3, #8
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	685b      	ldr	r3, [r3, #4]
 800fe76:	221c      	movs	r2, #28
 800fe78:	4619      	mov	r1, r3
 800fe7a:	f001 fa4d 	bl	8011318 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800fe7e:	69bb      	ldr	r3, [r7, #24]
 800fe80:	68db      	ldr	r3, [r3, #12]
 800fe82:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800fe84:	f107 030c 	add.w	r3, r7, #12
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f000 f825 	bl	800fed8 <ip4_route>
 800fe8e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d011      	beq.n	800feba <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	2200      	movs	r2, #0
 800fe9a:	709a      	strb	r2, [r3, #2]
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800fea0:	f107 020c 	add.w	r2, r7, #12
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	9302      	str	r3, [sp, #8]
 800fea8:	2301      	movs	r3, #1
 800feaa:	9301      	str	r3, [sp, #4]
 800feac:	2300      	movs	r3, #0
 800feae:	9300      	str	r3, [sp, #0]
 800feb0:	23ff      	movs	r3, #255	; 0xff
 800feb2:	2100      	movs	r1, #0
 800feb4:	69f8      	ldr	r0, [r7, #28]
 800feb6:	f000 f9cd 	bl	8010254 <ip4_output_if>
  }
  pbuf_free(q);
 800feba:	69f8      	ldr	r0, [r7, #28]
 800febc:	f7f8 fc72 	bl	80087a4 <pbuf_free>
 800fec0:	e000      	b.n	800fec4 <icmp_send_response+0xc0>
    return;
 800fec2:	bf00      	nop
}
 800fec4:	3720      	adds	r7, #32
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}
 800feca:	bf00      	nop
 800fecc:	08014e00 	.word	0x08014e00
 800fed0:	08014ecc 	.word	0x08014ecc
 800fed4:	08014e70 	.word	0x08014e70

0800fed8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800fed8:	b480      	push	{r7}
 800feda:	b085      	sub	sp, #20
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800fee0:	4b33      	ldr	r3, [pc, #204]	; (800ffb0 <ip4_route+0xd8>)
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	60fb      	str	r3, [r7, #12]
 800fee6:	e036      	b.n	800ff56 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800feee:	f003 0301 	and.w	r3, r3, #1
 800fef2:	b2db      	uxtb	r3, r3
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d02b      	beq.n	800ff50 <ip4_route+0x78>
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fefe:	089b      	lsrs	r3, r3, #2
 800ff00:	f003 0301 	and.w	r3, r3, #1
 800ff04:	b2db      	uxtb	r3, r3
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d022      	beq.n	800ff50 <ip4_route+0x78>
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	3304      	adds	r3, #4
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d01d      	beq.n	800ff50 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681a      	ldr	r2, [r3, #0]
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	3304      	adds	r3, #4
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	405a      	eors	r2, r3
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	3308      	adds	r3, #8
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	4013      	ands	r3, r2
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d101      	bne.n	800ff30 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	e038      	b.n	800ffa2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff36:	f003 0302 	and.w	r3, r3, #2
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d108      	bne.n	800ff50 <ip4_route+0x78>
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681a      	ldr	r2, [r3, #0]
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	330c      	adds	r3, #12
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	429a      	cmp	r2, r3
 800ff4a:	d101      	bne.n	800ff50 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	e028      	b.n	800ffa2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	60fb      	str	r3, [r7, #12]
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d1c5      	bne.n	800fee8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ff5c:	4b15      	ldr	r3, [pc, #84]	; (800ffb4 <ip4_route+0xdc>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d01a      	beq.n	800ff9a <ip4_route+0xc2>
 800ff64:	4b13      	ldr	r3, [pc, #76]	; (800ffb4 <ip4_route+0xdc>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff6c:	f003 0301 	and.w	r3, r3, #1
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d012      	beq.n	800ff9a <ip4_route+0xc2>
 800ff74:	4b0f      	ldr	r3, [pc, #60]	; (800ffb4 <ip4_route+0xdc>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff7c:	f003 0304 	and.w	r3, r3, #4
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d00a      	beq.n	800ff9a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ff84:	4b0b      	ldr	r3, [pc, #44]	; (800ffb4 <ip4_route+0xdc>)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	3304      	adds	r3, #4
 800ff8a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d004      	beq.n	800ff9a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	b2db      	uxtb	r3, r3
 800ff96:	2b7f      	cmp	r3, #127	; 0x7f
 800ff98:	d101      	bne.n	800ff9e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	e001      	b.n	800ffa2 <ip4_route+0xca>
  }

  return netif_default;
 800ff9e:	4b05      	ldr	r3, [pc, #20]	; (800ffb4 <ip4_route+0xdc>)
 800ffa0:	681b      	ldr	r3, [r3, #0]
}
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	3714      	adds	r7, #20
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffac:	4770      	bx	lr
 800ffae:	bf00      	nop
 800ffb0:	2000bc20 	.word	0x2000bc20
 800ffb4:	2000bc24 	.word	0x2000bc24

0800ffb8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b082      	sub	sp, #8
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ffc6:	f003 0301 	and.w	r3, r3, #1
 800ffca:	b2db      	uxtb	r3, r3
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d016      	beq.n	800fffe <ip4_input_accept+0x46>
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	3304      	adds	r3, #4
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d011      	beq.n	800fffe <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ffda:	4b0b      	ldr	r3, [pc, #44]	; (8010008 <ip4_input_accept+0x50>)
 800ffdc:	695a      	ldr	r2, [r3, #20]
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	3304      	adds	r3, #4
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	429a      	cmp	r2, r3
 800ffe6:	d008      	beq.n	800fffa <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ffe8:	4b07      	ldr	r3, [pc, #28]	; (8010008 <ip4_input_accept+0x50>)
 800ffea:	695b      	ldr	r3, [r3, #20]
 800ffec:	6879      	ldr	r1, [r7, #4]
 800ffee:	4618      	mov	r0, r3
 800fff0:	f000 fa08 	bl	8010404 <ip4_addr_isbroadcast_u32>
 800fff4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d001      	beq.n	800fffe <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800fffa:	2301      	movs	r3, #1
 800fffc:	e000      	b.n	8010000 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800fffe:	2300      	movs	r3, #0
}
 8010000:	4618      	mov	r0, r3
 8010002:	3708      	adds	r7, #8
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}
 8010008:	200064fc 	.word	0x200064fc

0801000c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b086      	sub	sp, #24
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
 8010014:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	685b      	ldr	r3, [r3, #4]
 801001a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	781b      	ldrb	r3, [r3, #0]
 8010020:	091b      	lsrs	r3, r3, #4
 8010022:	b2db      	uxtb	r3, r3
 8010024:	2b04      	cmp	r3, #4
 8010026:	d004      	beq.n	8010032 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	f7f8 fbbb 	bl	80087a4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801002e:	2300      	movs	r3, #0
 8010030:	e107      	b.n	8010242 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8010032:	697b      	ldr	r3, [r7, #20]
 8010034:	781b      	ldrb	r3, [r3, #0]
 8010036:	f003 030f 	and.w	r3, r3, #15
 801003a:	b2db      	uxtb	r3, r3
 801003c:	009b      	lsls	r3, r3, #2
 801003e:	b2db      	uxtb	r3, r3
 8010040:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	885b      	ldrh	r3, [r3, #2]
 8010046:	b29b      	uxth	r3, r3
 8010048:	4618      	mov	r0, r3
 801004a:	f7f7 f84d 	bl	80070e8 <lwip_htons>
 801004e:	4603      	mov	r3, r0
 8010050:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	891b      	ldrh	r3, [r3, #8]
 8010056:	89ba      	ldrh	r2, [r7, #12]
 8010058:	429a      	cmp	r2, r3
 801005a:	d204      	bcs.n	8010066 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801005c:	89bb      	ldrh	r3, [r7, #12]
 801005e:	4619      	mov	r1, r3
 8010060:	6878      	ldr	r0, [r7, #4]
 8010062:	f7f8 fa19 	bl	8008498 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	895b      	ldrh	r3, [r3, #10]
 801006a:	89fa      	ldrh	r2, [r7, #14]
 801006c:	429a      	cmp	r2, r3
 801006e:	d807      	bhi.n	8010080 <ip4_input+0x74>
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	891b      	ldrh	r3, [r3, #8]
 8010074:	89ba      	ldrh	r2, [r7, #12]
 8010076:	429a      	cmp	r2, r3
 8010078:	d802      	bhi.n	8010080 <ip4_input+0x74>
 801007a:	89fb      	ldrh	r3, [r7, #14]
 801007c:	2b13      	cmp	r3, #19
 801007e:	d804      	bhi.n	801008a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010080:	6878      	ldr	r0, [r7, #4]
 8010082:	f7f8 fb8f 	bl	80087a4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8010086:	2300      	movs	r3, #0
 8010088:	e0db      	b.n	8010242 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801008a:	697b      	ldr	r3, [r7, #20]
 801008c:	691b      	ldr	r3, [r3, #16]
 801008e:	4a6f      	ldr	r2, [pc, #444]	; (801024c <ip4_input+0x240>)
 8010090:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	68db      	ldr	r3, [r3, #12]
 8010096:	4a6d      	ldr	r2, [pc, #436]	; (801024c <ip4_input+0x240>)
 8010098:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801009a:	4b6c      	ldr	r3, [pc, #432]	; (801024c <ip4_input+0x240>)
 801009c:	695b      	ldr	r3, [r3, #20]
 801009e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80100a2:	2be0      	cmp	r3, #224	; 0xe0
 80100a4:	d112      	bne.n	80100cc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80100ac:	f003 0301 	and.w	r3, r3, #1
 80100b0:	b2db      	uxtb	r3, r3
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d007      	beq.n	80100c6 <ip4_input+0xba>
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	3304      	adds	r3, #4
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d002      	beq.n	80100c6 <ip4_input+0xba>
      netif = inp;
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	613b      	str	r3, [r7, #16]
 80100c4:	e02a      	b.n	801011c <ip4_input+0x110>
    } else {
      netif = NULL;
 80100c6:	2300      	movs	r3, #0
 80100c8:	613b      	str	r3, [r7, #16]
 80100ca:	e027      	b.n	801011c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80100cc:	6838      	ldr	r0, [r7, #0]
 80100ce:	f7ff ff73 	bl	800ffb8 <ip4_input_accept>
 80100d2:	4603      	mov	r3, r0
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d002      	beq.n	80100de <ip4_input+0xd2>
      netif = inp;
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	613b      	str	r3, [r7, #16]
 80100dc:	e01e      	b.n	801011c <ip4_input+0x110>
    } else {
      netif = NULL;
 80100de:	2300      	movs	r3, #0
 80100e0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80100e2:	4b5a      	ldr	r3, [pc, #360]	; (801024c <ip4_input+0x240>)
 80100e4:	695b      	ldr	r3, [r3, #20]
 80100e6:	b2db      	uxtb	r3, r3
 80100e8:	2b7f      	cmp	r3, #127	; 0x7f
 80100ea:	d017      	beq.n	801011c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80100ec:	4b58      	ldr	r3, [pc, #352]	; (8010250 <ip4_input+0x244>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	613b      	str	r3, [r7, #16]
 80100f2:	e00e      	b.n	8010112 <ip4_input+0x106>
          if (netif == inp) {
 80100f4:	693a      	ldr	r2, [r7, #16]
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	429a      	cmp	r2, r3
 80100fa:	d006      	beq.n	801010a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80100fc:	6938      	ldr	r0, [r7, #16]
 80100fe:	f7ff ff5b 	bl	800ffb8 <ip4_input_accept>
 8010102:	4603      	mov	r3, r0
 8010104:	2b00      	cmp	r3, #0
 8010106:	d108      	bne.n	801011a <ip4_input+0x10e>
 8010108:	e000      	b.n	801010c <ip4_input+0x100>
            continue;
 801010a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801010c:	693b      	ldr	r3, [r7, #16]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	613b      	str	r3, [r7, #16]
 8010112:	693b      	ldr	r3, [r7, #16]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d1ed      	bne.n	80100f4 <ip4_input+0xe8>
 8010118:	e000      	b.n	801011c <ip4_input+0x110>
            break;
 801011a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801011c:	4b4b      	ldr	r3, [pc, #300]	; (801024c <ip4_input+0x240>)
 801011e:	691b      	ldr	r3, [r3, #16]
 8010120:	6839      	ldr	r1, [r7, #0]
 8010122:	4618      	mov	r0, r3
 8010124:	f000 f96e 	bl	8010404 <ip4_addr_isbroadcast_u32>
 8010128:	4603      	mov	r3, r0
 801012a:	2b00      	cmp	r3, #0
 801012c:	d105      	bne.n	801013a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801012e:	4b47      	ldr	r3, [pc, #284]	; (801024c <ip4_input+0x240>)
 8010130:	691b      	ldr	r3, [r3, #16]
 8010132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010136:	2be0      	cmp	r3, #224	; 0xe0
 8010138:	d104      	bne.n	8010144 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801013a:	6878      	ldr	r0, [r7, #4]
 801013c:	f7f8 fb32 	bl	80087a4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010140:	2300      	movs	r3, #0
 8010142:	e07e      	b.n	8010242 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010144:	693b      	ldr	r3, [r7, #16]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d104      	bne.n	8010154 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801014a:	6878      	ldr	r0, [r7, #4]
 801014c:	f7f8 fb2a 	bl	80087a4 <pbuf_free>
    return ERR_OK;
 8010150:	2300      	movs	r3, #0
 8010152:	e076      	b.n	8010242 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	88db      	ldrh	r3, [r3, #6]
 8010158:	b29b      	uxth	r3, r3
 801015a:	461a      	mov	r2, r3
 801015c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8010160:	4013      	ands	r3, r2
 8010162:	2b00      	cmp	r3, #0
 8010164:	d00b      	beq.n	801017e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8010166:	6878      	ldr	r0, [r7, #4]
 8010168:	f000 fc92 	bl	8010a90 <ip4_reass>
 801016c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d101      	bne.n	8010178 <ip4_input+0x16c>
      return ERR_OK;
 8010174:	2300      	movs	r3, #0
 8010176:	e064      	b.n	8010242 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	685b      	ldr	r3, [r3, #4]
 801017c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801017e:	4a33      	ldr	r2, [pc, #204]	; (801024c <ip4_input+0x240>)
 8010180:	693b      	ldr	r3, [r7, #16]
 8010182:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8010184:	4a31      	ldr	r2, [pc, #196]	; (801024c <ip4_input+0x240>)
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801018a:	4a30      	ldr	r2, [pc, #192]	; (801024c <ip4_input+0x240>)
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010190:	697b      	ldr	r3, [r7, #20]
 8010192:	781b      	ldrb	r3, [r3, #0]
 8010194:	f003 030f 	and.w	r3, r3, #15
 8010198:	b2db      	uxtb	r3, r3
 801019a:	009b      	lsls	r3, r3, #2
 801019c:	b2db      	uxtb	r3, r3
 801019e:	b29a      	uxth	r2, r3
 80101a0:	4b2a      	ldr	r3, [pc, #168]	; (801024c <ip4_input+0x240>)
 80101a2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80101a4:	89fb      	ldrh	r3, [r7, #14]
 80101a6:	4619      	mov	r1, r3
 80101a8:	6878      	ldr	r0, [r7, #4]
 80101aa:	f7f8 fa75 	bl	8008698 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80101ae:	697b      	ldr	r3, [r7, #20]
 80101b0:	7a5b      	ldrb	r3, [r3, #9]
 80101b2:	2b11      	cmp	r3, #17
 80101b4:	d006      	beq.n	80101c4 <ip4_input+0x1b8>
 80101b6:	2b11      	cmp	r3, #17
 80101b8:	dc13      	bgt.n	80101e2 <ip4_input+0x1d6>
 80101ba:	2b01      	cmp	r3, #1
 80101bc:	d00c      	beq.n	80101d8 <ip4_input+0x1cc>
 80101be:	2b06      	cmp	r3, #6
 80101c0:	d005      	beq.n	80101ce <ip4_input+0x1c2>
 80101c2:	e00e      	b.n	80101e2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80101c4:	6839      	ldr	r1, [r7, #0]
 80101c6:	6878      	ldr	r0, [r7, #4]
 80101c8:	f7fe f970 	bl	800e4ac <udp_input>
        break;
 80101cc:	e026      	b.n	801021c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80101ce:	6839      	ldr	r1, [r7, #0]
 80101d0:	6878      	ldr	r0, [r7, #4]
 80101d2:	f7fa f9b1 	bl	800a538 <tcp_input>
        break;
 80101d6:	e021      	b.n	801021c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80101d8:	6839      	ldr	r1, [r7, #0]
 80101da:	6878      	ldr	r0, [r7, #4]
 80101dc:	f7ff fcee 	bl	800fbbc <icmp_input>
        break;
 80101e0:	e01c      	b.n	801021c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80101e2:	4b1a      	ldr	r3, [pc, #104]	; (801024c <ip4_input+0x240>)
 80101e4:	695b      	ldr	r3, [r3, #20]
 80101e6:	6939      	ldr	r1, [r7, #16]
 80101e8:	4618      	mov	r0, r3
 80101ea:	f000 f90b 	bl	8010404 <ip4_addr_isbroadcast_u32>
 80101ee:	4603      	mov	r3, r0
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d10f      	bne.n	8010214 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80101f4:	4b15      	ldr	r3, [pc, #84]	; (801024c <ip4_input+0x240>)
 80101f6:	695b      	ldr	r3, [r3, #20]
 80101f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80101fc:	2be0      	cmp	r3, #224	; 0xe0
 80101fe:	d009      	beq.n	8010214 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010200:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010204:	4619      	mov	r1, r3
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f7f8 fab9 	bl	800877e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801020c:	2102      	movs	r1, #2
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	f7ff fdd8 	bl	800fdc4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010214:	6878      	ldr	r0, [r7, #4]
 8010216:	f7f8 fac5 	bl	80087a4 <pbuf_free>
        break;
 801021a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801021c:	4b0b      	ldr	r3, [pc, #44]	; (801024c <ip4_input+0x240>)
 801021e:	2200      	movs	r2, #0
 8010220:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010222:	4b0a      	ldr	r3, [pc, #40]	; (801024c <ip4_input+0x240>)
 8010224:	2200      	movs	r2, #0
 8010226:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010228:	4b08      	ldr	r3, [pc, #32]	; (801024c <ip4_input+0x240>)
 801022a:	2200      	movs	r2, #0
 801022c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801022e:	4b07      	ldr	r3, [pc, #28]	; (801024c <ip4_input+0x240>)
 8010230:	2200      	movs	r2, #0
 8010232:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010234:	4b05      	ldr	r3, [pc, #20]	; (801024c <ip4_input+0x240>)
 8010236:	2200      	movs	r2, #0
 8010238:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801023a:	4b04      	ldr	r3, [pc, #16]	; (801024c <ip4_input+0x240>)
 801023c:	2200      	movs	r2, #0
 801023e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010240:	2300      	movs	r3, #0
}
 8010242:	4618      	mov	r0, r3
 8010244:	3718      	adds	r7, #24
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}
 801024a:	bf00      	nop
 801024c:	200064fc 	.word	0x200064fc
 8010250:	2000bc20 	.word	0x2000bc20

08010254 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b08a      	sub	sp, #40	; 0x28
 8010258:	af04      	add	r7, sp, #16
 801025a:	60f8      	str	r0, [r7, #12]
 801025c:	60b9      	str	r1, [r7, #8]
 801025e:	607a      	str	r2, [r7, #4]
 8010260:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8010262:	68bb      	ldr	r3, [r7, #8]
 8010264:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d009      	beq.n	8010280 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d003      	beq.n	801027a <ip4_output_if+0x26>
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d102      	bne.n	8010280 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801027a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801027c:	3304      	adds	r3, #4
 801027e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010280:	78fa      	ldrb	r2, [r7, #3]
 8010282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010284:	9302      	str	r3, [sp, #8]
 8010286:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801028a:	9301      	str	r3, [sp, #4]
 801028c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010290:	9300      	str	r3, [sp, #0]
 8010292:	4613      	mov	r3, r2
 8010294:	687a      	ldr	r2, [r7, #4]
 8010296:	6979      	ldr	r1, [r7, #20]
 8010298:	68f8      	ldr	r0, [r7, #12]
 801029a:	f000 f805 	bl	80102a8 <ip4_output_if_src>
 801029e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80102a0:	4618      	mov	r0, r3
 80102a2:	3718      	adds	r7, #24
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd80      	pop	{r7, pc}

080102a8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b088      	sub	sp, #32
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	60f8      	str	r0, [r7, #12]
 80102b0:	60b9      	str	r1, [r7, #8]
 80102b2:	607a      	str	r2, [r7, #4]
 80102b4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	7b9b      	ldrb	r3, [r3, #14]
 80102ba:	2b01      	cmp	r3, #1
 80102bc:	d006      	beq.n	80102cc <ip4_output_if_src+0x24>
 80102be:	4b4b      	ldr	r3, [pc, #300]	; (80103ec <ip4_output_if_src+0x144>)
 80102c0:	f44f 7255 	mov.w	r2, #852	; 0x354
 80102c4:	494a      	ldr	r1, [pc, #296]	; (80103f0 <ip4_output_if_src+0x148>)
 80102c6:	484b      	ldr	r0, [pc, #300]	; (80103f4 <ip4_output_if_src+0x14c>)
 80102c8:	f001 f856 	bl	8011378 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d060      	beq.n	8010394 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80102d2:	2314      	movs	r3, #20
 80102d4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80102d6:	2114      	movs	r1, #20
 80102d8:	68f8      	ldr	r0, [r7, #12]
 80102da:	f7f8 f9cd 	bl	8008678 <pbuf_add_header>
 80102de:	4603      	mov	r3, r0
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d002      	beq.n	80102ea <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80102e4:	f06f 0301 	mvn.w	r3, #1
 80102e8:	e07c      	b.n	80103e4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	685b      	ldr	r3, [r3, #4]
 80102ee:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	895b      	ldrh	r3, [r3, #10]
 80102f4:	2b13      	cmp	r3, #19
 80102f6:	d806      	bhi.n	8010306 <ip4_output_if_src+0x5e>
 80102f8:	4b3c      	ldr	r3, [pc, #240]	; (80103ec <ip4_output_if_src+0x144>)
 80102fa:	f44f 7262 	mov.w	r2, #904	; 0x388
 80102fe:	493e      	ldr	r1, [pc, #248]	; (80103f8 <ip4_output_if_src+0x150>)
 8010300:	483c      	ldr	r0, [pc, #240]	; (80103f4 <ip4_output_if_src+0x14c>)
 8010302:	f001 f839 	bl	8011378 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010306:	69fb      	ldr	r3, [r7, #28]
 8010308:	78fa      	ldrb	r2, [r7, #3]
 801030a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801030c:	69fb      	ldr	r3, [r7, #28]
 801030e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8010312:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681a      	ldr	r2, [r3, #0]
 8010318:	69fb      	ldr	r3, [r7, #28]
 801031a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801031c:	8b7b      	ldrh	r3, [r7, #26]
 801031e:	089b      	lsrs	r3, r3, #2
 8010320:	b29b      	uxth	r3, r3
 8010322:	b2db      	uxtb	r3, r3
 8010324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010328:	b2da      	uxtb	r2, r3
 801032a:	69fb      	ldr	r3, [r7, #28]
 801032c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801032e:	69fb      	ldr	r3, [r7, #28]
 8010330:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010334:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	891b      	ldrh	r3, [r3, #8]
 801033a:	4618      	mov	r0, r3
 801033c:	f7f6 fed4 	bl	80070e8 <lwip_htons>
 8010340:	4603      	mov	r3, r0
 8010342:	461a      	mov	r2, r3
 8010344:	69fb      	ldr	r3, [r7, #28]
 8010346:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010348:	69fb      	ldr	r3, [r7, #28]
 801034a:	2200      	movs	r2, #0
 801034c:	719a      	strb	r2, [r3, #6]
 801034e:	2200      	movs	r2, #0
 8010350:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010352:	4b2a      	ldr	r3, [pc, #168]	; (80103fc <ip4_output_if_src+0x154>)
 8010354:	881b      	ldrh	r3, [r3, #0]
 8010356:	4618      	mov	r0, r3
 8010358:	f7f6 fec6 	bl	80070e8 <lwip_htons>
 801035c:	4603      	mov	r3, r0
 801035e:	461a      	mov	r2, r3
 8010360:	69fb      	ldr	r3, [r7, #28]
 8010362:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010364:	4b25      	ldr	r3, [pc, #148]	; (80103fc <ip4_output_if_src+0x154>)
 8010366:	881b      	ldrh	r3, [r3, #0]
 8010368:	3301      	adds	r3, #1
 801036a:	b29a      	uxth	r2, r3
 801036c:	4b23      	ldr	r3, [pc, #140]	; (80103fc <ip4_output_if_src+0x154>)
 801036e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d104      	bne.n	8010380 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8010376:	4b22      	ldr	r3, [pc, #136]	; (8010400 <ip4_output_if_src+0x158>)
 8010378:	681a      	ldr	r2, [r3, #0]
 801037a:	69fb      	ldr	r3, [r7, #28]
 801037c:	60da      	str	r2, [r3, #12]
 801037e:	e003      	b.n	8010388 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	681a      	ldr	r2, [r3, #0]
 8010384:	69fb      	ldr	r3, [r7, #28]
 8010386:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010388:	69fb      	ldr	r3, [r7, #28]
 801038a:	2200      	movs	r2, #0
 801038c:	729a      	strb	r2, [r3, #10]
 801038e:	2200      	movs	r2, #0
 8010390:	72da      	strb	r2, [r3, #11]
 8010392:	e00f      	b.n	80103b4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	895b      	ldrh	r3, [r3, #10]
 8010398:	2b13      	cmp	r3, #19
 801039a:	d802      	bhi.n	80103a2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801039c:	f06f 0301 	mvn.w	r3, #1
 80103a0:	e020      	b.n	80103e4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	685b      	ldr	r3, [r3, #4]
 80103a6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80103a8:	69fb      	ldr	r3, [r7, #28]
 80103aa:	691b      	ldr	r3, [r3, #16]
 80103ac:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80103ae:	f107 0314 	add.w	r3, r7, #20
 80103b2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80103b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d00c      	beq.n	80103d6 <ip4_output_if_src+0x12e>
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	891a      	ldrh	r2, [r3, #8]
 80103c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80103c4:	429a      	cmp	r2, r3
 80103c6:	d906      	bls.n	80103d6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80103c8:	687a      	ldr	r2, [r7, #4]
 80103ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80103cc:	68f8      	ldr	r0, [r7, #12]
 80103ce:	f000 fd53 	bl	8010e78 <ip4_frag>
 80103d2:	4603      	mov	r3, r0
 80103d4:	e006      	b.n	80103e4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80103d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d8:	695b      	ldr	r3, [r3, #20]
 80103da:	687a      	ldr	r2, [r7, #4]
 80103dc:	68f9      	ldr	r1, [r7, #12]
 80103de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103e0:	4798      	blx	r3
 80103e2:	4603      	mov	r3, r0
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	3720      	adds	r7, #32
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}
 80103ec:	08014ef8 	.word	0x08014ef8
 80103f0:	08014f2c 	.word	0x08014f2c
 80103f4:	08014f38 	.word	0x08014f38
 80103f8:	08014f60 	.word	0x08014f60
 80103fc:	2000bd7e 	.word	0x2000bd7e
 8010400:	08015340 	.word	0x08015340

08010404 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010404:	b480      	push	{r7}
 8010406:	b085      	sub	sp, #20
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010418:	d002      	beq.n	8010420 <ip4_addr_isbroadcast_u32+0x1c>
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d101      	bne.n	8010424 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010420:	2301      	movs	r3, #1
 8010422:	e02a      	b.n	801047a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010424:	683b      	ldr	r3, [r7, #0]
 8010426:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801042a:	f003 0302 	and.w	r3, r3, #2
 801042e:	2b00      	cmp	r3, #0
 8010430:	d101      	bne.n	8010436 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010432:	2300      	movs	r3, #0
 8010434:	e021      	b.n	801047a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	3304      	adds	r3, #4
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	687a      	ldr	r2, [r7, #4]
 801043e:	429a      	cmp	r2, r3
 8010440:	d101      	bne.n	8010446 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010442:	2300      	movs	r3, #0
 8010444:	e019      	b.n	801047a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010446:	68fa      	ldr	r2, [r7, #12]
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	3304      	adds	r3, #4
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	405a      	eors	r2, r3
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	3308      	adds	r3, #8
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	4013      	ands	r3, r2
 8010458:	2b00      	cmp	r3, #0
 801045a:	d10d      	bne.n	8010478 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	3308      	adds	r3, #8
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	43da      	mvns	r2, r3
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010468:	683b      	ldr	r3, [r7, #0]
 801046a:	3308      	adds	r3, #8
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010470:	429a      	cmp	r2, r3
 8010472:	d101      	bne.n	8010478 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010474:	2301      	movs	r3, #1
 8010476:	e000      	b.n	801047a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010478:	2300      	movs	r3, #0
  }
}
 801047a:	4618      	mov	r0, r3
 801047c:	3714      	adds	r7, #20
 801047e:	46bd      	mov	sp, r7
 8010480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010484:	4770      	bx	lr
	...

08010488 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b084      	sub	sp, #16
 801048c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801048e:	2300      	movs	r3, #0
 8010490:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010492:	4b12      	ldr	r3, [pc, #72]	; (80104dc <ip_reass_tmr+0x54>)
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010498:	e018      	b.n	80104cc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	7fdb      	ldrb	r3, [r3, #31]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d00b      	beq.n	80104ba <ip_reass_tmr+0x32>
      r->timer--;
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	7fdb      	ldrb	r3, [r3, #31]
 80104a6:	3b01      	subs	r3, #1
 80104a8:	b2da      	uxtb	r2, r3
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	60fb      	str	r3, [r7, #12]
 80104b8:	e008      	b.n	80104cc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80104c4:	68b9      	ldr	r1, [r7, #8]
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f000 f80a 	bl	80104e0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d1e3      	bne.n	801049a <ip_reass_tmr+0x12>
    }
  }
}
 80104d2:	bf00      	nop
 80104d4:	bf00      	nop
 80104d6:	3710      	adds	r7, #16
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}
 80104dc:	2000bd80 	.word	0x2000bd80

080104e0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b088      	sub	sp, #32
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
 80104e8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80104ea:	2300      	movs	r3, #0
 80104ec:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80104ee:	683a      	ldr	r2, [r7, #0]
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	429a      	cmp	r2, r3
 80104f4:	d105      	bne.n	8010502 <ip_reass_free_complete_datagram+0x22>
 80104f6:	4b45      	ldr	r3, [pc, #276]	; (801060c <ip_reass_free_complete_datagram+0x12c>)
 80104f8:	22ab      	movs	r2, #171	; 0xab
 80104fa:	4945      	ldr	r1, [pc, #276]	; (8010610 <ip_reass_free_complete_datagram+0x130>)
 80104fc:	4845      	ldr	r0, [pc, #276]	; (8010614 <ip_reass_free_complete_datagram+0x134>)
 80104fe:	f000 ff3b 	bl	8011378 <iprintf>
  if (prev != NULL) {
 8010502:	683b      	ldr	r3, [r7, #0]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d00a      	beq.n	801051e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	687a      	ldr	r2, [r7, #4]
 801050e:	429a      	cmp	r2, r3
 8010510:	d005      	beq.n	801051e <ip_reass_free_complete_datagram+0x3e>
 8010512:	4b3e      	ldr	r3, [pc, #248]	; (801060c <ip_reass_free_complete_datagram+0x12c>)
 8010514:	22ad      	movs	r2, #173	; 0xad
 8010516:	4940      	ldr	r1, [pc, #256]	; (8010618 <ip_reass_free_complete_datagram+0x138>)
 8010518:	483e      	ldr	r0, [pc, #248]	; (8010614 <ip_reass_free_complete_datagram+0x134>)
 801051a:	f000 ff2d 	bl	8011378 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	685b      	ldr	r3, [r3, #4]
 8010522:	685b      	ldr	r3, [r3, #4]
 8010524:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	889b      	ldrh	r3, [r3, #4]
 801052a:	b29b      	uxth	r3, r3
 801052c:	2b00      	cmp	r3, #0
 801052e:	d12a      	bne.n	8010586 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	685b      	ldr	r3, [r3, #4]
 8010534:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8010536:	697b      	ldr	r3, [r7, #20]
 8010538:	681a      	ldr	r2, [r3, #0]
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801053e:	69bb      	ldr	r3, [r7, #24]
 8010540:	6858      	ldr	r0, [r3, #4]
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	3308      	adds	r3, #8
 8010546:	2214      	movs	r2, #20
 8010548:	4619      	mov	r1, r3
 801054a:	f000 fee5 	bl	8011318 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801054e:	2101      	movs	r1, #1
 8010550:	69b8      	ldr	r0, [r7, #24]
 8010552:	f7ff fc47 	bl	800fde4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8010556:	69b8      	ldr	r0, [r7, #24]
 8010558:	f7f8 f9ac 	bl	80088b4 <pbuf_clen>
 801055c:	4603      	mov	r3, r0
 801055e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010560:	8bfa      	ldrh	r2, [r7, #30]
 8010562:	8a7b      	ldrh	r3, [r7, #18]
 8010564:	4413      	add	r3, r2
 8010566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801056a:	db05      	blt.n	8010578 <ip_reass_free_complete_datagram+0x98>
 801056c:	4b27      	ldr	r3, [pc, #156]	; (801060c <ip_reass_free_complete_datagram+0x12c>)
 801056e:	22bc      	movs	r2, #188	; 0xbc
 8010570:	492a      	ldr	r1, [pc, #168]	; (801061c <ip_reass_free_complete_datagram+0x13c>)
 8010572:	4828      	ldr	r0, [pc, #160]	; (8010614 <ip_reass_free_complete_datagram+0x134>)
 8010574:	f000 ff00 	bl	8011378 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010578:	8bfa      	ldrh	r2, [r7, #30]
 801057a:	8a7b      	ldrh	r3, [r7, #18]
 801057c:	4413      	add	r3, r2
 801057e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8010580:	69b8      	ldr	r0, [r7, #24]
 8010582:	f7f8 f90f 	bl	80087a4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	685b      	ldr	r3, [r3, #4]
 801058a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801058c:	e01f      	b.n	80105ce <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801058e:	69bb      	ldr	r3, [r7, #24]
 8010590:	685b      	ldr	r3, [r3, #4]
 8010592:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010594:	69bb      	ldr	r3, [r7, #24]
 8010596:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8010598:	697b      	ldr	r3, [r7, #20]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801059e:	68f8      	ldr	r0, [r7, #12]
 80105a0:	f7f8 f988 	bl	80088b4 <pbuf_clen>
 80105a4:	4603      	mov	r3, r0
 80105a6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80105a8:	8bfa      	ldrh	r2, [r7, #30]
 80105aa:	8a7b      	ldrh	r3, [r7, #18]
 80105ac:	4413      	add	r3, r2
 80105ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105b2:	db05      	blt.n	80105c0 <ip_reass_free_complete_datagram+0xe0>
 80105b4:	4b15      	ldr	r3, [pc, #84]	; (801060c <ip_reass_free_complete_datagram+0x12c>)
 80105b6:	22cc      	movs	r2, #204	; 0xcc
 80105b8:	4918      	ldr	r1, [pc, #96]	; (801061c <ip_reass_free_complete_datagram+0x13c>)
 80105ba:	4816      	ldr	r0, [pc, #88]	; (8010614 <ip_reass_free_complete_datagram+0x134>)
 80105bc:	f000 fedc 	bl	8011378 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80105c0:	8bfa      	ldrh	r2, [r7, #30]
 80105c2:	8a7b      	ldrh	r3, [r7, #18]
 80105c4:	4413      	add	r3, r2
 80105c6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80105c8:	68f8      	ldr	r0, [r7, #12]
 80105ca:	f7f8 f8eb 	bl	80087a4 <pbuf_free>
  while (p != NULL) {
 80105ce:	69bb      	ldr	r3, [r7, #24]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d1dc      	bne.n	801058e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80105d4:	6839      	ldr	r1, [r7, #0]
 80105d6:	6878      	ldr	r0, [r7, #4]
 80105d8:	f000 f8c2 	bl	8010760 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80105dc:	4b10      	ldr	r3, [pc, #64]	; (8010620 <ip_reass_free_complete_datagram+0x140>)
 80105de:	881b      	ldrh	r3, [r3, #0]
 80105e0:	8bfa      	ldrh	r2, [r7, #30]
 80105e2:	429a      	cmp	r2, r3
 80105e4:	d905      	bls.n	80105f2 <ip_reass_free_complete_datagram+0x112>
 80105e6:	4b09      	ldr	r3, [pc, #36]	; (801060c <ip_reass_free_complete_datagram+0x12c>)
 80105e8:	22d2      	movs	r2, #210	; 0xd2
 80105ea:	490e      	ldr	r1, [pc, #56]	; (8010624 <ip_reass_free_complete_datagram+0x144>)
 80105ec:	4809      	ldr	r0, [pc, #36]	; (8010614 <ip_reass_free_complete_datagram+0x134>)
 80105ee:	f000 fec3 	bl	8011378 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80105f2:	4b0b      	ldr	r3, [pc, #44]	; (8010620 <ip_reass_free_complete_datagram+0x140>)
 80105f4:	881a      	ldrh	r2, [r3, #0]
 80105f6:	8bfb      	ldrh	r3, [r7, #30]
 80105f8:	1ad3      	subs	r3, r2, r3
 80105fa:	b29a      	uxth	r2, r3
 80105fc:	4b08      	ldr	r3, [pc, #32]	; (8010620 <ip_reass_free_complete_datagram+0x140>)
 80105fe:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8010600:	8bfb      	ldrh	r3, [r7, #30]
}
 8010602:	4618      	mov	r0, r3
 8010604:	3720      	adds	r7, #32
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}
 801060a:	bf00      	nop
 801060c:	08014f90 	.word	0x08014f90
 8010610:	08014fcc 	.word	0x08014fcc
 8010614:	08014fd8 	.word	0x08014fd8
 8010618:	08015000 	.word	0x08015000
 801061c:	08015014 	.word	0x08015014
 8010620:	2000bd84 	.word	0x2000bd84
 8010624:	08015034 	.word	0x08015034

08010628 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b08a      	sub	sp, #40	; 0x28
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
 8010630:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010632:	2300      	movs	r3, #0
 8010634:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8010636:	2300      	movs	r3, #0
 8010638:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801063a:	2300      	movs	r3, #0
 801063c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801063e:	2300      	movs	r3, #0
 8010640:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010642:	2300      	movs	r3, #0
 8010644:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010646:	4b28      	ldr	r3, [pc, #160]	; (80106e8 <ip_reass_remove_oldest_datagram+0xc0>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801064c:	e030      	b.n	80106b0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801064e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010650:	695a      	ldr	r2, [r3, #20]
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	68db      	ldr	r3, [r3, #12]
 8010656:	429a      	cmp	r2, r3
 8010658:	d10c      	bne.n	8010674 <ip_reass_remove_oldest_datagram+0x4c>
 801065a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801065c:	699a      	ldr	r2, [r3, #24]
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	691b      	ldr	r3, [r3, #16]
 8010662:	429a      	cmp	r2, r3
 8010664:	d106      	bne.n	8010674 <ip_reass_remove_oldest_datagram+0x4c>
 8010666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010668:	899a      	ldrh	r2, [r3, #12]
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	889b      	ldrh	r3, [r3, #4]
 801066e:	b29b      	uxth	r3, r3
 8010670:	429a      	cmp	r2, r3
 8010672:	d014      	beq.n	801069e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	3301      	adds	r3, #1
 8010678:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801067a:	6a3b      	ldr	r3, [r7, #32]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d104      	bne.n	801068a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010682:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010684:	69fb      	ldr	r3, [r7, #28]
 8010686:	61bb      	str	r3, [r7, #24]
 8010688:	e009      	b.n	801069e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801068c:	7fda      	ldrb	r2, [r3, #31]
 801068e:	6a3b      	ldr	r3, [r7, #32]
 8010690:	7fdb      	ldrb	r3, [r3, #31]
 8010692:	429a      	cmp	r2, r3
 8010694:	d803      	bhi.n	801069e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8010696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010698:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801069a:	69fb      	ldr	r3, [r7, #28]
 801069c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801069e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d001      	beq.n	80106aa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80106a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106a8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80106aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80106b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d1cb      	bne.n	801064e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80106b6:	6a3b      	ldr	r3, [r7, #32]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d008      	beq.n	80106ce <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80106bc:	69b9      	ldr	r1, [r7, #24]
 80106be:	6a38      	ldr	r0, [r7, #32]
 80106c0:	f7ff ff0e 	bl	80104e0 <ip_reass_free_complete_datagram>
 80106c4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80106c6:	697a      	ldr	r2, [r7, #20]
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	4413      	add	r3, r2
 80106cc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80106ce:	697a      	ldr	r2, [r7, #20]
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	429a      	cmp	r2, r3
 80106d4:	da02      	bge.n	80106dc <ip_reass_remove_oldest_datagram+0xb4>
 80106d6:	693b      	ldr	r3, [r7, #16]
 80106d8:	2b01      	cmp	r3, #1
 80106da:	dcac      	bgt.n	8010636 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80106dc:	697b      	ldr	r3, [r7, #20]
}
 80106de:	4618      	mov	r0, r3
 80106e0:	3728      	adds	r7, #40	; 0x28
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bd80      	pop	{r7, pc}
 80106e6:	bf00      	nop
 80106e8:	2000bd80 	.word	0x2000bd80

080106ec <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b084      	sub	sp, #16
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
 80106f4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80106f6:	2004      	movs	r0, #4
 80106f8:	f7f7 f96e 	bl	80079d8 <memp_malloc>
 80106fc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d110      	bne.n	8010726 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010704:	6839      	ldr	r1, [r7, #0]
 8010706:	6878      	ldr	r0, [r7, #4]
 8010708:	f7ff ff8e 	bl	8010628 <ip_reass_remove_oldest_datagram>
 801070c:	4602      	mov	r2, r0
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	4293      	cmp	r3, r2
 8010712:	dc03      	bgt.n	801071c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010714:	2004      	movs	r0, #4
 8010716:	f7f7 f95f 	bl	80079d8 <memp_malloc>
 801071a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d101      	bne.n	8010726 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010722:	2300      	movs	r3, #0
 8010724:	e016      	b.n	8010754 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010726:	2220      	movs	r2, #32
 8010728:	2100      	movs	r1, #0
 801072a:	68f8      	ldr	r0, [r7, #12]
 801072c:	f000 fe1c 	bl	8011368 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	220f      	movs	r2, #15
 8010734:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010736:	4b09      	ldr	r3, [pc, #36]	; (801075c <ip_reass_enqueue_new_datagram+0x70>)
 8010738:	681a      	ldr	r2, [r3, #0]
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801073e:	4a07      	ldr	r2, [pc, #28]	; (801075c <ip_reass_enqueue_new_datagram+0x70>)
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	3308      	adds	r3, #8
 8010748:	2214      	movs	r2, #20
 801074a:	6879      	ldr	r1, [r7, #4]
 801074c:	4618      	mov	r0, r3
 801074e:	f000 fde3 	bl	8011318 <memcpy>
  return ipr;
 8010752:	68fb      	ldr	r3, [r7, #12]
}
 8010754:	4618      	mov	r0, r3
 8010756:	3710      	adds	r7, #16
 8010758:	46bd      	mov	sp, r7
 801075a:	bd80      	pop	{r7, pc}
 801075c:	2000bd80 	.word	0x2000bd80

08010760 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b082      	sub	sp, #8
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801076a:	4b10      	ldr	r3, [pc, #64]	; (80107ac <ip_reass_dequeue_datagram+0x4c>)
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	687a      	ldr	r2, [r7, #4]
 8010770:	429a      	cmp	r2, r3
 8010772:	d104      	bne.n	801077e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	4a0c      	ldr	r2, [pc, #48]	; (80107ac <ip_reass_dequeue_datagram+0x4c>)
 801077a:	6013      	str	r3, [r2, #0]
 801077c:	e00d      	b.n	801079a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d106      	bne.n	8010792 <ip_reass_dequeue_datagram+0x32>
 8010784:	4b0a      	ldr	r3, [pc, #40]	; (80107b0 <ip_reass_dequeue_datagram+0x50>)
 8010786:	f240 1245 	movw	r2, #325	; 0x145
 801078a:	490a      	ldr	r1, [pc, #40]	; (80107b4 <ip_reass_dequeue_datagram+0x54>)
 801078c:	480a      	ldr	r0, [pc, #40]	; (80107b8 <ip_reass_dequeue_datagram+0x58>)
 801078e:	f000 fdf3 	bl	8011378 <iprintf>
    prev->next = ipr->next;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	681a      	ldr	r2, [r3, #0]
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801079a:	6879      	ldr	r1, [r7, #4]
 801079c:	2004      	movs	r0, #4
 801079e:	f7f7 f98b 	bl	8007ab8 <memp_free>
}
 80107a2:	bf00      	nop
 80107a4:	3708      	adds	r7, #8
 80107a6:	46bd      	mov	sp, r7
 80107a8:	bd80      	pop	{r7, pc}
 80107aa:	bf00      	nop
 80107ac:	2000bd80 	.word	0x2000bd80
 80107b0:	08014f90 	.word	0x08014f90
 80107b4:	08015058 	.word	0x08015058
 80107b8:	08014fd8 	.word	0x08014fd8

080107bc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b08c      	sub	sp, #48	; 0x30
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	60f8      	str	r0, [r7, #12]
 80107c4:	60b9      	str	r1, [r7, #8]
 80107c6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80107c8:	2300      	movs	r3, #0
 80107ca:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80107cc:	2301      	movs	r3, #1
 80107ce:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	685b      	ldr	r3, [r3, #4]
 80107d4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80107d6:	69fb      	ldr	r3, [r7, #28]
 80107d8:	885b      	ldrh	r3, [r3, #2]
 80107da:	b29b      	uxth	r3, r3
 80107dc:	4618      	mov	r0, r3
 80107de:	f7f6 fc83 	bl	80070e8 <lwip_htons>
 80107e2:	4603      	mov	r3, r0
 80107e4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80107e6:	69fb      	ldr	r3, [r7, #28]
 80107e8:	781b      	ldrb	r3, [r3, #0]
 80107ea:	f003 030f 	and.w	r3, r3, #15
 80107ee:	b2db      	uxtb	r3, r3
 80107f0:	009b      	lsls	r3, r3, #2
 80107f2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80107f4:	7e7b      	ldrb	r3, [r7, #25]
 80107f6:	b29b      	uxth	r3, r3
 80107f8:	8b7a      	ldrh	r2, [r7, #26]
 80107fa:	429a      	cmp	r2, r3
 80107fc:	d202      	bcs.n	8010804 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80107fe:	f04f 33ff 	mov.w	r3, #4294967295
 8010802:	e135      	b.n	8010a70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010804:	7e7b      	ldrb	r3, [r7, #25]
 8010806:	b29b      	uxth	r3, r3
 8010808:	8b7a      	ldrh	r2, [r7, #26]
 801080a:	1ad3      	subs	r3, r2, r3
 801080c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801080e:	69fb      	ldr	r3, [r7, #28]
 8010810:	88db      	ldrh	r3, [r3, #6]
 8010812:	b29b      	uxth	r3, r3
 8010814:	4618      	mov	r0, r3
 8010816:	f7f6 fc67 	bl	80070e8 <lwip_htons>
 801081a:	4603      	mov	r3, r0
 801081c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010820:	b29b      	uxth	r3, r3
 8010822:	00db      	lsls	r3, r3, #3
 8010824:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010826:	68bb      	ldr	r3, [r7, #8]
 8010828:	685b      	ldr	r3, [r3, #4]
 801082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801082c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801082e:	2200      	movs	r2, #0
 8010830:	701a      	strb	r2, [r3, #0]
 8010832:	2200      	movs	r2, #0
 8010834:	705a      	strb	r2, [r3, #1]
 8010836:	2200      	movs	r2, #0
 8010838:	709a      	strb	r2, [r3, #2]
 801083a:	2200      	movs	r2, #0
 801083c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801083e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010840:	8afa      	ldrh	r2, [r7, #22]
 8010842:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010844:	8afa      	ldrh	r2, [r7, #22]
 8010846:	8b7b      	ldrh	r3, [r7, #26]
 8010848:	4413      	add	r3, r2
 801084a:	b29a      	uxth	r2, r3
 801084c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801084e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010852:	88db      	ldrh	r3, [r3, #6]
 8010854:	b29b      	uxth	r3, r3
 8010856:	8afa      	ldrh	r2, [r7, #22]
 8010858:	429a      	cmp	r2, r3
 801085a:	d902      	bls.n	8010862 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801085c:	f04f 33ff 	mov.w	r3, #4294967295
 8010860:	e106      	b.n	8010a70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	685b      	ldr	r3, [r3, #4]
 8010866:	627b      	str	r3, [r7, #36]	; 0x24
 8010868:	e068      	b.n	801093c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801086c:	685b      	ldr	r3, [r3, #4]
 801086e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010872:	889b      	ldrh	r3, [r3, #4]
 8010874:	b29a      	uxth	r2, r3
 8010876:	693b      	ldr	r3, [r7, #16]
 8010878:	889b      	ldrh	r3, [r3, #4]
 801087a:	b29b      	uxth	r3, r3
 801087c:	429a      	cmp	r2, r3
 801087e:	d235      	bcs.n	80108ec <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010884:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010888:	2b00      	cmp	r3, #0
 801088a:	d020      	beq.n	80108ce <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801088c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801088e:	889b      	ldrh	r3, [r3, #4]
 8010890:	b29a      	uxth	r2, r3
 8010892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010894:	88db      	ldrh	r3, [r3, #6]
 8010896:	b29b      	uxth	r3, r3
 8010898:	429a      	cmp	r2, r3
 801089a:	d307      	bcc.n	80108ac <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801089c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801089e:	88db      	ldrh	r3, [r3, #6]
 80108a0:	b29a      	uxth	r2, r3
 80108a2:	693b      	ldr	r3, [r7, #16]
 80108a4:	889b      	ldrh	r3, [r3, #4]
 80108a6:	b29b      	uxth	r3, r3
 80108a8:	429a      	cmp	r2, r3
 80108aa:	d902      	bls.n	80108b2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80108ac:	f04f 33ff 	mov.w	r3, #4294967295
 80108b0:	e0de      	b.n	8010a70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80108b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108b4:	68ba      	ldr	r2, [r7, #8]
 80108b6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80108b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ba:	88db      	ldrh	r3, [r3, #6]
 80108bc:	b29a      	uxth	r2, r3
 80108be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108c0:	889b      	ldrh	r3, [r3, #4]
 80108c2:	b29b      	uxth	r3, r3
 80108c4:	429a      	cmp	r2, r3
 80108c6:	d03d      	beq.n	8010944 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80108c8:	2300      	movs	r3, #0
 80108ca:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80108cc:	e03a      	b.n	8010944 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80108ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108d0:	88db      	ldrh	r3, [r3, #6]
 80108d2:	b29a      	uxth	r2, r3
 80108d4:	693b      	ldr	r3, [r7, #16]
 80108d6:	889b      	ldrh	r3, [r3, #4]
 80108d8:	b29b      	uxth	r3, r3
 80108da:	429a      	cmp	r2, r3
 80108dc:	d902      	bls.n	80108e4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80108de:	f04f 33ff 	mov.w	r3, #4294967295
 80108e2:	e0c5      	b.n	8010a70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	68ba      	ldr	r2, [r7, #8]
 80108e8:	605a      	str	r2, [r3, #4]
      break;
 80108ea:	e02b      	b.n	8010944 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80108ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ee:	889b      	ldrh	r3, [r3, #4]
 80108f0:	b29a      	uxth	r2, r3
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	889b      	ldrh	r3, [r3, #4]
 80108f6:	b29b      	uxth	r3, r3
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d102      	bne.n	8010902 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80108fc:	f04f 33ff 	mov.w	r3, #4294967295
 8010900:	e0b6      	b.n	8010a70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010904:	889b      	ldrh	r3, [r3, #4]
 8010906:	b29a      	uxth	r2, r3
 8010908:	693b      	ldr	r3, [r7, #16]
 801090a:	88db      	ldrh	r3, [r3, #6]
 801090c:	b29b      	uxth	r3, r3
 801090e:	429a      	cmp	r2, r3
 8010910:	d202      	bcs.n	8010918 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010912:	f04f 33ff 	mov.w	r3, #4294967295
 8010916:	e0ab      	b.n	8010a70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801091a:	2b00      	cmp	r3, #0
 801091c:	d009      	beq.n	8010932 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801091e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010920:	88db      	ldrh	r3, [r3, #6]
 8010922:	b29a      	uxth	r2, r3
 8010924:	693b      	ldr	r3, [r7, #16]
 8010926:	889b      	ldrh	r3, [r3, #4]
 8010928:	b29b      	uxth	r3, r3
 801092a:	429a      	cmp	r2, r3
 801092c:	d001      	beq.n	8010932 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801092e:	2300      	movs	r3, #0
 8010930:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010932:	693b      	ldr	r3, [r7, #16]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8010938:	693b      	ldr	r3, [r7, #16]
 801093a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801093e:	2b00      	cmp	r3, #0
 8010940:	d193      	bne.n	801086a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010942:	e000      	b.n	8010946 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010944:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010948:	2b00      	cmp	r3, #0
 801094a:	d12d      	bne.n	80109a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801094c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801094e:	2b00      	cmp	r3, #0
 8010950:	d01c      	beq.n	801098c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010954:	88db      	ldrh	r3, [r3, #6]
 8010956:	b29a      	uxth	r2, r3
 8010958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801095a:	889b      	ldrh	r3, [r3, #4]
 801095c:	b29b      	uxth	r3, r3
 801095e:	429a      	cmp	r2, r3
 8010960:	d906      	bls.n	8010970 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010962:	4b45      	ldr	r3, [pc, #276]	; (8010a78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010964:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8010968:	4944      	ldr	r1, [pc, #272]	; (8010a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801096a:	4845      	ldr	r0, [pc, #276]	; (8010a80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801096c:	f000 fd04 	bl	8011378 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010972:	68ba      	ldr	r2, [r7, #8]
 8010974:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010978:	88db      	ldrh	r3, [r3, #6]
 801097a:	b29a      	uxth	r2, r3
 801097c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801097e:	889b      	ldrh	r3, [r3, #4]
 8010980:	b29b      	uxth	r3, r3
 8010982:	429a      	cmp	r2, r3
 8010984:	d010      	beq.n	80109a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010986:	2300      	movs	r3, #0
 8010988:	623b      	str	r3, [r7, #32]
 801098a:	e00d      	b.n	80109a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	685b      	ldr	r3, [r3, #4]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d006      	beq.n	80109a2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010994:	4b38      	ldr	r3, [pc, #224]	; (8010a78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010996:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801099a:	493a      	ldr	r1, [pc, #232]	; (8010a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801099c:	4838      	ldr	r0, [pc, #224]	; (8010a80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801099e:	f000 fceb 	bl	8011378 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	68ba      	ldr	r2, [r7, #8]
 80109a6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d105      	bne.n	80109ba <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	7f9b      	ldrb	r3, [r3, #30]
 80109b2:	f003 0301 	and.w	r3, r3, #1
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d059      	beq.n	8010a6e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80109ba:	6a3b      	ldr	r3, [r7, #32]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d04f      	beq.n	8010a60 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	685b      	ldr	r3, [r3, #4]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d006      	beq.n	80109d6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	685b      	ldr	r3, [r3, #4]
 80109cc:	685b      	ldr	r3, [r3, #4]
 80109ce:	889b      	ldrh	r3, [r3, #4]
 80109d0:	b29b      	uxth	r3, r3
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d002      	beq.n	80109dc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80109d6:	2300      	movs	r3, #0
 80109d8:	623b      	str	r3, [r7, #32]
 80109da:	e041      	b.n	8010a60 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80109dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109de:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80109e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80109e6:	e012      	b.n	8010a0e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80109e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ea:	685b      	ldr	r3, [r3, #4]
 80109ec:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80109ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109f0:	88db      	ldrh	r3, [r3, #6]
 80109f2:	b29a      	uxth	r2, r3
 80109f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109f6:	889b      	ldrh	r3, [r3, #4]
 80109f8:	b29b      	uxth	r3, r3
 80109fa:	429a      	cmp	r2, r3
 80109fc:	d002      	beq.n	8010a04 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80109fe:	2300      	movs	r3, #0
 8010a00:	623b      	str	r3, [r7, #32]
            break;
 8010a02:	e007      	b.n	8010a14 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a06:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8010a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d1e9      	bne.n	80109e8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010a14:	6a3b      	ldr	r3, [r7, #32]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d022      	beq.n	8010a60 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	685b      	ldr	r3, [r3, #4]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d106      	bne.n	8010a30 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010a22:	4b15      	ldr	r3, [pc, #84]	; (8010a78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010a24:	f240 12df 	movw	r2, #479	; 0x1df
 8010a28:	4917      	ldr	r1, [pc, #92]	; (8010a88 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010a2a:	4815      	ldr	r0, [pc, #84]	; (8010a80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010a2c:	f000 fca4 	bl	8011378 <iprintf>
          LWIP_ASSERT("sanity check",
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	685b      	ldr	r3, [r3, #4]
 8010a34:	685b      	ldr	r3, [r3, #4]
 8010a36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a38:	429a      	cmp	r2, r3
 8010a3a:	d106      	bne.n	8010a4a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8010a3c:	4b0e      	ldr	r3, [pc, #56]	; (8010a78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010a3e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010a42:	4911      	ldr	r1, [pc, #68]	; (8010a88 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010a44:	480e      	ldr	r0, [pc, #56]	; (8010a80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010a46:	f000 fc97 	bl	8011378 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8010a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d006      	beq.n	8010a60 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010a52:	4b09      	ldr	r3, [pc, #36]	; (8010a78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010a54:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8010a58:	490c      	ldr	r1, [pc, #48]	; (8010a8c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8010a5a:	4809      	ldr	r0, [pc, #36]	; (8010a80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010a5c:	f000 fc8c 	bl	8011378 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010a60:	6a3b      	ldr	r3, [r7, #32]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	bf14      	ite	ne
 8010a66:	2301      	movne	r3, #1
 8010a68:	2300      	moveq	r3, #0
 8010a6a:	b2db      	uxtb	r3, r3
 8010a6c:	e000      	b.n	8010a70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8010a6e:	2300      	movs	r3, #0
}
 8010a70:	4618      	mov	r0, r3
 8010a72:	3730      	adds	r7, #48	; 0x30
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}
 8010a78:	08014f90 	.word	0x08014f90
 8010a7c:	08015074 	.word	0x08015074
 8010a80:	08014fd8 	.word	0x08014fd8
 8010a84:	08015094 	.word	0x08015094
 8010a88:	080150cc 	.word	0x080150cc
 8010a8c:	080150dc 	.word	0x080150dc

08010a90 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b08e      	sub	sp, #56	; 0x38
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	685b      	ldr	r3, [r3, #4]
 8010a9c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8010a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aa0:	781b      	ldrb	r3, [r3, #0]
 8010aa2:	f003 030f 	and.w	r3, r3, #15
 8010aa6:	b2db      	uxtb	r3, r3
 8010aa8:	009b      	lsls	r3, r3, #2
 8010aaa:	b2db      	uxtb	r3, r3
 8010aac:	2b14      	cmp	r3, #20
 8010aae:	f040 8171 	bne.w	8010d94 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8010ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ab4:	88db      	ldrh	r3, [r3, #6]
 8010ab6:	b29b      	uxth	r3, r3
 8010ab8:	4618      	mov	r0, r3
 8010aba:	f7f6 fb15 	bl	80070e8 <lwip_htons>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010ac4:	b29b      	uxth	r3, r3
 8010ac6:	00db      	lsls	r3, r3, #3
 8010ac8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010acc:	885b      	ldrh	r3, [r3, #2]
 8010ace:	b29b      	uxth	r3, r3
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f7f6 fb09 	bl	80070e8 <lwip_htons>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010adc:	781b      	ldrb	r3, [r3, #0]
 8010ade:	f003 030f 	and.w	r3, r3, #15
 8010ae2:	b2db      	uxtb	r3, r3
 8010ae4:	009b      	lsls	r3, r3, #2
 8010ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8010aea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010aee:	b29b      	uxth	r3, r3
 8010af0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010af2:	429a      	cmp	r2, r3
 8010af4:	f0c0 8150 	bcc.w	8010d98 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010af8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010afc:	b29b      	uxth	r3, r3
 8010afe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010b00:	1ad3      	subs	r3, r2, r3
 8010b02:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010b04:	6878      	ldr	r0, [r7, #4]
 8010b06:	f7f7 fed5 	bl	80088b4 <pbuf_clen>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010b0e:	4b8c      	ldr	r3, [pc, #560]	; (8010d40 <ip4_reass+0x2b0>)
 8010b10:	881b      	ldrh	r3, [r3, #0]
 8010b12:	461a      	mov	r2, r3
 8010b14:	8c3b      	ldrh	r3, [r7, #32]
 8010b16:	4413      	add	r3, r2
 8010b18:	2b0a      	cmp	r3, #10
 8010b1a:	dd10      	ble.n	8010b3e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010b1c:	8c3b      	ldrh	r3, [r7, #32]
 8010b1e:	4619      	mov	r1, r3
 8010b20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b22:	f7ff fd81 	bl	8010628 <ip_reass_remove_oldest_datagram>
 8010b26:	4603      	mov	r3, r0
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	f000 8137 	beq.w	8010d9c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8010b2e:	4b84      	ldr	r3, [pc, #528]	; (8010d40 <ip4_reass+0x2b0>)
 8010b30:	881b      	ldrh	r3, [r3, #0]
 8010b32:	461a      	mov	r2, r3
 8010b34:	8c3b      	ldrh	r3, [r7, #32]
 8010b36:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010b38:	2b0a      	cmp	r3, #10
 8010b3a:	f300 812f 	bgt.w	8010d9c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010b3e:	4b81      	ldr	r3, [pc, #516]	; (8010d44 <ip4_reass+0x2b4>)
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	633b      	str	r3, [r7, #48]	; 0x30
 8010b44:	e015      	b.n	8010b72 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b48:	695a      	ldr	r2, [r3, #20]
 8010b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b4c:	68db      	ldr	r3, [r3, #12]
 8010b4e:	429a      	cmp	r2, r3
 8010b50:	d10c      	bne.n	8010b6c <ip4_reass+0xdc>
 8010b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b54:	699a      	ldr	r2, [r3, #24]
 8010b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b58:	691b      	ldr	r3, [r3, #16]
 8010b5a:	429a      	cmp	r2, r3
 8010b5c:	d106      	bne.n	8010b6c <ip4_reass+0xdc>
 8010b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b60:	899a      	ldrh	r2, [r3, #12]
 8010b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b64:	889b      	ldrh	r3, [r3, #4]
 8010b66:	b29b      	uxth	r3, r3
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	d006      	beq.n	8010b7a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	633b      	str	r3, [r7, #48]	; 0x30
 8010b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d1e6      	bne.n	8010b46 <ip4_reass+0xb6>
 8010b78:	e000      	b.n	8010b7c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8010b7a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d109      	bne.n	8010b96 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010b82:	8c3b      	ldrh	r3, [r7, #32]
 8010b84:	4619      	mov	r1, r3
 8010b86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b88:	f7ff fdb0 	bl	80106ec <ip_reass_enqueue_new_datagram>
 8010b8c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8010b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d11c      	bne.n	8010bce <ip4_reass+0x13e>
      goto nullreturn;
 8010b94:	e105      	b.n	8010da2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b98:	88db      	ldrh	r3, [r3, #6]
 8010b9a:	b29b      	uxth	r3, r3
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f7f6 faa3 	bl	80070e8 <lwip_htons>
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d110      	bne.n	8010bce <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bae:	89db      	ldrh	r3, [r3, #14]
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f7f6 fa99 	bl	80070e8 <lwip_htons>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d006      	beq.n	8010bce <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bc2:	3308      	adds	r3, #8
 8010bc4:	2214      	movs	r2, #20
 8010bc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010bc8:	4618      	mov	r0, r3
 8010bca:	f000 fba5 	bl	8011318 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd0:	88db      	ldrh	r3, [r3, #6]
 8010bd2:	b29b      	uxth	r3, r3
 8010bd4:	f003 0320 	and.w	r3, r3, #32
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	bf0c      	ite	eq
 8010bdc:	2301      	moveq	r3, #1
 8010bde:	2300      	movne	r3, #0
 8010be0:	b2db      	uxtb	r3, r3
 8010be2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010be4:	69fb      	ldr	r3, [r7, #28]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d00e      	beq.n	8010c08 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010bea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010bec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010bee:	4413      	add	r3, r2
 8010bf0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010bf2:	8b7a      	ldrh	r2, [r7, #26]
 8010bf4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010bf6:	429a      	cmp	r2, r3
 8010bf8:	f0c0 80a0 	bcc.w	8010d3c <ip4_reass+0x2ac>
 8010bfc:	8b7b      	ldrh	r3, [r7, #26]
 8010bfe:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8010c02:	4293      	cmp	r3, r2
 8010c04:	f200 809a 	bhi.w	8010d3c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010c08:	69fa      	ldr	r2, [r7, #28]
 8010c0a:	6879      	ldr	r1, [r7, #4]
 8010c0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c0e:	f7ff fdd5 	bl	80107bc <ip_reass_chain_frag_into_datagram_and_validate>
 8010c12:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010c14:	697b      	ldr	r3, [r7, #20]
 8010c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c1a:	f000 809b 	beq.w	8010d54 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010c1e:	4b48      	ldr	r3, [pc, #288]	; (8010d40 <ip4_reass+0x2b0>)
 8010c20:	881a      	ldrh	r2, [r3, #0]
 8010c22:	8c3b      	ldrh	r3, [r7, #32]
 8010c24:	4413      	add	r3, r2
 8010c26:	b29a      	uxth	r2, r3
 8010c28:	4b45      	ldr	r3, [pc, #276]	; (8010d40 <ip4_reass+0x2b0>)
 8010c2a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8010c2c:	69fb      	ldr	r3, [r7, #28]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d00d      	beq.n	8010c4e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010c32:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010c34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c36:	4413      	add	r3, r2
 8010c38:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8010c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c3c:	8a7a      	ldrh	r2, [r7, #18]
 8010c3e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c42:	7f9b      	ldrb	r3, [r3, #30]
 8010c44:	f043 0301 	orr.w	r3, r3, #1
 8010c48:	b2da      	uxtb	r2, r3
 8010c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c4c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	2b01      	cmp	r3, #1
 8010c52:	d171      	bne.n	8010d38 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c56:	8b9b      	ldrh	r3, [r3, #28]
 8010c58:	3314      	adds	r3, #20
 8010c5a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c5e:	685b      	ldr	r3, [r3, #4]
 8010c60:	685b      	ldr	r3, [r3, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c68:	685b      	ldr	r3, [r3, #4]
 8010c6a:	685b      	ldr	r3, [r3, #4]
 8010c6c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c70:	3308      	adds	r3, #8
 8010c72:	2214      	movs	r2, #20
 8010c74:	4619      	mov	r1, r3
 8010c76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c78:	f000 fb4e 	bl	8011318 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010c7c:	8a3b      	ldrh	r3, [r7, #16]
 8010c7e:	4618      	mov	r0, r3
 8010c80:	f7f6 fa32 	bl	80070e8 <lwip_htons>
 8010c84:	4603      	mov	r3, r0
 8010c86:	461a      	mov	r2, r3
 8010c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c8a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c8e:	2200      	movs	r2, #0
 8010c90:	719a      	strb	r2, [r3, #6]
 8010c92:	2200      	movs	r2, #0
 8010c94:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c98:	2200      	movs	r2, #0
 8010c9a:	729a      	strb	r2, [r3, #10]
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca2:	685b      	ldr	r3, [r3, #4]
 8010ca4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010ca6:	e00d      	b.n	8010cc4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010caa:	685b      	ldr	r3, [r3, #4]
 8010cac:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8010cae:	2114      	movs	r1, #20
 8010cb0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010cb2:	f7f7 fcf1 	bl	8008698 <pbuf_remove_header>
      pbuf_cat(p, r);
 8010cb6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	f7f7 fe35 	bl	8008928 <pbuf_cat>
      r = iprh->next_pbuf;
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8010cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d1ee      	bne.n	8010ca8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010cca:	4b1e      	ldr	r3, [pc, #120]	; (8010d44 <ip4_reass+0x2b4>)
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cd0:	429a      	cmp	r2, r3
 8010cd2:	d102      	bne.n	8010cda <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010cd8:	e010      	b.n	8010cfc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010cda:	4b1a      	ldr	r3, [pc, #104]	; (8010d44 <ip4_reass+0x2b4>)
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ce0:	e007      	b.n	8010cf2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8010ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ce8:	429a      	cmp	r2, r3
 8010cea:	d006      	beq.n	8010cfa <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d1f4      	bne.n	8010ce2 <ip4_reass+0x252>
 8010cf8:	e000      	b.n	8010cfc <ip4_reass+0x26c>
          break;
 8010cfa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010cfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010cfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d00:	f7ff fd2e 	bl	8010760 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010d04:	6878      	ldr	r0, [r7, #4]
 8010d06:	f7f7 fdd5 	bl	80088b4 <pbuf_clen>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010d0e:	4b0c      	ldr	r3, [pc, #48]	; (8010d40 <ip4_reass+0x2b0>)
 8010d10:	881b      	ldrh	r3, [r3, #0]
 8010d12:	8c3a      	ldrh	r2, [r7, #32]
 8010d14:	429a      	cmp	r2, r3
 8010d16:	d906      	bls.n	8010d26 <ip4_reass+0x296>
 8010d18:	4b0b      	ldr	r3, [pc, #44]	; (8010d48 <ip4_reass+0x2b8>)
 8010d1a:	f240 229b 	movw	r2, #667	; 0x29b
 8010d1e:	490b      	ldr	r1, [pc, #44]	; (8010d4c <ip4_reass+0x2bc>)
 8010d20:	480b      	ldr	r0, [pc, #44]	; (8010d50 <ip4_reass+0x2c0>)
 8010d22:	f000 fb29 	bl	8011378 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010d26:	4b06      	ldr	r3, [pc, #24]	; (8010d40 <ip4_reass+0x2b0>)
 8010d28:	881a      	ldrh	r2, [r3, #0]
 8010d2a:	8c3b      	ldrh	r3, [r7, #32]
 8010d2c:	1ad3      	subs	r3, r2, r3
 8010d2e:	b29a      	uxth	r2, r3
 8010d30:	4b03      	ldr	r3, [pc, #12]	; (8010d40 <ip4_reass+0x2b0>)
 8010d32:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	e038      	b.n	8010daa <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	e036      	b.n	8010daa <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8010d3c:	bf00      	nop
 8010d3e:	e00a      	b.n	8010d56 <ip4_reass+0x2c6>
 8010d40:	2000bd84 	.word	0x2000bd84
 8010d44:	2000bd80 	.word	0x2000bd80
 8010d48:	08014f90 	.word	0x08014f90
 8010d4c:	08015100 	.word	0x08015100
 8010d50:	08014fd8 	.word	0x08014fd8
    goto nullreturn_ipr;
 8010d54:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d106      	bne.n	8010d6a <ip4_reass+0x2da>
 8010d5c:	4b15      	ldr	r3, [pc, #84]	; (8010db4 <ip4_reass+0x324>)
 8010d5e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8010d62:	4915      	ldr	r1, [pc, #84]	; (8010db8 <ip4_reass+0x328>)
 8010d64:	4815      	ldr	r0, [pc, #84]	; (8010dbc <ip4_reass+0x32c>)
 8010d66:	f000 fb07 	bl	8011378 <iprintf>
  if (ipr->p == NULL) {
 8010d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d6c:	685b      	ldr	r3, [r3, #4]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d116      	bne.n	8010da0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010d72:	4b13      	ldr	r3, [pc, #76]	; (8010dc0 <ip4_reass+0x330>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d78:	429a      	cmp	r2, r3
 8010d7a:	d006      	beq.n	8010d8a <ip4_reass+0x2fa>
 8010d7c:	4b0d      	ldr	r3, [pc, #52]	; (8010db4 <ip4_reass+0x324>)
 8010d7e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010d82:	4910      	ldr	r1, [pc, #64]	; (8010dc4 <ip4_reass+0x334>)
 8010d84:	480d      	ldr	r0, [pc, #52]	; (8010dbc <ip4_reass+0x32c>)
 8010d86:	f000 faf7 	bl	8011378 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010d8a:	2100      	movs	r1, #0
 8010d8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d8e:	f7ff fce7 	bl	8010760 <ip_reass_dequeue_datagram>
 8010d92:	e006      	b.n	8010da2 <ip4_reass+0x312>
    goto nullreturn;
 8010d94:	bf00      	nop
 8010d96:	e004      	b.n	8010da2 <ip4_reass+0x312>
    goto nullreturn;
 8010d98:	bf00      	nop
 8010d9a:	e002      	b.n	8010da2 <ip4_reass+0x312>
      goto nullreturn;
 8010d9c:	bf00      	nop
 8010d9e:	e000      	b.n	8010da2 <ip4_reass+0x312>
  }

nullreturn:
 8010da0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8010da2:	6878      	ldr	r0, [r7, #4]
 8010da4:	f7f7 fcfe 	bl	80087a4 <pbuf_free>
  return NULL;
 8010da8:	2300      	movs	r3, #0
}
 8010daa:	4618      	mov	r0, r3
 8010dac:	3738      	adds	r7, #56	; 0x38
 8010dae:	46bd      	mov	sp, r7
 8010db0:	bd80      	pop	{r7, pc}
 8010db2:	bf00      	nop
 8010db4:	08014f90 	.word	0x08014f90
 8010db8:	0801511c 	.word	0x0801511c
 8010dbc:	08014fd8 	.word	0x08014fd8
 8010dc0:	2000bd80 	.word	0x2000bd80
 8010dc4:	08015128 	.word	0x08015128

08010dc8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010dcc:	2005      	movs	r0, #5
 8010dce:	f7f6 fe03 	bl	80079d8 <memp_malloc>
 8010dd2:	4603      	mov	r3, r0
}
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	bd80      	pop	{r7, pc}

08010dd8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b082      	sub	sp, #8
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d106      	bne.n	8010df4 <ip_frag_free_pbuf_custom_ref+0x1c>
 8010de6:	4b07      	ldr	r3, [pc, #28]	; (8010e04 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010de8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8010dec:	4906      	ldr	r1, [pc, #24]	; (8010e08 <ip_frag_free_pbuf_custom_ref+0x30>)
 8010dee:	4807      	ldr	r0, [pc, #28]	; (8010e0c <ip_frag_free_pbuf_custom_ref+0x34>)
 8010df0:	f000 fac2 	bl	8011378 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010df4:	6879      	ldr	r1, [r7, #4]
 8010df6:	2005      	movs	r0, #5
 8010df8:	f7f6 fe5e 	bl	8007ab8 <memp_free>
}
 8010dfc:	bf00      	nop
 8010dfe:	3708      	adds	r7, #8
 8010e00:	46bd      	mov	sp, r7
 8010e02:	bd80      	pop	{r7, pc}
 8010e04:	08014f90 	.word	0x08014f90
 8010e08:	08015148 	.word	0x08015148
 8010e0c:	08014fd8 	.word	0x08014fd8

08010e10 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b084      	sub	sp, #16
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d106      	bne.n	8010e30 <ipfrag_free_pbuf_custom+0x20>
 8010e22:	4b11      	ldr	r3, [pc, #68]	; (8010e68 <ipfrag_free_pbuf_custom+0x58>)
 8010e24:	f240 22ce 	movw	r2, #718	; 0x2ce
 8010e28:	4910      	ldr	r1, [pc, #64]	; (8010e6c <ipfrag_free_pbuf_custom+0x5c>)
 8010e2a:	4811      	ldr	r0, [pc, #68]	; (8010e70 <ipfrag_free_pbuf_custom+0x60>)
 8010e2c:	f000 faa4 	bl	8011378 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010e30:	68fa      	ldr	r2, [r7, #12]
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	429a      	cmp	r2, r3
 8010e36:	d006      	beq.n	8010e46 <ipfrag_free_pbuf_custom+0x36>
 8010e38:	4b0b      	ldr	r3, [pc, #44]	; (8010e68 <ipfrag_free_pbuf_custom+0x58>)
 8010e3a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8010e3e:	490d      	ldr	r1, [pc, #52]	; (8010e74 <ipfrag_free_pbuf_custom+0x64>)
 8010e40:	480b      	ldr	r0, [pc, #44]	; (8010e70 <ipfrag_free_pbuf_custom+0x60>)
 8010e42:	f000 fa99 	bl	8011378 <iprintf>
  if (pcr->original != NULL) {
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	695b      	ldr	r3, [r3, #20]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d004      	beq.n	8010e58 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	695b      	ldr	r3, [r3, #20]
 8010e52:	4618      	mov	r0, r3
 8010e54:	f7f7 fca6 	bl	80087a4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010e58:	68f8      	ldr	r0, [r7, #12]
 8010e5a:	f7ff ffbd 	bl	8010dd8 <ip_frag_free_pbuf_custom_ref>
}
 8010e5e:	bf00      	nop
 8010e60:	3710      	adds	r7, #16
 8010e62:	46bd      	mov	sp, r7
 8010e64:	bd80      	pop	{r7, pc}
 8010e66:	bf00      	nop
 8010e68:	08014f90 	.word	0x08014f90
 8010e6c:	08015154 	.word	0x08015154
 8010e70:	08014fd8 	.word	0x08014fd8
 8010e74:	08015160 	.word	0x08015160

08010e78 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b094      	sub	sp, #80	; 0x50
 8010e7c:	af02      	add	r7, sp, #8
 8010e7e:	60f8      	str	r0, [r7, #12]
 8010e80:	60b9      	str	r1, [r7, #8]
 8010e82:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010e84:	2300      	movs	r3, #0
 8010e86:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010e8a:	68bb      	ldr	r3, [r7, #8]
 8010e8c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010e8e:	3b14      	subs	r3, #20
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	da00      	bge.n	8010e96 <ip4_frag+0x1e>
 8010e94:	3307      	adds	r3, #7
 8010e96:	10db      	asrs	r3, r3, #3
 8010e98:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010e9a:	2314      	movs	r3, #20
 8010e9c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	685b      	ldr	r3, [r3, #4]
 8010ea2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8010ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ea6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eaa:	781b      	ldrb	r3, [r3, #0]
 8010eac:	f003 030f 	and.w	r3, r3, #15
 8010eb0:	b2db      	uxtb	r3, r3
 8010eb2:	009b      	lsls	r3, r3, #2
 8010eb4:	b2db      	uxtb	r3, r3
 8010eb6:	2b14      	cmp	r3, #20
 8010eb8:	d002      	beq.n	8010ec0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8010eba:	f06f 0305 	mvn.w	r3, #5
 8010ebe:	e110      	b.n	80110e2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	895b      	ldrh	r3, [r3, #10]
 8010ec4:	2b13      	cmp	r3, #19
 8010ec6:	d809      	bhi.n	8010edc <ip4_frag+0x64>
 8010ec8:	4b88      	ldr	r3, [pc, #544]	; (80110ec <ip4_frag+0x274>)
 8010eca:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8010ece:	4988      	ldr	r1, [pc, #544]	; (80110f0 <ip4_frag+0x278>)
 8010ed0:	4888      	ldr	r0, [pc, #544]	; (80110f4 <ip4_frag+0x27c>)
 8010ed2:	f000 fa51 	bl	8011378 <iprintf>
 8010ed6:	f06f 0305 	mvn.w	r3, #5
 8010eda:	e102      	b.n	80110e2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ede:	88db      	ldrh	r3, [r3, #6]
 8010ee0:	b29b      	uxth	r3, r3
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f7f6 f900 	bl	80070e8 <lwip_htons>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8010eec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010eee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010ef2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8010ef6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010ef8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010efc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	891b      	ldrh	r3, [r3, #8]
 8010f02:	3b14      	subs	r3, #20
 8010f04:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8010f08:	e0e1      	b.n	80110ce <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010f0a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010f0c:	00db      	lsls	r3, r3, #3
 8010f0e:	b29b      	uxth	r3, r3
 8010f10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010f14:	4293      	cmp	r3, r2
 8010f16:	bf28      	it	cs
 8010f18:	4613      	movcs	r3, r2
 8010f1a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010f1c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010f20:	2114      	movs	r1, #20
 8010f22:	200e      	movs	r0, #14
 8010f24:	f7f7 f95a 	bl	80081dc <pbuf_alloc>
 8010f28:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8010f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	f000 80d5 	beq.w	80110dc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f34:	895b      	ldrh	r3, [r3, #10]
 8010f36:	2b13      	cmp	r3, #19
 8010f38:	d806      	bhi.n	8010f48 <ip4_frag+0xd0>
 8010f3a:	4b6c      	ldr	r3, [pc, #432]	; (80110ec <ip4_frag+0x274>)
 8010f3c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8010f40:	496d      	ldr	r1, [pc, #436]	; (80110f8 <ip4_frag+0x280>)
 8010f42:	486c      	ldr	r0, [pc, #432]	; (80110f4 <ip4_frag+0x27c>)
 8010f44:	f000 fa18 	bl	8011378 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f4a:	685b      	ldr	r3, [r3, #4]
 8010f4c:	2214      	movs	r2, #20
 8010f4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010f50:	4618      	mov	r0, r3
 8010f52:	f000 f9e1 	bl	8011318 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f58:	685b      	ldr	r3, [r3, #4]
 8010f5a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8010f5c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010f5e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8010f62:	e064      	b.n	801102e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	895a      	ldrh	r2, [r3, #10]
 8010f68:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010f6a:	1ad3      	subs	r3, r2, r3
 8010f6c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	895b      	ldrh	r3, [r3, #10]
 8010f72:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010f74:	429a      	cmp	r2, r3
 8010f76:	d906      	bls.n	8010f86 <ip4_frag+0x10e>
 8010f78:	4b5c      	ldr	r3, [pc, #368]	; (80110ec <ip4_frag+0x274>)
 8010f7a:	f240 322d 	movw	r2, #813	; 0x32d
 8010f7e:	495f      	ldr	r1, [pc, #380]	; (80110fc <ip4_frag+0x284>)
 8010f80:	485c      	ldr	r0, [pc, #368]	; (80110f4 <ip4_frag+0x27c>)
 8010f82:	f000 f9f9 	bl	8011378 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010f86:	8bfa      	ldrh	r2, [r7, #30]
 8010f88:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010f8c:	4293      	cmp	r3, r2
 8010f8e:	bf28      	it	cs
 8010f90:	4613      	movcs	r3, r2
 8010f92:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010f96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d105      	bne.n	8010faa <ip4_frag+0x132>
        poff = 0;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	60fb      	str	r3, [r7, #12]
        continue;
 8010fa8:	e041      	b.n	801102e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010faa:	f7ff ff0d 	bl	8010dc8 <ip_frag_alloc_pbuf_custom_ref>
 8010fae:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010fb0:	69bb      	ldr	r3, [r7, #24]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d103      	bne.n	8010fbe <ip4_frag+0x146>
        pbuf_free(rambuf);
 8010fb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010fb8:	f7f7 fbf4 	bl	80087a4 <pbuf_free>
        goto memerr;
 8010fbc:	e08f      	b.n	80110de <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010fbe:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010fc4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010fc6:	4413      	add	r3, r2
 8010fc8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8010fcc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8010fd0:	9201      	str	r2, [sp, #4]
 8010fd2:	9300      	str	r3, [sp, #0]
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	2241      	movs	r2, #65	; 0x41
 8010fd8:	2000      	movs	r0, #0
 8010fda:	f7f7 fa29 	bl	8008430 <pbuf_alloced_custom>
 8010fde:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010fe0:	697b      	ldr	r3, [r7, #20]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d106      	bne.n	8010ff4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010fe6:	69b8      	ldr	r0, [r7, #24]
 8010fe8:	f7ff fef6 	bl	8010dd8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010fec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010fee:	f7f7 fbd9 	bl	80087a4 <pbuf_free>
        goto memerr;
 8010ff2:	e074      	b.n	80110de <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010ff4:	68f8      	ldr	r0, [r7, #12]
 8010ff6:	f7f7 fc75 	bl	80088e4 <pbuf_ref>
      pcr->original = p;
 8010ffa:	69bb      	ldr	r3, [r7, #24]
 8010ffc:	68fa      	ldr	r2, [r7, #12]
 8010ffe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011000:	69bb      	ldr	r3, [r7, #24]
 8011002:	4a3f      	ldr	r2, [pc, #252]	; (8011100 <ip4_frag+0x288>)
 8011004:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8011006:	6979      	ldr	r1, [r7, #20]
 8011008:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801100a:	f7f7 fc8d 	bl	8008928 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801100e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011012:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011016:	1ad3      	subs	r3, r2, r3
 8011018:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801101c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011020:	2b00      	cmp	r3, #0
 8011022:	d004      	beq.n	801102e <ip4_frag+0x1b6>
        poff = 0;
 8011024:	2300      	movs	r3, #0
 8011026:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801102e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011032:	2b00      	cmp	r3, #0
 8011034:	d196      	bne.n	8010f64 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8011036:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011038:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801103c:	4413      	add	r3, r2
 801103e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011040:	68bb      	ldr	r3, [r7, #8]
 8011042:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011044:	f1a3 0213 	sub.w	r2, r3, #19
 8011048:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801104c:	429a      	cmp	r2, r3
 801104e:	bfcc      	ite	gt
 8011050:	2301      	movgt	r3, #1
 8011052:	2300      	movle	r3, #0
 8011054:	b2db      	uxtb	r3, r3
 8011056:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8011058:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801105c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011060:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8011062:	6a3b      	ldr	r3, [r7, #32]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d002      	beq.n	801106e <ip4_frag+0x1f6>
 8011068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801106a:	2b00      	cmp	r3, #0
 801106c:	d003      	beq.n	8011076 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801106e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011070:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011074:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011076:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011078:	4618      	mov	r0, r3
 801107a:	f7f6 f835 	bl	80070e8 <lwip_htons>
 801107e:	4603      	mov	r3, r0
 8011080:	461a      	mov	r2, r3
 8011082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011084:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8011086:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011088:	3314      	adds	r3, #20
 801108a:	b29b      	uxth	r3, r3
 801108c:	4618      	mov	r0, r3
 801108e:	f7f6 f82b 	bl	80070e8 <lwip_htons>
 8011092:	4603      	mov	r3, r0
 8011094:	461a      	mov	r2, r3
 8011096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011098:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801109a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801109c:	2200      	movs	r2, #0
 801109e:	729a      	strb	r2, [r3, #10]
 80110a0:	2200      	movs	r2, #0
 80110a2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	695b      	ldr	r3, [r3, #20]
 80110a8:	687a      	ldr	r2, [r7, #4]
 80110aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80110ac:	68b8      	ldr	r0, [r7, #8]
 80110ae:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80110b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80110b2:	f7f7 fb77 	bl	80087a4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80110b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80110ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80110bc:	1ad3      	subs	r3, r2, r3
 80110be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80110c2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80110c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80110c8:	4413      	add	r3, r2
 80110ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80110ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	f47f af19 	bne.w	8010f0a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80110d8:	2300      	movs	r3, #0
 80110da:	e002      	b.n	80110e2 <ip4_frag+0x26a>
      goto memerr;
 80110dc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80110de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80110e2:	4618      	mov	r0, r3
 80110e4:	3748      	adds	r7, #72	; 0x48
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}
 80110ea:	bf00      	nop
 80110ec:	08014f90 	.word	0x08014f90
 80110f0:	0801516c 	.word	0x0801516c
 80110f4:	08014fd8 	.word	0x08014fd8
 80110f8:	08015188 	.word	0x08015188
 80110fc:	080151a8 	.word	0x080151a8
 8011100:	08010e11 	.word	0x08010e11

08011104 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b086      	sub	sp, #24
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
 801110c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801110e:	230e      	movs	r3, #14
 8011110:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	895b      	ldrh	r3, [r3, #10]
 8011116:	2b0e      	cmp	r3, #14
 8011118:	d96e      	bls.n	80111f8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	7bdb      	ldrb	r3, [r3, #15]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d106      	bne.n	8011130 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8011122:	683b      	ldr	r3, [r7, #0]
 8011124:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011128:	3301      	adds	r3, #1
 801112a:	b2da      	uxtb	r2, r3
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	685b      	ldr	r3, [r3, #4]
 8011134:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8011136:	693b      	ldr	r3, [r7, #16]
 8011138:	7b1a      	ldrb	r2, [r3, #12]
 801113a:	7b5b      	ldrb	r3, [r3, #13]
 801113c:	021b      	lsls	r3, r3, #8
 801113e:	4313      	orrs	r3, r2
 8011140:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8011142:	693b      	ldr	r3, [r7, #16]
 8011144:	781b      	ldrb	r3, [r3, #0]
 8011146:	f003 0301 	and.w	r3, r3, #1
 801114a:	2b00      	cmp	r3, #0
 801114c:	d023      	beq.n	8011196 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801114e:	693b      	ldr	r3, [r7, #16]
 8011150:	781b      	ldrb	r3, [r3, #0]
 8011152:	2b01      	cmp	r3, #1
 8011154:	d10f      	bne.n	8011176 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011156:	693b      	ldr	r3, [r7, #16]
 8011158:	785b      	ldrb	r3, [r3, #1]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d11b      	bne.n	8011196 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801115e:	693b      	ldr	r3, [r7, #16]
 8011160:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011162:	2b5e      	cmp	r3, #94	; 0x5e
 8011164:	d117      	bne.n	8011196 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	7b5b      	ldrb	r3, [r3, #13]
 801116a:	f043 0310 	orr.w	r3, r3, #16
 801116e:	b2da      	uxtb	r2, r3
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	735a      	strb	r2, [r3, #13]
 8011174:	e00f      	b.n	8011196 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8011176:	693b      	ldr	r3, [r7, #16]
 8011178:	2206      	movs	r2, #6
 801117a:	4928      	ldr	r1, [pc, #160]	; (801121c <ethernet_input+0x118>)
 801117c:	4618      	mov	r0, r3
 801117e:	f000 f8bb 	bl	80112f8 <memcmp>
 8011182:	4603      	mov	r3, r0
 8011184:	2b00      	cmp	r3, #0
 8011186:	d106      	bne.n	8011196 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	7b5b      	ldrb	r3, [r3, #13]
 801118c:	f043 0308 	orr.w	r3, r3, #8
 8011190:	b2da      	uxtb	r2, r3
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8011196:	89fb      	ldrh	r3, [r7, #14]
 8011198:	2b08      	cmp	r3, #8
 801119a:	d003      	beq.n	80111a4 <ethernet_input+0xa0>
 801119c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80111a0:	d014      	beq.n	80111cc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80111a2:	e032      	b.n	801120a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80111aa:	f003 0308 	and.w	r3, r3, #8
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d024      	beq.n	80111fc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80111b2:	8afb      	ldrh	r3, [r7, #22]
 80111b4:	4619      	mov	r1, r3
 80111b6:	6878      	ldr	r0, [r7, #4]
 80111b8:	f7f7 fa6e 	bl	8008698 <pbuf_remove_header>
 80111bc:	4603      	mov	r3, r0
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d11e      	bne.n	8011200 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80111c2:	6839      	ldr	r1, [r7, #0]
 80111c4:	6878      	ldr	r0, [r7, #4]
 80111c6:	f7fe ff21 	bl	801000c <ip4_input>
      break;
 80111ca:	e013      	b.n	80111f4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80111cc:	683b      	ldr	r3, [r7, #0]
 80111ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80111d2:	f003 0308 	and.w	r3, r3, #8
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d014      	beq.n	8011204 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80111da:	8afb      	ldrh	r3, [r7, #22]
 80111dc:	4619      	mov	r1, r3
 80111de:	6878      	ldr	r0, [r7, #4]
 80111e0:	f7f7 fa5a 	bl	8008698 <pbuf_remove_header>
 80111e4:	4603      	mov	r3, r0
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d10e      	bne.n	8011208 <ethernet_input+0x104>
        etharp_input(p, netif);
 80111ea:	6839      	ldr	r1, [r7, #0]
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	f7fe f8c1 	bl	800f374 <etharp_input>
      break;
 80111f2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80111f4:	2300      	movs	r3, #0
 80111f6:	e00c      	b.n	8011212 <ethernet_input+0x10e>
    goto free_and_return;
 80111f8:	bf00      	nop
 80111fa:	e006      	b.n	801120a <ethernet_input+0x106>
        goto free_and_return;
 80111fc:	bf00      	nop
 80111fe:	e004      	b.n	801120a <ethernet_input+0x106>
        goto free_and_return;
 8011200:	bf00      	nop
 8011202:	e002      	b.n	801120a <ethernet_input+0x106>
        goto free_and_return;
 8011204:	bf00      	nop
 8011206:	e000      	b.n	801120a <ethernet_input+0x106>
        goto free_and_return;
 8011208:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f7f7 faca 	bl	80087a4 <pbuf_free>
  return ERR_OK;
 8011210:	2300      	movs	r3, #0
}
 8011212:	4618      	mov	r0, r3
 8011214:	3718      	adds	r7, #24
 8011216:	46bd      	mov	sp, r7
 8011218:	bd80      	pop	{r7, pc}
 801121a:	bf00      	nop
 801121c:	08015344 	.word	0x08015344

08011220 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011220:	b580      	push	{r7, lr}
 8011222:	b086      	sub	sp, #24
 8011224:	af00      	add	r7, sp, #0
 8011226:	60f8      	str	r0, [r7, #12]
 8011228:	60b9      	str	r1, [r7, #8]
 801122a:	607a      	str	r2, [r7, #4]
 801122c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801122e:	8c3b      	ldrh	r3, [r7, #32]
 8011230:	4618      	mov	r0, r3
 8011232:	f7f5 ff59 	bl	80070e8 <lwip_htons>
 8011236:	4603      	mov	r3, r0
 8011238:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801123a:	210e      	movs	r1, #14
 801123c:	68b8      	ldr	r0, [r7, #8]
 801123e:	f7f7 fa1b 	bl	8008678 <pbuf_add_header>
 8011242:	4603      	mov	r3, r0
 8011244:	2b00      	cmp	r3, #0
 8011246:	d125      	bne.n	8011294 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011248:	68bb      	ldr	r3, [r7, #8]
 801124a:	685b      	ldr	r3, [r3, #4]
 801124c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801124e:	693b      	ldr	r3, [r7, #16]
 8011250:	8afa      	ldrh	r2, [r7, #22]
 8011252:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011254:	693b      	ldr	r3, [r7, #16]
 8011256:	2206      	movs	r2, #6
 8011258:	6839      	ldr	r1, [r7, #0]
 801125a:	4618      	mov	r0, r3
 801125c:	f000 f85c 	bl	8011318 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011260:	693b      	ldr	r3, [r7, #16]
 8011262:	3306      	adds	r3, #6
 8011264:	2206      	movs	r2, #6
 8011266:	6879      	ldr	r1, [r7, #4]
 8011268:	4618      	mov	r0, r3
 801126a:	f000 f855 	bl	8011318 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011274:	2b06      	cmp	r3, #6
 8011276:	d006      	beq.n	8011286 <ethernet_output+0x66>
 8011278:	4b0a      	ldr	r3, [pc, #40]	; (80112a4 <ethernet_output+0x84>)
 801127a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801127e:	490a      	ldr	r1, [pc, #40]	; (80112a8 <ethernet_output+0x88>)
 8011280:	480a      	ldr	r0, [pc, #40]	; (80112ac <ethernet_output+0x8c>)
 8011282:	f000 f879 	bl	8011378 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	699b      	ldr	r3, [r3, #24]
 801128a:	68b9      	ldr	r1, [r7, #8]
 801128c:	68f8      	ldr	r0, [r7, #12]
 801128e:	4798      	blx	r3
 8011290:	4603      	mov	r3, r0
 8011292:	e002      	b.n	801129a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8011294:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8011296:	f06f 0301 	mvn.w	r3, #1
}
 801129a:	4618      	mov	r0, r3
 801129c:	3718      	adds	r7, #24
 801129e:	46bd      	mov	sp, r7
 80112a0:	bd80      	pop	{r7, pc}
 80112a2:	bf00      	nop
 80112a4:	080151b8 	.word	0x080151b8
 80112a8:	080151f0 	.word	0x080151f0
 80112ac:	08015224 	.word	0x08015224

080112b0 <__libc_init_array>:
 80112b0:	b570      	push	{r4, r5, r6, lr}
 80112b2:	4d0d      	ldr	r5, [pc, #52]	; (80112e8 <__libc_init_array+0x38>)
 80112b4:	4c0d      	ldr	r4, [pc, #52]	; (80112ec <__libc_init_array+0x3c>)
 80112b6:	1b64      	subs	r4, r4, r5
 80112b8:	10a4      	asrs	r4, r4, #2
 80112ba:	2600      	movs	r6, #0
 80112bc:	42a6      	cmp	r6, r4
 80112be:	d109      	bne.n	80112d4 <__libc_init_array+0x24>
 80112c0:	4d0b      	ldr	r5, [pc, #44]	; (80112f0 <__libc_init_array+0x40>)
 80112c2:	4c0c      	ldr	r4, [pc, #48]	; (80112f4 <__libc_init_array+0x44>)
 80112c4:	f001 fa5c 	bl	8012780 <_init>
 80112c8:	1b64      	subs	r4, r4, r5
 80112ca:	10a4      	asrs	r4, r4, #2
 80112cc:	2600      	movs	r6, #0
 80112ce:	42a6      	cmp	r6, r4
 80112d0:	d105      	bne.n	80112de <__libc_init_array+0x2e>
 80112d2:	bd70      	pop	{r4, r5, r6, pc}
 80112d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80112d8:	4798      	blx	r3
 80112da:	3601      	adds	r6, #1
 80112dc:	e7ee      	b.n	80112bc <__libc_init_array+0xc>
 80112de:	f855 3b04 	ldr.w	r3, [r5], #4
 80112e2:	4798      	blx	r3
 80112e4:	3601      	adds	r6, #1
 80112e6:	e7f2      	b.n	80112ce <__libc_init_array+0x1e>
	...

080112f8 <memcmp>:
 80112f8:	b510      	push	{r4, lr}
 80112fa:	3901      	subs	r1, #1
 80112fc:	4402      	add	r2, r0
 80112fe:	4290      	cmp	r0, r2
 8011300:	d101      	bne.n	8011306 <memcmp+0xe>
 8011302:	2000      	movs	r0, #0
 8011304:	e005      	b.n	8011312 <memcmp+0x1a>
 8011306:	7803      	ldrb	r3, [r0, #0]
 8011308:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801130c:	42a3      	cmp	r3, r4
 801130e:	d001      	beq.n	8011314 <memcmp+0x1c>
 8011310:	1b18      	subs	r0, r3, r4
 8011312:	bd10      	pop	{r4, pc}
 8011314:	3001      	adds	r0, #1
 8011316:	e7f2      	b.n	80112fe <memcmp+0x6>

08011318 <memcpy>:
 8011318:	440a      	add	r2, r1
 801131a:	4291      	cmp	r1, r2
 801131c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011320:	d100      	bne.n	8011324 <memcpy+0xc>
 8011322:	4770      	bx	lr
 8011324:	b510      	push	{r4, lr}
 8011326:	f811 4b01 	ldrb.w	r4, [r1], #1
 801132a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801132e:	4291      	cmp	r1, r2
 8011330:	d1f9      	bne.n	8011326 <memcpy+0xe>
 8011332:	bd10      	pop	{r4, pc}

08011334 <memmove>:
 8011334:	4288      	cmp	r0, r1
 8011336:	b510      	push	{r4, lr}
 8011338:	eb01 0402 	add.w	r4, r1, r2
 801133c:	d902      	bls.n	8011344 <memmove+0x10>
 801133e:	4284      	cmp	r4, r0
 8011340:	4623      	mov	r3, r4
 8011342:	d807      	bhi.n	8011354 <memmove+0x20>
 8011344:	1e43      	subs	r3, r0, #1
 8011346:	42a1      	cmp	r1, r4
 8011348:	d008      	beq.n	801135c <memmove+0x28>
 801134a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801134e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011352:	e7f8      	b.n	8011346 <memmove+0x12>
 8011354:	4402      	add	r2, r0
 8011356:	4601      	mov	r1, r0
 8011358:	428a      	cmp	r2, r1
 801135a:	d100      	bne.n	801135e <memmove+0x2a>
 801135c:	bd10      	pop	{r4, pc}
 801135e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011362:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011366:	e7f7      	b.n	8011358 <memmove+0x24>

08011368 <memset>:
 8011368:	4402      	add	r2, r0
 801136a:	4603      	mov	r3, r0
 801136c:	4293      	cmp	r3, r2
 801136e:	d100      	bne.n	8011372 <memset+0xa>
 8011370:	4770      	bx	lr
 8011372:	f803 1b01 	strb.w	r1, [r3], #1
 8011376:	e7f9      	b.n	801136c <memset+0x4>

08011378 <iprintf>:
 8011378:	b40f      	push	{r0, r1, r2, r3}
 801137a:	4b0a      	ldr	r3, [pc, #40]	; (80113a4 <iprintf+0x2c>)
 801137c:	b513      	push	{r0, r1, r4, lr}
 801137e:	681c      	ldr	r4, [r3, #0]
 8011380:	b124      	cbz	r4, 801138c <iprintf+0x14>
 8011382:	69a3      	ldr	r3, [r4, #24]
 8011384:	b913      	cbnz	r3, 801138c <iprintf+0x14>
 8011386:	4620      	mov	r0, r4
 8011388:	f000 f8e2 	bl	8011550 <__sinit>
 801138c:	ab05      	add	r3, sp, #20
 801138e:	9a04      	ldr	r2, [sp, #16]
 8011390:	68a1      	ldr	r1, [r4, #8]
 8011392:	9301      	str	r3, [sp, #4]
 8011394:	4620      	mov	r0, r4
 8011396:	f000 fbfb 	bl	8011b90 <_vfiprintf_r>
 801139a:	b002      	add	sp, #8
 801139c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113a0:	b004      	add	sp, #16
 80113a2:	4770      	bx	lr
 80113a4:	2000002c 	.word	0x2000002c

080113a8 <rand>:
 80113a8:	4b16      	ldr	r3, [pc, #88]	; (8011404 <rand+0x5c>)
 80113aa:	b510      	push	{r4, lr}
 80113ac:	681c      	ldr	r4, [r3, #0]
 80113ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80113b0:	b9b3      	cbnz	r3, 80113e0 <rand+0x38>
 80113b2:	2018      	movs	r0, #24
 80113b4:	f000 f97e 	bl	80116b4 <malloc>
 80113b8:	63a0      	str	r0, [r4, #56]	; 0x38
 80113ba:	b928      	cbnz	r0, 80113c8 <rand+0x20>
 80113bc:	4602      	mov	r2, r0
 80113be:	4b12      	ldr	r3, [pc, #72]	; (8011408 <rand+0x60>)
 80113c0:	4812      	ldr	r0, [pc, #72]	; (801140c <rand+0x64>)
 80113c2:	214e      	movs	r1, #78	; 0x4e
 80113c4:	f000 f84e 	bl	8011464 <__assert_func>
 80113c8:	4a11      	ldr	r2, [pc, #68]	; (8011410 <rand+0x68>)
 80113ca:	4b12      	ldr	r3, [pc, #72]	; (8011414 <rand+0x6c>)
 80113cc:	e9c0 2300 	strd	r2, r3, [r0]
 80113d0:	4b11      	ldr	r3, [pc, #68]	; (8011418 <rand+0x70>)
 80113d2:	6083      	str	r3, [r0, #8]
 80113d4:	230b      	movs	r3, #11
 80113d6:	8183      	strh	r3, [r0, #12]
 80113d8:	2201      	movs	r2, #1
 80113da:	2300      	movs	r3, #0
 80113dc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80113e0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80113e2:	4a0e      	ldr	r2, [pc, #56]	; (801141c <rand+0x74>)
 80113e4:	6920      	ldr	r0, [r4, #16]
 80113e6:	6963      	ldr	r3, [r4, #20]
 80113e8:	490d      	ldr	r1, [pc, #52]	; (8011420 <rand+0x78>)
 80113ea:	4342      	muls	r2, r0
 80113ec:	fb01 2203 	mla	r2, r1, r3, r2
 80113f0:	fba0 0101 	umull	r0, r1, r0, r1
 80113f4:	1c43      	adds	r3, r0, #1
 80113f6:	eb42 0001 	adc.w	r0, r2, r1
 80113fa:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80113fe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011402:	bd10      	pop	{r4, pc}
 8011404:	2000002c 	.word	0x2000002c
 8011408:	08015358 	.word	0x08015358
 801140c:	0801536f 	.word	0x0801536f
 8011410:	abcd330e 	.word	0xabcd330e
 8011414:	e66d1234 	.word	0xe66d1234
 8011418:	0005deec 	.word	0x0005deec
 801141c:	5851f42d 	.word	0x5851f42d
 8011420:	4c957f2d 	.word	0x4c957f2d

08011424 <siprintf>:
 8011424:	b40e      	push	{r1, r2, r3}
 8011426:	b500      	push	{lr}
 8011428:	b09c      	sub	sp, #112	; 0x70
 801142a:	ab1d      	add	r3, sp, #116	; 0x74
 801142c:	9002      	str	r0, [sp, #8]
 801142e:	9006      	str	r0, [sp, #24]
 8011430:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011434:	4809      	ldr	r0, [pc, #36]	; (801145c <siprintf+0x38>)
 8011436:	9107      	str	r1, [sp, #28]
 8011438:	9104      	str	r1, [sp, #16]
 801143a:	4909      	ldr	r1, [pc, #36]	; (8011460 <siprintf+0x3c>)
 801143c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011440:	9105      	str	r1, [sp, #20]
 8011442:	6800      	ldr	r0, [r0, #0]
 8011444:	9301      	str	r3, [sp, #4]
 8011446:	a902      	add	r1, sp, #8
 8011448:	f000 fa78 	bl	801193c <_svfiprintf_r>
 801144c:	9b02      	ldr	r3, [sp, #8]
 801144e:	2200      	movs	r2, #0
 8011450:	701a      	strb	r2, [r3, #0]
 8011452:	b01c      	add	sp, #112	; 0x70
 8011454:	f85d eb04 	ldr.w	lr, [sp], #4
 8011458:	b003      	add	sp, #12
 801145a:	4770      	bx	lr
 801145c:	2000002c 	.word	0x2000002c
 8011460:	ffff0208 	.word	0xffff0208

08011464 <__assert_func>:
 8011464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011466:	4614      	mov	r4, r2
 8011468:	461a      	mov	r2, r3
 801146a:	4b09      	ldr	r3, [pc, #36]	; (8011490 <__assert_func+0x2c>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	4605      	mov	r5, r0
 8011470:	68d8      	ldr	r0, [r3, #12]
 8011472:	b14c      	cbz	r4, 8011488 <__assert_func+0x24>
 8011474:	4b07      	ldr	r3, [pc, #28]	; (8011494 <__assert_func+0x30>)
 8011476:	9100      	str	r1, [sp, #0]
 8011478:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801147c:	4906      	ldr	r1, [pc, #24]	; (8011498 <__assert_func+0x34>)
 801147e:	462b      	mov	r3, r5
 8011480:	f000 f8e4 	bl	801164c <fiprintf>
 8011484:	f000 ff6e 	bl	8012364 <abort>
 8011488:	4b04      	ldr	r3, [pc, #16]	; (801149c <__assert_func+0x38>)
 801148a:	461c      	mov	r4, r3
 801148c:	e7f3      	b.n	8011476 <__assert_func+0x12>
 801148e:	bf00      	nop
 8011490:	2000002c 	.word	0x2000002c
 8011494:	080153ca 	.word	0x080153ca
 8011498:	080153d7 	.word	0x080153d7
 801149c:	08015405 	.word	0x08015405

080114a0 <std>:
 80114a0:	2300      	movs	r3, #0
 80114a2:	b510      	push	{r4, lr}
 80114a4:	4604      	mov	r4, r0
 80114a6:	e9c0 3300 	strd	r3, r3, [r0]
 80114aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80114ae:	6083      	str	r3, [r0, #8]
 80114b0:	8181      	strh	r1, [r0, #12]
 80114b2:	6643      	str	r3, [r0, #100]	; 0x64
 80114b4:	81c2      	strh	r2, [r0, #14]
 80114b6:	6183      	str	r3, [r0, #24]
 80114b8:	4619      	mov	r1, r3
 80114ba:	2208      	movs	r2, #8
 80114bc:	305c      	adds	r0, #92	; 0x5c
 80114be:	f7ff ff53 	bl	8011368 <memset>
 80114c2:	4b05      	ldr	r3, [pc, #20]	; (80114d8 <std+0x38>)
 80114c4:	6263      	str	r3, [r4, #36]	; 0x24
 80114c6:	4b05      	ldr	r3, [pc, #20]	; (80114dc <std+0x3c>)
 80114c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80114ca:	4b05      	ldr	r3, [pc, #20]	; (80114e0 <std+0x40>)
 80114cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80114ce:	4b05      	ldr	r3, [pc, #20]	; (80114e4 <std+0x44>)
 80114d0:	6224      	str	r4, [r4, #32]
 80114d2:	6323      	str	r3, [r4, #48]	; 0x30
 80114d4:	bd10      	pop	{r4, pc}
 80114d6:	bf00      	nop
 80114d8:	08012139 	.word	0x08012139
 80114dc:	0801215b 	.word	0x0801215b
 80114e0:	08012193 	.word	0x08012193
 80114e4:	080121b7 	.word	0x080121b7

080114e8 <_cleanup_r>:
 80114e8:	4901      	ldr	r1, [pc, #4]	; (80114f0 <_cleanup_r+0x8>)
 80114ea:	f000 b8c1 	b.w	8011670 <_fwalk_reent>
 80114ee:	bf00      	nop
 80114f0:	080124a1 	.word	0x080124a1

080114f4 <__sfmoreglue>:
 80114f4:	b570      	push	{r4, r5, r6, lr}
 80114f6:	2268      	movs	r2, #104	; 0x68
 80114f8:	1e4d      	subs	r5, r1, #1
 80114fa:	4355      	muls	r5, r2
 80114fc:	460e      	mov	r6, r1
 80114fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011502:	f000 f94b 	bl	801179c <_malloc_r>
 8011506:	4604      	mov	r4, r0
 8011508:	b140      	cbz	r0, 801151c <__sfmoreglue+0x28>
 801150a:	2100      	movs	r1, #0
 801150c:	e9c0 1600 	strd	r1, r6, [r0]
 8011510:	300c      	adds	r0, #12
 8011512:	60a0      	str	r0, [r4, #8]
 8011514:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011518:	f7ff ff26 	bl	8011368 <memset>
 801151c:	4620      	mov	r0, r4
 801151e:	bd70      	pop	{r4, r5, r6, pc}

08011520 <__sfp_lock_acquire>:
 8011520:	4801      	ldr	r0, [pc, #4]	; (8011528 <__sfp_lock_acquire+0x8>)
 8011522:	f000 b8c5 	b.w	80116b0 <__retarget_lock_acquire_recursive>
 8011526:	bf00      	nop
 8011528:	2000bd8d 	.word	0x2000bd8d

0801152c <__sfp_lock_release>:
 801152c:	4801      	ldr	r0, [pc, #4]	; (8011534 <__sfp_lock_release+0x8>)
 801152e:	f000 b8c0 	b.w	80116b2 <__retarget_lock_release_recursive>
 8011532:	bf00      	nop
 8011534:	2000bd8d 	.word	0x2000bd8d

08011538 <__sinit_lock_acquire>:
 8011538:	4801      	ldr	r0, [pc, #4]	; (8011540 <__sinit_lock_acquire+0x8>)
 801153a:	f000 b8b9 	b.w	80116b0 <__retarget_lock_acquire_recursive>
 801153e:	bf00      	nop
 8011540:	2000bd8e 	.word	0x2000bd8e

08011544 <__sinit_lock_release>:
 8011544:	4801      	ldr	r0, [pc, #4]	; (801154c <__sinit_lock_release+0x8>)
 8011546:	f000 b8b4 	b.w	80116b2 <__retarget_lock_release_recursive>
 801154a:	bf00      	nop
 801154c:	2000bd8e 	.word	0x2000bd8e

08011550 <__sinit>:
 8011550:	b510      	push	{r4, lr}
 8011552:	4604      	mov	r4, r0
 8011554:	f7ff fff0 	bl	8011538 <__sinit_lock_acquire>
 8011558:	69a3      	ldr	r3, [r4, #24]
 801155a:	b11b      	cbz	r3, 8011564 <__sinit+0x14>
 801155c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011560:	f7ff bff0 	b.w	8011544 <__sinit_lock_release>
 8011564:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011568:	6523      	str	r3, [r4, #80]	; 0x50
 801156a:	4b13      	ldr	r3, [pc, #76]	; (80115b8 <__sinit+0x68>)
 801156c:	4a13      	ldr	r2, [pc, #76]	; (80115bc <__sinit+0x6c>)
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	62a2      	str	r2, [r4, #40]	; 0x28
 8011572:	42a3      	cmp	r3, r4
 8011574:	bf04      	itt	eq
 8011576:	2301      	moveq	r3, #1
 8011578:	61a3      	streq	r3, [r4, #24]
 801157a:	4620      	mov	r0, r4
 801157c:	f000 f820 	bl	80115c0 <__sfp>
 8011580:	6060      	str	r0, [r4, #4]
 8011582:	4620      	mov	r0, r4
 8011584:	f000 f81c 	bl	80115c0 <__sfp>
 8011588:	60a0      	str	r0, [r4, #8]
 801158a:	4620      	mov	r0, r4
 801158c:	f000 f818 	bl	80115c0 <__sfp>
 8011590:	2200      	movs	r2, #0
 8011592:	60e0      	str	r0, [r4, #12]
 8011594:	2104      	movs	r1, #4
 8011596:	6860      	ldr	r0, [r4, #4]
 8011598:	f7ff ff82 	bl	80114a0 <std>
 801159c:	68a0      	ldr	r0, [r4, #8]
 801159e:	2201      	movs	r2, #1
 80115a0:	2109      	movs	r1, #9
 80115a2:	f7ff ff7d 	bl	80114a0 <std>
 80115a6:	68e0      	ldr	r0, [r4, #12]
 80115a8:	2202      	movs	r2, #2
 80115aa:	2112      	movs	r1, #18
 80115ac:	f7ff ff78 	bl	80114a0 <std>
 80115b0:	2301      	movs	r3, #1
 80115b2:	61a3      	str	r3, [r4, #24]
 80115b4:	e7d2      	b.n	801155c <__sinit+0xc>
 80115b6:	bf00      	nop
 80115b8:	08015354 	.word	0x08015354
 80115bc:	080114e9 	.word	0x080114e9

080115c0 <__sfp>:
 80115c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115c2:	4607      	mov	r7, r0
 80115c4:	f7ff ffac 	bl	8011520 <__sfp_lock_acquire>
 80115c8:	4b1e      	ldr	r3, [pc, #120]	; (8011644 <__sfp+0x84>)
 80115ca:	681e      	ldr	r6, [r3, #0]
 80115cc:	69b3      	ldr	r3, [r6, #24]
 80115ce:	b913      	cbnz	r3, 80115d6 <__sfp+0x16>
 80115d0:	4630      	mov	r0, r6
 80115d2:	f7ff ffbd 	bl	8011550 <__sinit>
 80115d6:	3648      	adds	r6, #72	; 0x48
 80115d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80115dc:	3b01      	subs	r3, #1
 80115de:	d503      	bpl.n	80115e8 <__sfp+0x28>
 80115e0:	6833      	ldr	r3, [r6, #0]
 80115e2:	b30b      	cbz	r3, 8011628 <__sfp+0x68>
 80115e4:	6836      	ldr	r6, [r6, #0]
 80115e6:	e7f7      	b.n	80115d8 <__sfp+0x18>
 80115e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80115ec:	b9d5      	cbnz	r5, 8011624 <__sfp+0x64>
 80115ee:	4b16      	ldr	r3, [pc, #88]	; (8011648 <__sfp+0x88>)
 80115f0:	60e3      	str	r3, [r4, #12]
 80115f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80115f6:	6665      	str	r5, [r4, #100]	; 0x64
 80115f8:	f000 f859 	bl	80116ae <__retarget_lock_init_recursive>
 80115fc:	f7ff ff96 	bl	801152c <__sfp_lock_release>
 8011600:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011604:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011608:	6025      	str	r5, [r4, #0]
 801160a:	61a5      	str	r5, [r4, #24]
 801160c:	2208      	movs	r2, #8
 801160e:	4629      	mov	r1, r5
 8011610:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011614:	f7ff fea8 	bl	8011368 <memset>
 8011618:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801161c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011620:	4620      	mov	r0, r4
 8011622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011624:	3468      	adds	r4, #104	; 0x68
 8011626:	e7d9      	b.n	80115dc <__sfp+0x1c>
 8011628:	2104      	movs	r1, #4
 801162a:	4638      	mov	r0, r7
 801162c:	f7ff ff62 	bl	80114f4 <__sfmoreglue>
 8011630:	4604      	mov	r4, r0
 8011632:	6030      	str	r0, [r6, #0]
 8011634:	2800      	cmp	r0, #0
 8011636:	d1d5      	bne.n	80115e4 <__sfp+0x24>
 8011638:	f7ff ff78 	bl	801152c <__sfp_lock_release>
 801163c:	230c      	movs	r3, #12
 801163e:	603b      	str	r3, [r7, #0]
 8011640:	e7ee      	b.n	8011620 <__sfp+0x60>
 8011642:	bf00      	nop
 8011644:	08015354 	.word	0x08015354
 8011648:	ffff0001 	.word	0xffff0001

0801164c <fiprintf>:
 801164c:	b40e      	push	{r1, r2, r3}
 801164e:	b503      	push	{r0, r1, lr}
 8011650:	4601      	mov	r1, r0
 8011652:	ab03      	add	r3, sp, #12
 8011654:	4805      	ldr	r0, [pc, #20]	; (801166c <fiprintf+0x20>)
 8011656:	f853 2b04 	ldr.w	r2, [r3], #4
 801165a:	6800      	ldr	r0, [r0, #0]
 801165c:	9301      	str	r3, [sp, #4]
 801165e:	f000 fa97 	bl	8011b90 <_vfiprintf_r>
 8011662:	b002      	add	sp, #8
 8011664:	f85d eb04 	ldr.w	lr, [sp], #4
 8011668:	b003      	add	sp, #12
 801166a:	4770      	bx	lr
 801166c:	2000002c 	.word	0x2000002c

08011670 <_fwalk_reent>:
 8011670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011674:	4606      	mov	r6, r0
 8011676:	4688      	mov	r8, r1
 8011678:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801167c:	2700      	movs	r7, #0
 801167e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011682:	f1b9 0901 	subs.w	r9, r9, #1
 8011686:	d505      	bpl.n	8011694 <_fwalk_reent+0x24>
 8011688:	6824      	ldr	r4, [r4, #0]
 801168a:	2c00      	cmp	r4, #0
 801168c:	d1f7      	bne.n	801167e <_fwalk_reent+0xe>
 801168e:	4638      	mov	r0, r7
 8011690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011694:	89ab      	ldrh	r3, [r5, #12]
 8011696:	2b01      	cmp	r3, #1
 8011698:	d907      	bls.n	80116aa <_fwalk_reent+0x3a>
 801169a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801169e:	3301      	adds	r3, #1
 80116a0:	d003      	beq.n	80116aa <_fwalk_reent+0x3a>
 80116a2:	4629      	mov	r1, r5
 80116a4:	4630      	mov	r0, r6
 80116a6:	47c0      	blx	r8
 80116a8:	4307      	orrs	r7, r0
 80116aa:	3568      	adds	r5, #104	; 0x68
 80116ac:	e7e9      	b.n	8011682 <_fwalk_reent+0x12>

080116ae <__retarget_lock_init_recursive>:
 80116ae:	4770      	bx	lr

080116b0 <__retarget_lock_acquire_recursive>:
 80116b0:	4770      	bx	lr

080116b2 <__retarget_lock_release_recursive>:
 80116b2:	4770      	bx	lr

080116b4 <malloc>:
 80116b4:	4b02      	ldr	r3, [pc, #8]	; (80116c0 <malloc+0xc>)
 80116b6:	4601      	mov	r1, r0
 80116b8:	6818      	ldr	r0, [r3, #0]
 80116ba:	f000 b86f 	b.w	801179c <_malloc_r>
 80116be:	bf00      	nop
 80116c0:	2000002c 	.word	0x2000002c

080116c4 <_free_r>:
 80116c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80116c6:	2900      	cmp	r1, #0
 80116c8:	d044      	beq.n	8011754 <_free_r+0x90>
 80116ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80116ce:	9001      	str	r0, [sp, #4]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	f1a1 0404 	sub.w	r4, r1, #4
 80116d6:	bfb8      	it	lt
 80116d8:	18e4      	addlt	r4, r4, r3
 80116da:	f000 ff95 	bl	8012608 <__malloc_lock>
 80116de:	4a1e      	ldr	r2, [pc, #120]	; (8011758 <_free_r+0x94>)
 80116e0:	9801      	ldr	r0, [sp, #4]
 80116e2:	6813      	ldr	r3, [r2, #0]
 80116e4:	b933      	cbnz	r3, 80116f4 <_free_r+0x30>
 80116e6:	6063      	str	r3, [r4, #4]
 80116e8:	6014      	str	r4, [r2, #0]
 80116ea:	b003      	add	sp, #12
 80116ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80116f0:	f000 bf90 	b.w	8012614 <__malloc_unlock>
 80116f4:	42a3      	cmp	r3, r4
 80116f6:	d908      	bls.n	801170a <_free_r+0x46>
 80116f8:	6825      	ldr	r5, [r4, #0]
 80116fa:	1961      	adds	r1, r4, r5
 80116fc:	428b      	cmp	r3, r1
 80116fe:	bf01      	itttt	eq
 8011700:	6819      	ldreq	r1, [r3, #0]
 8011702:	685b      	ldreq	r3, [r3, #4]
 8011704:	1949      	addeq	r1, r1, r5
 8011706:	6021      	streq	r1, [r4, #0]
 8011708:	e7ed      	b.n	80116e6 <_free_r+0x22>
 801170a:	461a      	mov	r2, r3
 801170c:	685b      	ldr	r3, [r3, #4]
 801170e:	b10b      	cbz	r3, 8011714 <_free_r+0x50>
 8011710:	42a3      	cmp	r3, r4
 8011712:	d9fa      	bls.n	801170a <_free_r+0x46>
 8011714:	6811      	ldr	r1, [r2, #0]
 8011716:	1855      	adds	r5, r2, r1
 8011718:	42a5      	cmp	r5, r4
 801171a:	d10b      	bne.n	8011734 <_free_r+0x70>
 801171c:	6824      	ldr	r4, [r4, #0]
 801171e:	4421      	add	r1, r4
 8011720:	1854      	adds	r4, r2, r1
 8011722:	42a3      	cmp	r3, r4
 8011724:	6011      	str	r1, [r2, #0]
 8011726:	d1e0      	bne.n	80116ea <_free_r+0x26>
 8011728:	681c      	ldr	r4, [r3, #0]
 801172a:	685b      	ldr	r3, [r3, #4]
 801172c:	6053      	str	r3, [r2, #4]
 801172e:	4421      	add	r1, r4
 8011730:	6011      	str	r1, [r2, #0]
 8011732:	e7da      	b.n	80116ea <_free_r+0x26>
 8011734:	d902      	bls.n	801173c <_free_r+0x78>
 8011736:	230c      	movs	r3, #12
 8011738:	6003      	str	r3, [r0, #0]
 801173a:	e7d6      	b.n	80116ea <_free_r+0x26>
 801173c:	6825      	ldr	r5, [r4, #0]
 801173e:	1961      	adds	r1, r4, r5
 8011740:	428b      	cmp	r3, r1
 8011742:	bf04      	itt	eq
 8011744:	6819      	ldreq	r1, [r3, #0]
 8011746:	685b      	ldreq	r3, [r3, #4]
 8011748:	6063      	str	r3, [r4, #4]
 801174a:	bf04      	itt	eq
 801174c:	1949      	addeq	r1, r1, r5
 801174e:	6021      	streq	r1, [r4, #0]
 8011750:	6054      	str	r4, [r2, #4]
 8011752:	e7ca      	b.n	80116ea <_free_r+0x26>
 8011754:	b003      	add	sp, #12
 8011756:	bd30      	pop	{r4, r5, pc}
 8011758:	2000bd90 	.word	0x2000bd90

0801175c <sbrk_aligned>:
 801175c:	b570      	push	{r4, r5, r6, lr}
 801175e:	4e0e      	ldr	r6, [pc, #56]	; (8011798 <sbrk_aligned+0x3c>)
 8011760:	460c      	mov	r4, r1
 8011762:	6831      	ldr	r1, [r6, #0]
 8011764:	4605      	mov	r5, r0
 8011766:	b911      	cbnz	r1, 801176e <sbrk_aligned+0x12>
 8011768:	f000 fcd6 	bl	8012118 <_sbrk_r>
 801176c:	6030      	str	r0, [r6, #0]
 801176e:	4621      	mov	r1, r4
 8011770:	4628      	mov	r0, r5
 8011772:	f000 fcd1 	bl	8012118 <_sbrk_r>
 8011776:	1c43      	adds	r3, r0, #1
 8011778:	d00a      	beq.n	8011790 <sbrk_aligned+0x34>
 801177a:	1cc4      	adds	r4, r0, #3
 801177c:	f024 0403 	bic.w	r4, r4, #3
 8011780:	42a0      	cmp	r0, r4
 8011782:	d007      	beq.n	8011794 <sbrk_aligned+0x38>
 8011784:	1a21      	subs	r1, r4, r0
 8011786:	4628      	mov	r0, r5
 8011788:	f000 fcc6 	bl	8012118 <_sbrk_r>
 801178c:	3001      	adds	r0, #1
 801178e:	d101      	bne.n	8011794 <sbrk_aligned+0x38>
 8011790:	f04f 34ff 	mov.w	r4, #4294967295
 8011794:	4620      	mov	r0, r4
 8011796:	bd70      	pop	{r4, r5, r6, pc}
 8011798:	2000bd94 	.word	0x2000bd94

0801179c <_malloc_r>:
 801179c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117a0:	1ccd      	adds	r5, r1, #3
 80117a2:	f025 0503 	bic.w	r5, r5, #3
 80117a6:	3508      	adds	r5, #8
 80117a8:	2d0c      	cmp	r5, #12
 80117aa:	bf38      	it	cc
 80117ac:	250c      	movcc	r5, #12
 80117ae:	2d00      	cmp	r5, #0
 80117b0:	4607      	mov	r7, r0
 80117b2:	db01      	blt.n	80117b8 <_malloc_r+0x1c>
 80117b4:	42a9      	cmp	r1, r5
 80117b6:	d905      	bls.n	80117c4 <_malloc_r+0x28>
 80117b8:	230c      	movs	r3, #12
 80117ba:	603b      	str	r3, [r7, #0]
 80117bc:	2600      	movs	r6, #0
 80117be:	4630      	mov	r0, r6
 80117c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117c4:	4e2e      	ldr	r6, [pc, #184]	; (8011880 <_malloc_r+0xe4>)
 80117c6:	f000 ff1f 	bl	8012608 <__malloc_lock>
 80117ca:	6833      	ldr	r3, [r6, #0]
 80117cc:	461c      	mov	r4, r3
 80117ce:	bb34      	cbnz	r4, 801181e <_malloc_r+0x82>
 80117d0:	4629      	mov	r1, r5
 80117d2:	4638      	mov	r0, r7
 80117d4:	f7ff ffc2 	bl	801175c <sbrk_aligned>
 80117d8:	1c43      	adds	r3, r0, #1
 80117da:	4604      	mov	r4, r0
 80117dc:	d14d      	bne.n	801187a <_malloc_r+0xde>
 80117de:	6834      	ldr	r4, [r6, #0]
 80117e0:	4626      	mov	r6, r4
 80117e2:	2e00      	cmp	r6, #0
 80117e4:	d140      	bne.n	8011868 <_malloc_r+0xcc>
 80117e6:	6823      	ldr	r3, [r4, #0]
 80117e8:	4631      	mov	r1, r6
 80117ea:	4638      	mov	r0, r7
 80117ec:	eb04 0803 	add.w	r8, r4, r3
 80117f0:	f000 fc92 	bl	8012118 <_sbrk_r>
 80117f4:	4580      	cmp	r8, r0
 80117f6:	d13a      	bne.n	801186e <_malloc_r+0xd2>
 80117f8:	6821      	ldr	r1, [r4, #0]
 80117fa:	3503      	adds	r5, #3
 80117fc:	1a6d      	subs	r5, r5, r1
 80117fe:	f025 0503 	bic.w	r5, r5, #3
 8011802:	3508      	adds	r5, #8
 8011804:	2d0c      	cmp	r5, #12
 8011806:	bf38      	it	cc
 8011808:	250c      	movcc	r5, #12
 801180a:	4629      	mov	r1, r5
 801180c:	4638      	mov	r0, r7
 801180e:	f7ff ffa5 	bl	801175c <sbrk_aligned>
 8011812:	3001      	adds	r0, #1
 8011814:	d02b      	beq.n	801186e <_malloc_r+0xd2>
 8011816:	6823      	ldr	r3, [r4, #0]
 8011818:	442b      	add	r3, r5
 801181a:	6023      	str	r3, [r4, #0]
 801181c:	e00e      	b.n	801183c <_malloc_r+0xa0>
 801181e:	6822      	ldr	r2, [r4, #0]
 8011820:	1b52      	subs	r2, r2, r5
 8011822:	d41e      	bmi.n	8011862 <_malloc_r+0xc6>
 8011824:	2a0b      	cmp	r2, #11
 8011826:	d916      	bls.n	8011856 <_malloc_r+0xba>
 8011828:	1961      	adds	r1, r4, r5
 801182a:	42a3      	cmp	r3, r4
 801182c:	6025      	str	r5, [r4, #0]
 801182e:	bf18      	it	ne
 8011830:	6059      	strne	r1, [r3, #4]
 8011832:	6863      	ldr	r3, [r4, #4]
 8011834:	bf08      	it	eq
 8011836:	6031      	streq	r1, [r6, #0]
 8011838:	5162      	str	r2, [r4, r5]
 801183a:	604b      	str	r3, [r1, #4]
 801183c:	4638      	mov	r0, r7
 801183e:	f104 060b 	add.w	r6, r4, #11
 8011842:	f000 fee7 	bl	8012614 <__malloc_unlock>
 8011846:	f026 0607 	bic.w	r6, r6, #7
 801184a:	1d23      	adds	r3, r4, #4
 801184c:	1af2      	subs	r2, r6, r3
 801184e:	d0b6      	beq.n	80117be <_malloc_r+0x22>
 8011850:	1b9b      	subs	r3, r3, r6
 8011852:	50a3      	str	r3, [r4, r2]
 8011854:	e7b3      	b.n	80117be <_malloc_r+0x22>
 8011856:	6862      	ldr	r2, [r4, #4]
 8011858:	42a3      	cmp	r3, r4
 801185a:	bf0c      	ite	eq
 801185c:	6032      	streq	r2, [r6, #0]
 801185e:	605a      	strne	r2, [r3, #4]
 8011860:	e7ec      	b.n	801183c <_malloc_r+0xa0>
 8011862:	4623      	mov	r3, r4
 8011864:	6864      	ldr	r4, [r4, #4]
 8011866:	e7b2      	b.n	80117ce <_malloc_r+0x32>
 8011868:	4634      	mov	r4, r6
 801186a:	6876      	ldr	r6, [r6, #4]
 801186c:	e7b9      	b.n	80117e2 <_malloc_r+0x46>
 801186e:	230c      	movs	r3, #12
 8011870:	603b      	str	r3, [r7, #0]
 8011872:	4638      	mov	r0, r7
 8011874:	f000 fece 	bl	8012614 <__malloc_unlock>
 8011878:	e7a1      	b.n	80117be <_malloc_r+0x22>
 801187a:	6025      	str	r5, [r4, #0]
 801187c:	e7de      	b.n	801183c <_malloc_r+0xa0>
 801187e:	bf00      	nop
 8011880:	2000bd90 	.word	0x2000bd90

08011884 <__ssputs_r>:
 8011884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011888:	688e      	ldr	r6, [r1, #8]
 801188a:	429e      	cmp	r6, r3
 801188c:	4682      	mov	sl, r0
 801188e:	460c      	mov	r4, r1
 8011890:	4690      	mov	r8, r2
 8011892:	461f      	mov	r7, r3
 8011894:	d838      	bhi.n	8011908 <__ssputs_r+0x84>
 8011896:	898a      	ldrh	r2, [r1, #12]
 8011898:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801189c:	d032      	beq.n	8011904 <__ssputs_r+0x80>
 801189e:	6825      	ldr	r5, [r4, #0]
 80118a0:	6909      	ldr	r1, [r1, #16]
 80118a2:	eba5 0901 	sub.w	r9, r5, r1
 80118a6:	6965      	ldr	r5, [r4, #20]
 80118a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80118ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80118b0:	3301      	adds	r3, #1
 80118b2:	444b      	add	r3, r9
 80118b4:	106d      	asrs	r5, r5, #1
 80118b6:	429d      	cmp	r5, r3
 80118b8:	bf38      	it	cc
 80118ba:	461d      	movcc	r5, r3
 80118bc:	0553      	lsls	r3, r2, #21
 80118be:	d531      	bpl.n	8011924 <__ssputs_r+0xa0>
 80118c0:	4629      	mov	r1, r5
 80118c2:	f7ff ff6b 	bl	801179c <_malloc_r>
 80118c6:	4606      	mov	r6, r0
 80118c8:	b950      	cbnz	r0, 80118e0 <__ssputs_r+0x5c>
 80118ca:	230c      	movs	r3, #12
 80118cc:	f8ca 3000 	str.w	r3, [sl]
 80118d0:	89a3      	ldrh	r3, [r4, #12]
 80118d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118d6:	81a3      	strh	r3, [r4, #12]
 80118d8:	f04f 30ff 	mov.w	r0, #4294967295
 80118dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118e0:	6921      	ldr	r1, [r4, #16]
 80118e2:	464a      	mov	r2, r9
 80118e4:	f7ff fd18 	bl	8011318 <memcpy>
 80118e8:	89a3      	ldrh	r3, [r4, #12]
 80118ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80118ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80118f2:	81a3      	strh	r3, [r4, #12]
 80118f4:	6126      	str	r6, [r4, #16]
 80118f6:	6165      	str	r5, [r4, #20]
 80118f8:	444e      	add	r6, r9
 80118fa:	eba5 0509 	sub.w	r5, r5, r9
 80118fe:	6026      	str	r6, [r4, #0]
 8011900:	60a5      	str	r5, [r4, #8]
 8011902:	463e      	mov	r6, r7
 8011904:	42be      	cmp	r6, r7
 8011906:	d900      	bls.n	801190a <__ssputs_r+0x86>
 8011908:	463e      	mov	r6, r7
 801190a:	6820      	ldr	r0, [r4, #0]
 801190c:	4632      	mov	r2, r6
 801190e:	4641      	mov	r1, r8
 8011910:	f7ff fd10 	bl	8011334 <memmove>
 8011914:	68a3      	ldr	r3, [r4, #8]
 8011916:	1b9b      	subs	r3, r3, r6
 8011918:	60a3      	str	r3, [r4, #8]
 801191a:	6823      	ldr	r3, [r4, #0]
 801191c:	4433      	add	r3, r6
 801191e:	6023      	str	r3, [r4, #0]
 8011920:	2000      	movs	r0, #0
 8011922:	e7db      	b.n	80118dc <__ssputs_r+0x58>
 8011924:	462a      	mov	r2, r5
 8011926:	f000 fe7b 	bl	8012620 <_realloc_r>
 801192a:	4606      	mov	r6, r0
 801192c:	2800      	cmp	r0, #0
 801192e:	d1e1      	bne.n	80118f4 <__ssputs_r+0x70>
 8011930:	6921      	ldr	r1, [r4, #16]
 8011932:	4650      	mov	r0, sl
 8011934:	f7ff fec6 	bl	80116c4 <_free_r>
 8011938:	e7c7      	b.n	80118ca <__ssputs_r+0x46>
	...

0801193c <_svfiprintf_r>:
 801193c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011940:	4698      	mov	r8, r3
 8011942:	898b      	ldrh	r3, [r1, #12]
 8011944:	061b      	lsls	r3, r3, #24
 8011946:	b09d      	sub	sp, #116	; 0x74
 8011948:	4607      	mov	r7, r0
 801194a:	460d      	mov	r5, r1
 801194c:	4614      	mov	r4, r2
 801194e:	d50e      	bpl.n	801196e <_svfiprintf_r+0x32>
 8011950:	690b      	ldr	r3, [r1, #16]
 8011952:	b963      	cbnz	r3, 801196e <_svfiprintf_r+0x32>
 8011954:	2140      	movs	r1, #64	; 0x40
 8011956:	f7ff ff21 	bl	801179c <_malloc_r>
 801195a:	6028      	str	r0, [r5, #0]
 801195c:	6128      	str	r0, [r5, #16]
 801195e:	b920      	cbnz	r0, 801196a <_svfiprintf_r+0x2e>
 8011960:	230c      	movs	r3, #12
 8011962:	603b      	str	r3, [r7, #0]
 8011964:	f04f 30ff 	mov.w	r0, #4294967295
 8011968:	e0d1      	b.n	8011b0e <_svfiprintf_r+0x1d2>
 801196a:	2340      	movs	r3, #64	; 0x40
 801196c:	616b      	str	r3, [r5, #20]
 801196e:	2300      	movs	r3, #0
 8011970:	9309      	str	r3, [sp, #36]	; 0x24
 8011972:	2320      	movs	r3, #32
 8011974:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011978:	f8cd 800c 	str.w	r8, [sp, #12]
 801197c:	2330      	movs	r3, #48	; 0x30
 801197e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011b28 <_svfiprintf_r+0x1ec>
 8011982:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011986:	f04f 0901 	mov.w	r9, #1
 801198a:	4623      	mov	r3, r4
 801198c:	469a      	mov	sl, r3
 801198e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011992:	b10a      	cbz	r2, 8011998 <_svfiprintf_r+0x5c>
 8011994:	2a25      	cmp	r2, #37	; 0x25
 8011996:	d1f9      	bne.n	801198c <_svfiprintf_r+0x50>
 8011998:	ebba 0b04 	subs.w	fp, sl, r4
 801199c:	d00b      	beq.n	80119b6 <_svfiprintf_r+0x7a>
 801199e:	465b      	mov	r3, fp
 80119a0:	4622      	mov	r2, r4
 80119a2:	4629      	mov	r1, r5
 80119a4:	4638      	mov	r0, r7
 80119a6:	f7ff ff6d 	bl	8011884 <__ssputs_r>
 80119aa:	3001      	adds	r0, #1
 80119ac:	f000 80aa 	beq.w	8011b04 <_svfiprintf_r+0x1c8>
 80119b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80119b2:	445a      	add	r2, fp
 80119b4:	9209      	str	r2, [sp, #36]	; 0x24
 80119b6:	f89a 3000 	ldrb.w	r3, [sl]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	f000 80a2 	beq.w	8011b04 <_svfiprintf_r+0x1c8>
 80119c0:	2300      	movs	r3, #0
 80119c2:	f04f 32ff 	mov.w	r2, #4294967295
 80119c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80119ca:	f10a 0a01 	add.w	sl, sl, #1
 80119ce:	9304      	str	r3, [sp, #16]
 80119d0:	9307      	str	r3, [sp, #28]
 80119d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80119d6:	931a      	str	r3, [sp, #104]	; 0x68
 80119d8:	4654      	mov	r4, sl
 80119da:	2205      	movs	r2, #5
 80119dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119e0:	4851      	ldr	r0, [pc, #324]	; (8011b28 <_svfiprintf_r+0x1ec>)
 80119e2:	f7ee fc0d 	bl	8000200 <memchr>
 80119e6:	9a04      	ldr	r2, [sp, #16]
 80119e8:	b9d8      	cbnz	r0, 8011a22 <_svfiprintf_r+0xe6>
 80119ea:	06d0      	lsls	r0, r2, #27
 80119ec:	bf44      	itt	mi
 80119ee:	2320      	movmi	r3, #32
 80119f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80119f4:	0711      	lsls	r1, r2, #28
 80119f6:	bf44      	itt	mi
 80119f8:	232b      	movmi	r3, #43	; 0x2b
 80119fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80119fe:	f89a 3000 	ldrb.w	r3, [sl]
 8011a02:	2b2a      	cmp	r3, #42	; 0x2a
 8011a04:	d015      	beq.n	8011a32 <_svfiprintf_r+0xf6>
 8011a06:	9a07      	ldr	r2, [sp, #28]
 8011a08:	4654      	mov	r4, sl
 8011a0a:	2000      	movs	r0, #0
 8011a0c:	f04f 0c0a 	mov.w	ip, #10
 8011a10:	4621      	mov	r1, r4
 8011a12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a16:	3b30      	subs	r3, #48	; 0x30
 8011a18:	2b09      	cmp	r3, #9
 8011a1a:	d94e      	bls.n	8011aba <_svfiprintf_r+0x17e>
 8011a1c:	b1b0      	cbz	r0, 8011a4c <_svfiprintf_r+0x110>
 8011a1e:	9207      	str	r2, [sp, #28]
 8011a20:	e014      	b.n	8011a4c <_svfiprintf_r+0x110>
 8011a22:	eba0 0308 	sub.w	r3, r0, r8
 8011a26:	fa09 f303 	lsl.w	r3, r9, r3
 8011a2a:	4313      	orrs	r3, r2
 8011a2c:	9304      	str	r3, [sp, #16]
 8011a2e:	46a2      	mov	sl, r4
 8011a30:	e7d2      	b.n	80119d8 <_svfiprintf_r+0x9c>
 8011a32:	9b03      	ldr	r3, [sp, #12]
 8011a34:	1d19      	adds	r1, r3, #4
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	9103      	str	r1, [sp, #12]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	bfbb      	ittet	lt
 8011a3e:	425b      	neglt	r3, r3
 8011a40:	f042 0202 	orrlt.w	r2, r2, #2
 8011a44:	9307      	strge	r3, [sp, #28]
 8011a46:	9307      	strlt	r3, [sp, #28]
 8011a48:	bfb8      	it	lt
 8011a4a:	9204      	strlt	r2, [sp, #16]
 8011a4c:	7823      	ldrb	r3, [r4, #0]
 8011a4e:	2b2e      	cmp	r3, #46	; 0x2e
 8011a50:	d10c      	bne.n	8011a6c <_svfiprintf_r+0x130>
 8011a52:	7863      	ldrb	r3, [r4, #1]
 8011a54:	2b2a      	cmp	r3, #42	; 0x2a
 8011a56:	d135      	bne.n	8011ac4 <_svfiprintf_r+0x188>
 8011a58:	9b03      	ldr	r3, [sp, #12]
 8011a5a:	1d1a      	adds	r2, r3, #4
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	9203      	str	r2, [sp, #12]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	bfb8      	it	lt
 8011a64:	f04f 33ff 	movlt.w	r3, #4294967295
 8011a68:	3402      	adds	r4, #2
 8011a6a:	9305      	str	r3, [sp, #20]
 8011a6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011b38 <_svfiprintf_r+0x1fc>
 8011a70:	7821      	ldrb	r1, [r4, #0]
 8011a72:	2203      	movs	r2, #3
 8011a74:	4650      	mov	r0, sl
 8011a76:	f7ee fbc3 	bl	8000200 <memchr>
 8011a7a:	b140      	cbz	r0, 8011a8e <_svfiprintf_r+0x152>
 8011a7c:	2340      	movs	r3, #64	; 0x40
 8011a7e:	eba0 000a 	sub.w	r0, r0, sl
 8011a82:	fa03 f000 	lsl.w	r0, r3, r0
 8011a86:	9b04      	ldr	r3, [sp, #16]
 8011a88:	4303      	orrs	r3, r0
 8011a8a:	3401      	adds	r4, #1
 8011a8c:	9304      	str	r3, [sp, #16]
 8011a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a92:	4826      	ldr	r0, [pc, #152]	; (8011b2c <_svfiprintf_r+0x1f0>)
 8011a94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011a98:	2206      	movs	r2, #6
 8011a9a:	f7ee fbb1 	bl	8000200 <memchr>
 8011a9e:	2800      	cmp	r0, #0
 8011aa0:	d038      	beq.n	8011b14 <_svfiprintf_r+0x1d8>
 8011aa2:	4b23      	ldr	r3, [pc, #140]	; (8011b30 <_svfiprintf_r+0x1f4>)
 8011aa4:	bb1b      	cbnz	r3, 8011aee <_svfiprintf_r+0x1b2>
 8011aa6:	9b03      	ldr	r3, [sp, #12]
 8011aa8:	3307      	adds	r3, #7
 8011aaa:	f023 0307 	bic.w	r3, r3, #7
 8011aae:	3308      	adds	r3, #8
 8011ab0:	9303      	str	r3, [sp, #12]
 8011ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ab4:	4433      	add	r3, r6
 8011ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8011ab8:	e767      	b.n	801198a <_svfiprintf_r+0x4e>
 8011aba:	fb0c 3202 	mla	r2, ip, r2, r3
 8011abe:	460c      	mov	r4, r1
 8011ac0:	2001      	movs	r0, #1
 8011ac2:	e7a5      	b.n	8011a10 <_svfiprintf_r+0xd4>
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	3401      	adds	r4, #1
 8011ac8:	9305      	str	r3, [sp, #20]
 8011aca:	4619      	mov	r1, r3
 8011acc:	f04f 0c0a 	mov.w	ip, #10
 8011ad0:	4620      	mov	r0, r4
 8011ad2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ad6:	3a30      	subs	r2, #48	; 0x30
 8011ad8:	2a09      	cmp	r2, #9
 8011ada:	d903      	bls.n	8011ae4 <_svfiprintf_r+0x1a8>
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d0c5      	beq.n	8011a6c <_svfiprintf_r+0x130>
 8011ae0:	9105      	str	r1, [sp, #20]
 8011ae2:	e7c3      	b.n	8011a6c <_svfiprintf_r+0x130>
 8011ae4:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ae8:	4604      	mov	r4, r0
 8011aea:	2301      	movs	r3, #1
 8011aec:	e7f0      	b.n	8011ad0 <_svfiprintf_r+0x194>
 8011aee:	ab03      	add	r3, sp, #12
 8011af0:	9300      	str	r3, [sp, #0]
 8011af2:	462a      	mov	r2, r5
 8011af4:	4b0f      	ldr	r3, [pc, #60]	; (8011b34 <_svfiprintf_r+0x1f8>)
 8011af6:	a904      	add	r1, sp, #16
 8011af8:	4638      	mov	r0, r7
 8011afa:	f3af 8000 	nop.w
 8011afe:	1c42      	adds	r2, r0, #1
 8011b00:	4606      	mov	r6, r0
 8011b02:	d1d6      	bne.n	8011ab2 <_svfiprintf_r+0x176>
 8011b04:	89ab      	ldrh	r3, [r5, #12]
 8011b06:	065b      	lsls	r3, r3, #25
 8011b08:	f53f af2c 	bmi.w	8011964 <_svfiprintf_r+0x28>
 8011b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b0e:	b01d      	add	sp, #116	; 0x74
 8011b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b14:	ab03      	add	r3, sp, #12
 8011b16:	9300      	str	r3, [sp, #0]
 8011b18:	462a      	mov	r2, r5
 8011b1a:	4b06      	ldr	r3, [pc, #24]	; (8011b34 <_svfiprintf_r+0x1f8>)
 8011b1c:	a904      	add	r1, sp, #16
 8011b1e:	4638      	mov	r0, r7
 8011b20:	f000 f9d4 	bl	8011ecc <_printf_i>
 8011b24:	e7eb      	b.n	8011afe <_svfiprintf_r+0x1c2>
 8011b26:	bf00      	nop
 8011b28:	08015468 	.word	0x08015468
 8011b2c:	08015472 	.word	0x08015472
 8011b30:	00000000 	.word	0x00000000
 8011b34:	08011885 	.word	0x08011885
 8011b38:	0801546e 	.word	0x0801546e

08011b3c <__sfputc_r>:
 8011b3c:	6893      	ldr	r3, [r2, #8]
 8011b3e:	3b01      	subs	r3, #1
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	b410      	push	{r4}
 8011b44:	6093      	str	r3, [r2, #8]
 8011b46:	da08      	bge.n	8011b5a <__sfputc_r+0x1e>
 8011b48:	6994      	ldr	r4, [r2, #24]
 8011b4a:	42a3      	cmp	r3, r4
 8011b4c:	db01      	blt.n	8011b52 <__sfputc_r+0x16>
 8011b4e:	290a      	cmp	r1, #10
 8011b50:	d103      	bne.n	8011b5a <__sfputc_r+0x1e>
 8011b52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b56:	f000 bb33 	b.w	80121c0 <__swbuf_r>
 8011b5a:	6813      	ldr	r3, [r2, #0]
 8011b5c:	1c58      	adds	r0, r3, #1
 8011b5e:	6010      	str	r0, [r2, #0]
 8011b60:	7019      	strb	r1, [r3, #0]
 8011b62:	4608      	mov	r0, r1
 8011b64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b68:	4770      	bx	lr

08011b6a <__sfputs_r>:
 8011b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b6c:	4606      	mov	r6, r0
 8011b6e:	460f      	mov	r7, r1
 8011b70:	4614      	mov	r4, r2
 8011b72:	18d5      	adds	r5, r2, r3
 8011b74:	42ac      	cmp	r4, r5
 8011b76:	d101      	bne.n	8011b7c <__sfputs_r+0x12>
 8011b78:	2000      	movs	r0, #0
 8011b7a:	e007      	b.n	8011b8c <__sfputs_r+0x22>
 8011b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b80:	463a      	mov	r2, r7
 8011b82:	4630      	mov	r0, r6
 8011b84:	f7ff ffda 	bl	8011b3c <__sfputc_r>
 8011b88:	1c43      	adds	r3, r0, #1
 8011b8a:	d1f3      	bne.n	8011b74 <__sfputs_r+0xa>
 8011b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011b90 <_vfiprintf_r>:
 8011b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b94:	460d      	mov	r5, r1
 8011b96:	b09d      	sub	sp, #116	; 0x74
 8011b98:	4614      	mov	r4, r2
 8011b9a:	4698      	mov	r8, r3
 8011b9c:	4606      	mov	r6, r0
 8011b9e:	b118      	cbz	r0, 8011ba8 <_vfiprintf_r+0x18>
 8011ba0:	6983      	ldr	r3, [r0, #24]
 8011ba2:	b90b      	cbnz	r3, 8011ba8 <_vfiprintf_r+0x18>
 8011ba4:	f7ff fcd4 	bl	8011550 <__sinit>
 8011ba8:	4b89      	ldr	r3, [pc, #548]	; (8011dd0 <_vfiprintf_r+0x240>)
 8011baa:	429d      	cmp	r5, r3
 8011bac:	d11b      	bne.n	8011be6 <_vfiprintf_r+0x56>
 8011bae:	6875      	ldr	r5, [r6, #4]
 8011bb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011bb2:	07d9      	lsls	r1, r3, #31
 8011bb4:	d405      	bmi.n	8011bc2 <_vfiprintf_r+0x32>
 8011bb6:	89ab      	ldrh	r3, [r5, #12]
 8011bb8:	059a      	lsls	r2, r3, #22
 8011bba:	d402      	bmi.n	8011bc2 <_vfiprintf_r+0x32>
 8011bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011bbe:	f7ff fd77 	bl	80116b0 <__retarget_lock_acquire_recursive>
 8011bc2:	89ab      	ldrh	r3, [r5, #12]
 8011bc4:	071b      	lsls	r3, r3, #28
 8011bc6:	d501      	bpl.n	8011bcc <_vfiprintf_r+0x3c>
 8011bc8:	692b      	ldr	r3, [r5, #16]
 8011bca:	b9eb      	cbnz	r3, 8011c08 <_vfiprintf_r+0x78>
 8011bcc:	4629      	mov	r1, r5
 8011bce:	4630      	mov	r0, r6
 8011bd0:	f000 fb5a 	bl	8012288 <__swsetup_r>
 8011bd4:	b1c0      	cbz	r0, 8011c08 <_vfiprintf_r+0x78>
 8011bd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011bd8:	07dc      	lsls	r4, r3, #31
 8011bda:	d50e      	bpl.n	8011bfa <_vfiprintf_r+0x6a>
 8011bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8011be0:	b01d      	add	sp, #116	; 0x74
 8011be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011be6:	4b7b      	ldr	r3, [pc, #492]	; (8011dd4 <_vfiprintf_r+0x244>)
 8011be8:	429d      	cmp	r5, r3
 8011bea:	d101      	bne.n	8011bf0 <_vfiprintf_r+0x60>
 8011bec:	68b5      	ldr	r5, [r6, #8]
 8011bee:	e7df      	b.n	8011bb0 <_vfiprintf_r+0x20>
 8011bf0:	4b79      	ldr	r3, [pc, #484]	; (8011dd8 <_vfiprintf_r+0x248>)
 8011bf2:	429d      	cmp	r5, r3
 8011bf4:	bf08      	it	eq
 8011bf6:	68f5      	ldreq	r5, [r6, #12]
 8011bf8:	e7da      	b.n	8011bb0 <_vfiprintf_r+0x20>
 8011bfa:	89ab      	ldrh	r3, [r5, #12]
 8011bfc:	0598      	lsls	r0, r3, #22
 8011bfe:	d4ed      	bmi.n	8011bdc <_vfiprintf_r+0x4c>
 8011c00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c02:	f7ff fd56 	bl	80116b2 <__retarget_lock_release_recursive>
 8011c06:	e7e9      	b.n	8011bdc <_vfiprintf_r+0x4c>
 8011c08:	2300      	movs	r3, #0
 8011c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8011c0c:	2320      	movs	r3, #32
 8011c0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011c12:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c16:	2330      	movs	r3, #48	; 0x30
 8011c18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011ddc <_vfiprintf_r+0x24c>
 8011c1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011c20:	f04f 0901 	mov.w	r9, #1
 8011c24:	4623      	mov	r3, r4
 8011c26:	469a      	mov	sl, r3
 8011c28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c2c:	b10a      	cbz	r2, 8011c32 <_vfiprintf_r+0xa2>
 8011c2e:	2a25      	cmp	r2, #37	; 0x25
 8011c30:	d1f9      	bne.n	8011c26 <_vfiprintf_r+0x96>
 8011c32:	ebba 0b04 	subs.w	fp, sl, r4
 8011c36:	d00b      	beq.n	8011c50 <_vfiprintf_r+0xc0>
 8011c38:	465b      	mov	r3, fp
 8011c3a:	4622      	mov	r2, r4
 8011c3c:	4629      	mov	r1, r5
 8011c3e:	4630      	mov	r0, r6
 8011c40:	f7ff ff93 	bl	8011b6a <__sfputs_r>
 8011c44:	3001      	adds	r0, #1
 8011c46:	f000 80aa 	beq.w	8011d9e <_vfiprintf_r+0x20e>
 8011c4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c4c:	445a      	add	r2, fp
 8011c4e:	9209      	str	r2, [sp, #36]	; 0x24
 8011c50:	f89a 3000 	ldrb.w	r3, [sl]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	f000 80a2 	beq.w	8011d9e <_vfiprintf_r+0x20e>
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8011c60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c64:	f10a 0a01 	add.w	sl, sl, #1
 8011c68:	9304      	str	r3, [sp, #16]
 8011c6a:	9307      	str	r3, [sp, #28]
 8011c6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011c70:	931a      	str	r3, [sp, #104]	; 0x68
 8011c72:	4654      	mov	r4, sl
 8011c74:	2205      	movs	r2, #5
 8011c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c7a:	4858      	ldr	r0, [pc, #352]	; (8011ddc <_vfiprintf_r+0x24c>)
 8011c7c:	f7ee fac0 	bl	8000200 <memchr>
 8011c80:	9a04      	ldr	r2, [sp, #16]
 8011c82:	b9d8      	cbnz	r0, 8011cbc <_vfiprintf_r+0x12c>
 8011c84:	06d1      	lsls	r1, r2, #27
 8011c86:	bf44      	itt	mi
 8011c88:	2320      	movmi	r3, #32
 8011c8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c8e:	0713      	lsls	r3, r2, #28
 8011c90:	bf44      	itt	mi
 8011c92:	232b      	movmi	r3, #43	; 0x2b
 8011c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c98:	f89a 3000 	ldrb.w	r3, [sl]
 8011c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8011c9e:	d015      	beq.n	8011ccc <_vfiprintf_r+0x13c>
 8011ca0:	9a07      	ldr	r2, [sp, #28]
 8011ca2:	4654      	mov	r4, sl
 8011ca4:	2000      	movs	r0, #0
 8011ca6:	f04f 0c0a 	mov.w	ip, #10
 8011caa:	4621      	mov	r1, r4
 8011cac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011cb0:	3b30      	subs	r3, #48	; 0x30
 8011cb2:	2b09      	cmp	r3, #9
 8011cb4:	d94e      	bls.n	8011d54 <_vfiprintf_r+0x1c4>
 8011cb6:	b1b0      	cbz	r0, 8011ce6 <_vfiprintf_r+0x156>
 8011cb8:	9207      	str	r2, [sp, #28]
 8011cba:	e014      	b.n	8011ce6 <_vfiprintf_r+0x156>
 8011cbc:	eba0 0308 	sub.w	r3, r0, r8
 8011cc0:	fa09 f303 	lsl.w	r3, r9, r3
 8011cc4:	4313      	orrs	r3, r2
 8011cc6:	9304      	str	r3, [sp, #16]
 8011cc8:	46a2      	mov	sl, r4
 8011cca:	e7d2      	b.n	8011c72 <_vfiprintf_r+0xe2>
 8011ccc:	9b03      	ldr	r3, [sp, #12]
 8011cce:	1d19      	adds	r1, r3, #4
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	9103      	str	r1, [sp, #12]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	bfbb      	ittet	lt
 8011cd8:	425b      	neglt	r3, r3
 8011cda:	f042 0202 	orrlt.w	r2, r2, #2
 8011cde:	9307      	strge	r3, [sp, #28]
 8011ce0:	9307      	strlt	r3, [sp, #28]
 8011ce2:	bfb8      	it	lt
 8011ce4:	9204      	strlt	r2, [sp, #16]
 8011ce6:	7823      	ldrb	r3, [r4, #0]
 8011ce8:	2b2e      	cmp	r3, #46	; 0x2e
 8011cea:	d10c      	bne.n	8011d06 <_vfiprintf_r+0x176>
 8011cec:	7863      	ldrb	r3, [r4, #1]
 8011cee:	2b2a      	cmp	r3, #42	; 0x2a
 8011cf0:	d135      	bne.n	8011d5e <_vfiprintf_r+0x1ce>
 8011cf2:	9b03      	ldr	r3, [sp, #12]
 8011cf4:	1d1a      	adds	r2, r3, #4
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	9203      	str	r2, [sp, #12]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	bfb8      	it	lt
 8011cfe:	f04f 33ff 	movlt.w	r3, #4294967295
 8011d02:	3402      	adds	r4, #2
 8011d04:	9305      	str	r3, [sp, #20]
 8011d06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011dec <_vfiprintf_r+0x25c>
 8011d0a:	7821      	ldrb	r1, [r4, #0]
 8011d0c:	2203      	movs	r2, #3
 8011d0e:	4650      	mov	r0, sl
 8011d10:	f7ee fa76 	bl	8000200 <memchr>
 8011d14:	b140      	cbz	r0, 8011d28 <_vfiprintf_r+0x198>
 8011d16:	2340      	movs	r3, #64	; 0x40
 8011d18:	eba0 000a 	sub.w	r0, r0, sl
 8011d1c:	fa03 f000 	lsl.w	r0, r3, r0
 8011d20:	9b04      	ldr	r3, [sp, #16]
 8011d22:	4303      	orrs	r3, r0
 8011d24:	3401      	adds	r4, #1
 8011d26:	9304      	str	r3, [sp, #16]
 8011d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d2c:	482c      	ldr	r0, [pc, #176]	; (8011de0 <_vfiprintf_r+0x250>)
 8011d2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011d32:	2206      	movs	r2, #6
 8011d34:	f7ee fa64 	bl	8000200 <memchr>
 8011d38:	2800      	cmp	r0, #0
 8011d3a:	d03f      	beq.n	8011dbc <_vfiprintf_r+0x22c>
 8011d3c:	4b29      	ldr	r3, [pc, #164]	; (8011de4 <_vfiprintf_r+0x254>)
 8011d3e:	bb1b      	cbnz	r3, 8011d88 <_vfiprintf_r+0x1f8>
 8011d40:	9b03      	ldr	r3, [sp, #12]
 8011d42:	3307      	adds	r3, #7
 8011d44:	f023 0307 	bic.w	r3, r3, #7
 8011d48:	3308      	adds	r3, #8
 8011d4a:	9303      	str	r3, [sp, #12]
 8011d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d4e:	443b      	add	r3, r7
 8011d50:	9309      	str	r3, [sp, #36]	; 0x24
 8011d52:	e767      	b.n	8011c24 <_vfiprintf_r+0x94>
 8011d54:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d58:	460c      	mov	r4, r1
 8011d5a:	2001      	movs	r0, #1
 8011d5c:	e7a5      	b.n	8011caa <_vfiprintf_r+0x11a>
 8011d5e:	2300      	movs	r3, #0
 8011d60:	3401      	adds	r4, #1
 8011d62:	9305      	str	r3, [sp, #20]
 8011d64:	4619      	mov	r1, r3
 8011d66:	f04f 0c0a 	mov.w	ip, #10
 8011d6a:	4620      	mov	r0, r4
 8011d6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d70:	3a30      	subs	r2, #48	; 0x30
 8011d72:	2a09      	cmp	r2, #9
 8011d74:	d903      	bls.n	8011d7e <_vfiprintf_r+0x1ee>
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d0c5      	beq.n	8011d06 <_vfiprintf_r+0x176>
 8011d7a:	9105      	str	r1, [sp, #20]
 8011d7c:	e7c3      	b.n	8011d06 <_vfiprintf_r+0x176>
 8011d7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d82:	4604      	mov	r4, r0
 8011d84:	2301      	movs	r3, #1
 8011d86:	e7f0      	b.n	8011d6a <_vfiprintf_r+0x1da>
 8011d88:	ab03      	add	r3, sp, #12
 8011d8a:	9300      	str	r3, [sp, #0]
 8011d8c:	462a      	mov	r2, r5
 8011d8e:	4b16      	ldr	r3, [pc, #88]	; (8011de8 <_vfiprintf_r+0x258>)
 8011d90:	a904      	add	r1, sp, #16
 8011d92:	4630      	mov	r0, r6
 8011d94:	f3af 8000 	nop.w
 8011d98:	4607      	mov	r7, r0
 8011d9a:	1c78      	adds	r0, r7, #1
 8011d9c:	d1d6      	bne.n	8011d4c <_vfiprintf_r+0x1bc>
 8011d9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011da0:	07d9      	lsls	r1, r3, #31
 8011da2:	d405      	bmi.n	8011db0 <_vfiprintf_r+0x220>
 8011da4:	89ab      	ldrh	r3, [r5, #12]
 8011da6:	059a      	lsls	r2, r3, #22
 8011da8:	d402      	bmi.n	8011db0 <_vfiprintf_r+0x220>
 8011daa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011dac:	f7ff fc81 	bl	80116b2 <__retarget_lock_release_recursive>
 8011db0:	89ab      	ldrh	r3, [r5, #12]
 8011db2:	065b      	lsls	r3, r3, #25
 8011db4:	f53f af12 	bmi.w	8011bdc <_vfiprintf_r+0x4c>
 8011db8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011dba:	e711      	b.n	8011be0 <_vfiprintf_r+0x50>
 8011dbc:	ab03      	add	r3, sp, #12
 8011dbe:	9300      	str	r3, [sp, #0]
 8011dc0:	462a      	mov	r2, r5
 8011dc2:	4b09      	ldr	r3, [pc, #36]	; (8011de8 <_vfiprintf_r+0x258>)
 8011dc4:	a904      	add	r1, sp, #16
 8011dc6:	4630      	mov	r0, r6
 8011dc8:	f000 f880 	bl	8011ecc <_printf_i>
 8011dcc:	e7e4      	b.n	8011d98 <_vfiprintf_r+0x208>
 8011dce:	bf00      	nop
 8011dd0:	08015428 	.word	0x08015428
 8011dd4:	08015448 	.word	0x08015448
 8011dd8:	08015408 	.word	0x08015408
 8011ddc:	08015468 	.word	0x08015468
 8011de0:	08015472 	.word	0x08015472
 8011de4:	00000000 	.word	0x00000000
 8011de8:	08011b6b 	.word	0x08011b6b
 8011dec:	0801546e 	.word	0x0801546e

08011df0 <_printf_common>:
 8011df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011df4:	4616      	mov	r6, r2
 8011df6:	4699      	mov	r9, r3
 8011df8:	688a      	ldr	r2, [r1, #8]
 8011dfa:	690b      	ldr	r3, [r1, #16]
 8011dfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011e00:	4293      	cmp	r3, r2
 8011e02:	bfb8      	it	lt
 8011e04:	4613      	movlt	r3, r2
 8011e06:	6033      	str	r3, [r6, #0]
 8011e08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011e0c:	4607      	mov	r7, r0
 8011e0e:	460c      	mov	r4, r1
 8011e10:	b10a      	cbz	r2, 8011e16 <_printf_common+0x26>
 8011e12:	3301      	adds	r3, #1
 8011e14:	6033      	str	r3, [r6, #0]
 8011e16:	6823      	ldr	r3, [r4, #0]
 8011e18:	0699      	lsls	r1, r3, #26
 8011e1a:	bf42      	ittt	mi
 8011e1c:	6833      	ldrmi	r3, [r6, #0]
 8011e1e:	3302      	addmi	r3, #2
 8011e20:	6033      	strmi	r3, [r6, #0]
 8011e22:	6825      	ldr	r5, [r4, #0]
 8011e24:	f015 0506 	ands.w	r5, r5, #6
 8011e28:	d106      	bne.n	8011e38 <_printf_common+0x48>
 8011e2a:	f104 0a19 	add.w	sl, r4, #25
 8011e2e:	68e3      	ldr	r3, [r4, #12]
 8011e30:	6832      	ldr	r2, [r6, #0]
 8011e32:	1a9b      	subs	r3, r3, r2
 8011e34:	42ab      	cmp	r3, r5
 8011e36:	dc26      	bgt.n	8011e86 <_printf_common+0x96>
 8011e38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011e3c:	1e13      	subs	r3, r2, #0
 8011e3e:	6822      	ldr	r2, [r4, #0]
 8011e40:	bf18      	it	ne
 8011e42:	2301      	movne	r3, #1
 8011e44:	0692      	lsls	r2, r2, #26
 8011e46:	d42b      	bmi.n	8011ea0 <_printf_common+0xb0>
 8011e48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011e4c:	4649      	mov	r1, r9
 8011e4e:	4638      	mov	r0, r7
 8011e50:	47c0      	blx	r8
 8011e52:	3001      	adds	r0, #1
 8011e54:	d01e      	beq.n	8011e94 <_printf_common+0xa4>
 8011e56:	6823      	ldr	r3, [r4, #0]
 8011e58:	68e5      	ldr	r5, [r4, #12]
 8011e5a:	6832      	ldr	r2, [r6, #0]
 8011e5c:	f003 0306 	and.w	r3, r3, #6
 8011e60:	2b04      	cmp	r3, #4
 8011e62:	bf08      	it	eq
 8011e64:	1aad      	subeq	r5, r5, r2
 8011e66:	68a3      	ldr	r3, [r4, #8]
 8011e68:	6922      	ldr	r2, [r4, #16]
 8011e6a:	bf0c      	ite	eq
 8011e6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011e70:	2500      	movne	r5, #0
 8011e72:	4293      	cmp	r3, r2
 8011e74:	bfc4      	itt	gt
 8011e76:	1a9b      	subgt	r3, r3, r2
 8011e78:	18ed      	addgt	r5, r5, r3
 8011e7a:	2600      	movs	r6, #0
 8011e7c:	341a      	adds	r4, #26
 8011e7e:	42b5      	cmp	r5, r6
 8011e80:	d11a      	bne.n	8011eb8 <_printf_common+0xc8>
 8011e82:	2000      	movs	r0, #0
 8011e84:	e008      	b.n	8011e98 <_printf_common+0xa8>
 8011e86:	2301      	movs	r3, #1
 8011e88:	4652      	mov	r2, sl
 8011e8a:	4649      	mov	r1, r9
 8011e8c:	4638      	mov	r0, r7
 8011e8e:	47c0      	blx	r8
 8011e90:	3001      	adds	r0, #1
 8011e92:	d103      	bne.n	8011e9c <_printf_common+0xac>
 8011e94:	f04f 30ff 	mov.w	r0, #4294967295
 8011e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e9c:	3501      	adds	r5, #1
 8011e9e:	e7c6      	b.n	8011e2e <_printf_common+0x3e>
 8011ea0:	18e1      	adds	r1, r4, r3
 8011ea2:	1c5a      	adds	r2, r3, #1
 8011ea4:	2030      	movs	r0, #48	; 0x30
 8011ea6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011eaa:	4422      	add	r2, r4
 8011eac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011eb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011eb4:	3302      	adds	r3, #2
 8011eb6:	e7c7      	b.n	8011e48 <_printf_common+0x58>
 8011eb8:	2301      	movs	r3, #1
 8011eba:	4622      	mov	r2, r4
 8011ebc:	4649      	mov	r1, r9
 8011ebe:	4638      	mov	r0, r7
 8011ec0:	47c0      	blx	r8
 8011ec2:	3001      	adds	r0, #1
 8011ec4:	d0e6      	beq.n	8011e94 <_printf_common+0xa4>
 8011ec6:	3601      	adds	r6, #1
 8011ec8:	e7d9      	b.n	8011e7e <_printf_common+0x8e>
	...

08011ecc <_printf_i>:
 8011ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011ed0:	7e0f      	ldrb	r7, [r1, #24]
 8011ed2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011ed4:	2f78      	cmp	r7, #120	; 0x78
 8011ed6:	4691      	mov	r9, r2
 8011ed8:	4680      	mov	r8, r0
 8011eda:	460c      	mov	r4, r1
 8011edc:	469a      	mov	sl, r3
 8011ede:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011ee2:	d807      	bhi.n	8011ef4 <_printf_i+0x28>
 8011ee4:	2f62      	cmp	r7, #98	; 0x62
 8011ee6:	d80a      	bhi.n	8011efe <_printf_i+0x32>
 8011ee8:	2f00      	cmp	r7, #0
 8011eea:	f000 80d8 	beq.w	801209e <_printf_i+0x1d2>
 8011eee:	2f58      	cmp	r7, #88	; 0x58
 8011ef0:	f000 80a3 	beq.w	801203a <_printf_i+0x16e>
 8011ef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ef8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011efc:	e03a      	b.n	8011f74 <_printf_i+0xa8>
 8011efe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011f02:	2b15      	cmp	r3, #21
 8011f04:	d8f6      	bhi.n	8011ef4 <_printf_i+0x28>
 8011f06:	a101      	add	r1, pc, #4	; (adr r1, 8011f0c <_printf_i+0x40>)
 8011f08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011f0c:	08011f65 	.word	0x08011f65
 8011f10:	08011f79 	.word	0x08011f79
 8011f14:	08011ef5 	.word	0x08011ef5
 8011f18:	08011ef5 	.word	0x08011ef5
 8011f1c:	08011ef5 	.word	0x08011ef5
 8011f20:	08011ef5 	.word	0x08011ef5
 8011f24:	08011f79 	.word	0x08011f79
 8011f28:	08011ef5 	.word	0x08011ef5
 8011f2c:	08011ef5 	.word	0x08011ef5
 8011f30:	08011ef5 	.word	0x08011ef5
 8011f34:	08011ef5 	.word	0x08011ef5
 8011f38:	08012085 	.word	0x08012085
 8011f3c:	08011fa9 	.word	0x08011fa9
 8011f40:	08012067 	.word	0x08012067
 8011f44:	08011ef5 	.word	0x08011ef5
 8011f48:	08011ef5 	.word	0x08011ef5
 8011f4c:	080120a7 	.word	0x080120a7
 8011f50:	08011ef5 	.word	0x08011ef5
 8011f54:	08011fa9 	.word	0x08011fa9
 8011f58:	08011ef5 	.word	0x08011ef5
 8011f5c:	08011ef5 	.word	0x08011ef5
 8011f60:	0801206f 	.word	0x0801206f
 8011f64:	682b      	ldr	r3, [r5, #0]
 8011f66:	1d1a      	adds	r2, r3, #4
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	602a      	str	r2, [r5, #0]
 8011f6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011f74:	2301      	movs	r3, #1
 8011f76:	e0a3      	b.n	80120c0 <_printf_i+0x1f4>
 8011f78:	6820      	ldr	r0, [r4, #0]
 8011f7a:	6829      	ldr	r1, [r5, #0]
 8011f7c:	0606      	lsls	r6, r0, #24
 8011f7e:	f101 0304 	add.w	r3, r1, #4
 8011f82:	d50a      	bpl.n	8011f9a <_printf_i+0xce>
 8011f84:	680e      	ldr	r6, [r1, #0]
 8011f86:	602b      	str	r3, [r5, #0]
 8011f88:	2e00      	cmp	r6, #0
 8011f8a:	da03      	bge.n	8011f94 <_printf_i+0xc8>
 8011f8c:	232d      	movs	r3, #45	; 0x2d
 8011f8e:	4276      	negs	r6, r6
 8011f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f94:	485e      	ldr	r0, [pc, #376]	; (8012110 <_printf_i+0x244>)
 8011f96:	230a      	movs	r3, #10
 8011f98:	e019      	b.n	8011fce <_printf_i+0x102>
 8011f9a:	680e      	ldr	r6, [r1, #0]
 8011f9c:	602b      	str	r3, [r5, #0]
 8011f9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011fa2:	bf18      	it	ne
 8011fa4:	b236      	sxthne	r6, r6
 8011fa6:	e7ef      	b.n	8011f88 <_printf_i+0xbc>
 8011fa8:	682b      	ldr	r3, [r5, #0]
 8011faa:	6820      	ldr	r0, [r4, #0]
 8011fac:	1d19      	adds	r1, r3, #4
 8011fae:	6029      	str	r1, [r5, #0]
 8011fb0:	0601      	lsls	r1, r0, #24
 8011fb2:	d501      	bpl.n	8011fb8 <_printf_i+0xec>
 8011fb4:	681e      	ldr	r6, [r3, #0]
 8011fb6:	e002      	b.n	8011fbe <_printf_i+0xf2>
 8011fb8:	0646      	lsls	r6, r0, #25
 8011fba:	d5fb      	bpl.n	8011fb4 <_printf_i+0xe8>
 8011fbc:	881e      	ldrh	r6, [r3, #0]
 8011fbe:	4854      	ldr	r0, [pc, #336]	; (8012110 <_printf_i+0x244>)
 8011fc0:	2f6f      	cmp	r7, #111	; 0x6f
 8011fc2:	bf0c      	ite	eq
 8011fc4:	2308      	moveq	r3, #8
 8011fc6:	230a      	movne	r3, #10
 8011fc8:	2100      	movs	r1, #0
 8011fca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011fce:	6865      	ldr	r5, [r4, #4]
 8011fd0:	60a5      	str	r5, [r4, #8]
 8011fd2:	2d00      	cmp	r5, #0
 8011fd4:	bfa2      	ittt	ge
 8011fd6:	6821      	ldrge	r1, [r4, #0]
 8011fd8:	f021 0104 	bicge.w	r1, r1, #4
 8011fdc:	6021      	strge	r1, [r4, #0]
 8011fde:	b90e      	cbnz	r6, 8011fe4 <_printf_i+0x118>
 8011fe0:	2d00      	cmp	r5, #0
 8011fe2:	d04d      	beq.n	8012080 <_printf_i+0x1b4>
 8011fe4:	4615      	mov	r5, r2
 8011fe6:	fbb6 f1f3 	udiv	r1, r6, r3
 8011fea:	fb03 6711 	mls	r7, r3, r1, r6
 8011fee:	5dc7      	ldrb	r7, [r0, r7]
 8011ff0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011ff4:	4637      	mov	r7, r6
 8011ff6:	42bb      	cmp	r3, r7
 8011ff8:	460e      	mov	r6, r1
 8011ffa:	d9f4      	bls.n	8011fe6 <_printf_i+0x11a>
 8011ffc:	2b08      	cmp	r3, #8
 8011ffe:	d10b      	bne.n	8012018 <_printf_i+0x14c>
 8012000:	6823      	ldr	r3, [r4, #0]
 8012002:	07de      	lsls	r6, r3, #31
 8012004:	d508      	bpl.n	8012018 <_printf_i+0x14c>
 8012006:	6923      	ldr	r3, [r4, #16]
 8012008:	6861      	ldr	r1, [r4, #4]
 801200a:	4299      	cmp	r1, r3
 801200c:	bfde      	ittt	le
 801200e:	2330      	movle	r3, #48	; 0x30
 8012010:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012014:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012018:	1b52      	subs	r2, r2, r5
 801201a:	6122      	str	r2, [r4, #16]
 801201c:	f8cd a000 	str.w	sl, [sp]
 8012020:	464b      	mov	r3, r9
 8012022:	aa03      	add	r2, sp, #12
 8012024:	4621      	mov	r1, r4
 8012026:	4640      	mov	r0, r8
 8012028:	f7ff fee2 	bl	8011df0 <_printf_common>
 801202c:	3001      	adds	r0, #1
 801202e:	d14c      	bne.n	80120ca <_printf_i+0x1fe>
 8012030:	f04f 30ff 	mov.w	r0, #4294967295
 8012034:	b004      	add	sp, #16
 8012036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801203a:	4835      	ldr	r0, [pc, #212]	; (8012110 <_printf_i+0x244>)
 801203c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012040:	6829      	ldr	r1, [r5, #0]
 8012042:	6823      	ldr	r3, [r4, #0]
 8012044:	f851 6b04 	ldr.w	r6, [r1], #4
 8012048:	6029      	str	r1, [r5, #0]
 801204a:	061d      	lsls	r5, r3, #24
 801204c:	d514      	bpl.n	8012078 <_printf_i+0x1ac>
 801204e:	07df      	lsls	r7, r3, #31
 8012050:	bf44      	itt	mi
 8012052:	f043 0320 	orrmi.w	r3, r3, #32
 8012056:	6023      	strmi	r3, [r4, #0]
 8012058:	b91e      	cbnz	r6, 8012062 <_printf_i+0x196>
 801205a:	6823      	ldr	r3, [r4, #0]
 801205c:	f023 0320 	bic.w	r3, r3, #32
 8012060:	6023      	str	r3, [r4, #0]
 8012062:	2310      	movs	r3, #16
 8012064:	e7b0      	b.n	8011fc8 <_printf_i+0xfc>
 8012066:	6823      	ldr	r3, [r4, #0]
 8012068:	f043 0320 	orr.w	r3, r3, #32
 801206c:	6023      	str	r3, [r4, #0]
 801206e:	2378      	movs	r3, #120	; 0x78
 8012070:	4828      	ldr	r0, [pc, #160]	; (8012114 <_printf_i+0x248>)
 8012072:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012076:	e7e3      	b.n	8012040 <_printf_i+0x174>
 8012078:	0659      	lsls	r1, r3, #25
 801207a:	bf48      	it	mi
 801207c:	b2b6      	uxthmi	r6, r6
 801207e:	e7e6      	b.n	801204e <_printf_i+0x182>
 8012080:	4615      	mov	r5, r2
 8012082:	e7bb      	b.n	8011ffc <_printf_i+0x130>
 8012084:	682b      	ldr	r3, [r5, #0]
 8012086:	6826      	ldr	r6, [r4, #0]
 8012088:	6961      	ldr	r1, [r4, #20]
 801208a:	1d18      	adds	r0, r3, #4
 801208c:	6028      	str	r0, [r5, #0]
 801208e:	0635      	lsls	r5, r6, #24
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	d501      	bpl.n	8012098 <_printf_i+0x1cc>
 8012094:	6019      	str	r1, [r3, #0]
 8012096:	e002      	b.n	801209e <_printf_i+0x1d2>
 8012098:	0670      	lsls	r0, r6, #25
 801209a:	d5fb      	bpl.n	8012094 <_printf_i+0x1c8>
 801209c:	8019      	strh	r1, [r3, #0]
 801209e:	2300      	movs	r3, #0
 80120a0:	6123      	str	r3, [r4, #16]
 80120a2:	4615      	mov	r5, r2
 80120a4:	e7ba      	b.n	801201c <_printf_i+0x150>
 80120a6:	682b      	ldr	r3, [r5, #0]
 80120a8:	1d1a      	adds	r2, r3, #4
 80120aa:	602a      	str	r2, [r5, #0]
 80120ac:	681d      	ldr	r5, [r3, #0]
 80120ae:	6862      	ldr	r2, [r4, #4]
 80120b0:	2100      	movs	r1, #0
 80120b2:	4628      	mov	r0, r5
 80120b4:	f7ee f8a4 	bl	8000200 <memchr>
 80120b8:	b108      	cbz	r0, 80120be <_printf_i+0x1f2>
 80120ba:	1b40      	subs	r0, r0, r5
 80120bc:	6060      	str	r0, [r4, #4]
 80120be:	6863      	ldr	r3, [r4, #4]
 80120c0:	6123      	str	r3, [r4, #16]
 80120c2:	2300      	movs	r3, #0
 80120c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80120c8:	e7a8      	b.n	801201c <_printf_i+0x150>
 80120ca:	6923      	ldr	r3, [r4, #16]
 80120cc:	462a      	mov	r2, r5
 80120ce:	4649      	mov	r1, r9
 80120d0:	4640      	mov	r0, r8
 80120d2:	47d0      	blx	sl
 80120d4:	3001      	adds	r0, #1
 80120d6:	d0ab      	beq.n	8012030 <_printf_i+0x164>
 80120d8:	6823      	ldr	r3, [r4, #0]
 80120da:	079b      	lsls	r3, r3, #30
 80120dc:	d413      	bmi.n	8012106 <_printf_i+0x23a>
 80120de:	68e0      	ldr	r0, [r4, #12]
 80120e0:	9b03      	ldr	r3, [sp, #12]
 80120e2:	4298      	cmp	r0, r3
 80120e4:	bfb8      	it	lt
 80120e6:	4618      	movlt	r0, r3
 80120e8:	e7a4      	b.n	8012034 <_printf_i+0x168>
 80120ea:	2301      	movs	r3, #1
 80120ec:	4632      	mov	r2, r6
 80120ee:	4649      	mov	r1, r9
 80120f0:	4640      	mov	r0, r8
 80120f2:	47d0      	blx	sl
 80120f4:	3001      	adds	r0, #1
 80120f6:	d09b      	beq.n	8012030 <_printf_i+0x164>
 80120f8:	3501      	adds	r5, #1
 80120fa:	68e3      	ldr	r3, [r4, #12]
 80120fc:	9903      	ldr	r1, [sp, #12]
 80120fe:	1a5b      	subs	r3, r3, r1
 8012100:	42ab      	cmp	r3, r5
 8012102:	dcf2      	bgt.n	80120ea <_printf_i+0x21e>
 8012104:	e7eb      	b.n	80120de <_printf_i+0x212>
 8012106:	2500      	movs	r5, #0
 8012108:	f104 0619 	add.w	r6, r4, #25
 801210c:	e7f5      	b.n	80120fa <_printf_i+0x22e>
 801210e:	bf00      	nop
 8012110:	08015479 	.word	0x08015479
 8012114:	0801548a 	.word	0x0801548a

08012118 <_sbrk_r>:
 8012118:	b538      	push	{r3, r4, r5, lr}
 801211a:	4d06      	ldr	r5, [pc, #24]	; (8012134 <_sbrk_r+0x1c>)
 801211c:	2300      	movs	r3, #0
 801211e:	4604      	mov	r4, r0
 8012120:	4608      	mov	r0, r1
 8012122:	602b      	str	r3, [r5, #0]
 8012124:	f7ee fe04 	bl	8000d30 <_sbrk>
 8012128:	1c43      	adds	r3, r0, #1
 801212a:	d102      	bne.n	8012132 <_sbrk_r+0x1a>
 801212c:	682b      	ldr	r3, [r5, #0]
 801212e:	b103      	cbz	r3, 8012132 <_sbrk_r+0x1a>
 8012130:	6023      	str	r3, [r4, #0]
 8012132:	bd38      	pop	{r3, r4, r5, pc}
 8012134:	2000bd88 	.word	0x2000bd88

08012138 <__sread>:
 8012138:	b510      	push	{r4, lr}
 801213a:	460c      	mov	r4, r1
 801213c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012140:	f000 fa9e 	bl	8012680 <_read_r>
 8012144:	2800      	cmp	r0, #0
 8012146:	bfab      	itete	ge
 8012148:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801214a:	89a3      	ldrhlt	r3, [r4, #12]
 801214c:	181b      	addge	r3, r3, r0
 801214e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012152:	bfac      	ite	ge
 8012154:	6563      	strge	r3, [r4, #84]	; 0x54
 8012156:	81a3      	strhlt	r3, [r4, #12]
 8012158:	bd10      	pop	{r4, pc}

0801215a <__swrite>:
 801215a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801215e:	461f      	mov	r7, r3
 8012160:	898b      	ldrh	r3, [r1, #12]
 8012162:	05db      	lsls	r3, r3, #23
 8012164:	4605      	mov	r5, r0
 8012166:	460c      	mov	r4, r1
 8012168:	4616      	mov	r6, r2
 801216a:	d505      	bpl.n	8012178 <__swrite+0x1e>
 801216c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012170:	2302      	movs	r3, #2
 8012172:	2200      	movs	r2, #0
 8012174:	f000 f9d0 	bl	8012518 <_lseek_r>
 8012178:	89a3      	ldrh	r3, [r4, #12]
 801217a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801217e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012182:	81a3      	strh	r3, [r4, #12]
 8012184:	4632      	mov	r2, r6
 8012186:	463b      	mov	r3, r7
 8012188:	4628      	mov	r0, r5
 801218a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801218e:	f000 b869 	b.w	8012264 <_write_r>

08012192 <__sseek>:
 8012192:	b510      	push	{r4, lr}
 8012194:	460c      	mov	r4, r1
 8012196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801219a:	f000 f9bd 	bl	8012518 <_lseek_r>
 801219e:	1c43      	adds	r3, r0, #1
 80121a0:	89a3      	ldrh	r3, [r4, #12]
 80121a2:	bf15      	itete	ne
 80121a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80121a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80121aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80121ae:	81a3      	strheq	r3, [r4, #12]
 80121b0:	bf18      	it	ne
 80121b2:	81a3      	strhne	r3, [r4, #12]
 80121b4:	bd10      	pop	{r4, pc}

080121b6 <__sclose>:
 80121b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121ba:	f000 b8db 	b.w	8012374 <_close_r>
	...

080121c0 <__swbuf_r>:
 80121c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121c2:	460e      	mov	r6, r1
 80121c4:	4614      	mov	r4, r2
 80121c6:	4605      	mov	r5, r0
 80121c8:	b118      	cbz	r0, 80121d2 <__swbuf_r+0x12>
 80121ca:	6983      	ldr	r3, [r0, #24]
 80121cc:	b90b      	cbnz	r3, 80121d2 <__swbuf_r+0x12>
 80121ce:	f7ff f9bf 	bl	8011550 <__sinit>
 80121d2:	4b21      	ldr	r3, [pc, #132]	; (8012258 <__swbuf_r+0x98>)
 80121d4:	429c      	cmp	r4, r3
 80121d6:	d12b      	bne.n	8012230 <__swbuf_r+0x70>
 80121d8:	686c      	ldr	r4, [r5, #4]
 80121da:	69a3      	ldr	r3, [r4, #24]
 80121dc:	60a3      	str	r3, [r4, #8]
 80121de:	89a3      	ldrh	r3, [r4, #12]
 80121e0:	071a      	lsls	r2, r3, #28
 80121e2:	d52f      	bpl.n	8012244 <__swbuf_r+0x84>
 80121e4:	6923      	ldr	r3, [r4, #16]
 80121e6:	b36b      	cbz	r3, 8012244 <__swbuf_r+0x84>
 80121e8:	6923      	ldr	r3, [r4, #16]
 80121ea:	6820      	ldr	r0, [r4, #0]
 80121ec:	1ac0      	subs	r0, r0, r3
 80121ee:	6963      	ldr	r3, [r4, #20]
 80121f0:	b2f6      	uxtb	r6, r6
 80121f2:	4283      	cmp	r3, r0
 80121f4:	4637      	mov	r7, r6
 80121f6:	dc04      	bgt.n	8012202 <__swbuf_r+0x42>
 80121f8:	4621      	mov	r1, r4
 80121fa:	4628      	mov	r0, r5
 80121fc:	f000 f950 	bl	80124a0 <_fflush_r>
 8012200:	bb30      	cbnz	r0, 8012250 <__swbuf_r+0x90>
 8012202:	68a3      	ldr	r3, [r4, #8]
 8012204:	3b01      	subs	r3, #1
 8012206:	60a3      	str	r3, [r4, #8]
 8012208:	6823      	ldr	r3, [r4, #0]
 801220a:	1c5a      	adds	r2, r3, #1
 801220c:	6022      	str	r2, [r4, #0]
 801220e:	701e      	strb	r6, [r3, #0]
 8012210:	6963      	ldr	r3, [r4, #20]
 8012212:	3001      	adds	r0, #1
 8012214:	4283      	cmp	r3, r0
 8012216:	d004      	beq.n	8012222 <__swbuf_r+0x62>
 8012218:	89a3      	ldrh	r3, [r4, #12]
 801221a:	07db      	lsls	r3, r3, #31
 801221c:	d506      	bpl.n	801222c <__swbuf_r+0x6c>
 801221e:	2e0a      	cmp	r6, #10
 8012220:	d104      	bne.n	801222c <__swbuf_r+0x6c>
 8012222:	4621      	mov	r1, r4
 8012224:	4628      	mov	r0, r5
 8012226:	f000 f93b 	bl	80124a0 <_fflush_r>
 801222a:	b988      	cbnz	r0, 8012250 <__swbuf_r+0x90>
 801222c:	4638      	mov	r0, r7
 801222e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012230:	4b0a      	ldr	r3, [pc, #40]	; (801225c <__swbuf_r+0x9c>)
 8012232:	429c      	cmp	r4, r3
 8012234:	d101      	bne.n	801223a <__swbuf_r+0x7a>
 8012236:	68ac      	ldr	r4, [r5, #8]
 8012238:	e7cf      	b.n	80121da <__swbuf_r+0x1a>
 801223a:	4b09      	ldr	r3, [pc, #36]	; (8012260 <__swbuf_r+0xa0>)
 801223c:	429c      	cmp	r4, r3
 801223e:	bf08      	it	eq
 8012240:	68ec      	ldreq	r4, [r5, #12]
 8012242:	e7ca      	b.n	80121da <__swbuf_r+0x1a>
 8012244:	4621      	mov	r1, r4
 8012246:	4628      	mov	r0, r5
 8012248:	f000 f81e 	bl	8012288 <__swsetup_r>
 801224c:	2800      	cmp	r0, #0
 801224e:	d0cb      	beq.n	80121e8 <__swbuf_r+0x28>
 8012250:	f04f 37ff 	mov.w	r7, #4294967295
 8012254:	e7ea      	b.n	801222c <__swbuf_r+0x6c>
 8012256:	bf00      	nop
 8012258:	08015428 	.word	0x08015428
 801225c:	08015448 	.word	0x08015448
 8012260:	08015408 	.word	0x08015408

08012264 <_write_r>:
 8012264:	b538      	push	{r3, r4, r5, lr}
 8012266:	4d07      	ldr	r5, [pc, #28]	; (8012284 <_write_r+0x20>)
 8012268:	4604      	mov	r4, r0
 801226a:	4608      	mov	r0, r1
 801226c:	4611      	mov	r1, r2
 801226e:	2200      	movs	r2, #0
 8012270:	602a      	str	r2, [r5, #0]
 8012272:	461a      	mov	r2, r3
 8012274:	f7ee fd0b 	bl	8000c8e <_write>
 8012278:	1c43      	adds	r3, r0, #1
 801227a:	d102      	bne.n	8012282 <_write_r+0x1e>
 801227c:	682b      	ldr	r3, [r5, #0]
 801227e:	b103      	cbz	r3, 8012282 <_write_r+0x1e>
 8012280:	6023      	str	r3, [r4, #0]
 8012282:	bd38      	pop	{r3, r4, r5, pc}
 8012284:	2000bd88 	.word	0x2000bd88

08012288 <__swsetup_r>:
 8012288:	4b32      	ldr	r3, [pc, #200]	; (8012354 <__swsetup_r+0xcc>)
 801228a:	b570      	push	{r4, r5, r6, lr}
 801228c:	681d      	ldr	r5, [r3, #0]
 801228e:	4606      	mov	r6, r0
 8012290:	460c      	mov	r4, r1
 8012292:	b125      	cbz	r5, 801229e <__swsetup_r+0x16>
 8012294:	69ab      	ldr	r3, [r5, #24]
 8012296:	b913      	cbnz	r3, 801229e <__swsetup_r+0x16>
 8012298:	4628      	mov	r0, r5
 801229a:	f7ff f959 	bl	8011550 <__sinit>
 801229e:	4b2e      	ldr	r3, [pc, #184]	; (8012358 <__swsetup_r+0xd0>)
 80122a0:	429c      	cmp	r4, r3
 80122a2:	d10f      	bne.n	80122c4 <__swsetup_r+0x3c>
 80122a4:	686c      	ldr	r4, [r5, #4]
 80122a6:	89a3      	ldrh	r3, [r4, #12]
 80122a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80122ac:	0719      	lsls	r1, r3, #28
 80122ae:	d42c      	bmi.n	801230a <__swsetup_r+0x82>
 80122b0:	06dd      	lsls	r5, r3, #27
 80122b2:	d411      	bmi.n	80122d8 <__swsetup_r+0x50>
 80122b4:	2309      	movs	r3, #9
 80122b6:	6033      	str	r3, [r6, #0]
 80122b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80122bc:	81a3      	strh	r3, [r4, #12]
 80122be:	f04f 30ff 	mov.w	r0, #4294967295
 80122c2:	e03e      	b.n	8012342 <__swsetup_r+0xba>
 80122c4:	4b25      	ldr	r3, [pc, #148]	; (801235c <__swsetup_r+0xd4>)
 80122c6:	429c      	cmp	r4, r3
 80122c8:	d101      	bne.n	80122ce <__swsetup_r+0x46>
 80122ca:	68ac      	ldr	r4, [r5, #8]
 80122cc:	e7eb      	b.n	80122a6 <__swsetup_r+0x1e>
 80122ce:	4b24      	ldr	r3, [pc, #144]	; (8012360 <__swsetup_r+0xd8>)
 80122d0:	429c      	cmp	r4, r3
 80122d2:	bf08      	it	eq
 80122d4:	68ec      	ldreq	r4, [r5, #12]
 80122d6:	e7e6      	b.n	80122a6 <__swsetup_r+0x1e>
 80122d8:	0758      	lsls	r0, r3, #29
 80122da:	d512      	bpl.n	8012302 <__swsetup_r+0x7a>
 80122dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80122de:	b141      	cbz	r1, 80122f2 <__swsetup_r+0x6a>
 80122e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80122e4:	4299      	cmp	r1, r3
 80122e6:	d002      	beq.n	80122ee <__swsetup_r+0x66>
 80122e8:	4630      	mov	r0, r6
 80122ea:	f7ff f9eb 	bl	80116c4 <_free_r>
 80122ee:	2300      	movs	r3, #0
 80122f0:	6363      	str	r3, [r4, #52]	; 0x34
 80122f2:	89a3      	ldrh	r3, [r4, #12]
 80122f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80122f8:	81a3      	strh	r3, [r4, #12]
 80122fa:	2300      	movs	r3, #0
 80122fc:	6063      	str	r3, [r4, #4]
 80122fe:	6923      	ldr	r3, [r4, #16]
 8012300:	6023      	str	r3, [r4, #0]
 8012302:	89a3      	ldrh	r3, [r4, #12]
 8012304:	f043 0308 	orr.w	r3, r3, #8
 8012308:	81a3      	strh	r3, [r4, #12]
 801230a:	6923      	ldr	r3, [r4, #16]
 801230c:	b94b      	cbnz	r3, 8012322 <__swsetup_r+0x9a>
 801230e:	89a3      	ldrh	r3, [r4, #12]
 8012310:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012318:	d003      	beq.n	8012322 <__swsetup_r+0x9a>
 801231a:	4621      	mov	r1, r4
 801231c:	4630      	mov	r0, r6
 801231e:	f000 f933 	bl	8012588 <__smakebuf_r>
 8012322:	89a0      	ldrh	r0, [r4, #12]
 8012324:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012328:	f010 0301 	ands.w	r3, r0, #1
 801232c:	d00a      	beq.n	8012344 <__swsetup_r+0xbc>
 801232e:	2300      	movs	r3, #0
 8012330:	60a3      	str	r3, [r4, #8]
 8012332:	6963      	ldr	r3, [r4, #20]
 8012334:	425b      	negs	r3, r3
 8012336:	61a3      	str	r3, [r4, #24]
 8012338:	6923      	ldr	r3, [r4, #16]
 801233a:	b943      	cbnz	r3, 801234e <__swsetup_r+0xc6>
 801233c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012340:	d1ba      	bne.n	80122b8 <__swsetup_r+0x30>
 8012342:	bd70      	pop	{r4, r5, r6, pc}
 8012344:	0781      	lsls	r1, r0, #30
 8012346:	bf58      	it	pl
 8012348:	6963      	ldrpl	r3, [r4, #20]
 801234a:	60a3      	str	r3, [r4, #8]
 801234c:	e7f4      	b.n	8012338 <__swsetup_r+0xb0>
 801234e:	2000      	movs	r0, #0
 8012350:	e7f7      	b.n	8012342 <__swsetup_r+0xba>
 8012352:	bf00      	nop
 8012354:	2000002c 	.word	0x2000002c
 8012358:	08015428 	.word	0x08015428
 801235c:	08015448 	.word	0x08015448
 8012360:	08015408 	.word	0x08015408

08012364 <abort>:
 8012364:	b508      	push	{r3, lr}
 8012366:	2006      	movs	r0, #6
 8012368:	f000 f9c4 	bl	80126f4 <raise>
 801236c:	2001      	movs	r0, #1
 801236e:	f7ee fc67 	bl	8000c40 <_exit>
	...

08012374 <_close_r>:
 8012374:	b538      	push	{r3, r4, r5, lr}
 8012376:	4d06      	ldr	r5, [pc, #24]	; (8012390 <_close_r+0x1c>)
 8012378:	2300      	movs	r3, #0
 801237a:	4604      	mov	r4, r0
 801237c:	4608      	mov	r0, r1
 801237e:	602b      	str	r3, [r5, #0]
 8012380:	f7ee fca1 	bl	8000cc6 <_close>
 8012384:	1c43      	adds	r3, r0, #1
 8012386:	d102      	bne.n	801238e <_close_r+0x1a>
 8012388:	682b      	ldr	r3, [r5, #0]
 801238a:	b103      	cbz	r3, 801238e <_close_r+0x1a>
 801238c:	6023      	str	r3, [r4, #0]
 801238e:	bd38      	pop	{r3, r4, r5, pc}
 8012390:	2000bd88 	.word	0x2000bd88

08012394 <__sflush_r>:
 8012394:	898a      	ldrh	r2, [r1, #12]
 8012396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801239a:	4605      	mov	r5, r0
 801239c:	0710      	lsls	r0, r2, #28
 801239e:	460c      	mov	r4, r1
 80123a0:	d458      	bmi.n	8012454 <__sflush_r+0xc0>
 80123a2:	684b      	ldr	r3, [r1, #4]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	dc05      	bgt.n	80123b4 <__sflush_r+0x20>
 80123a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	dc02      	bgt.n	80123b4 <__sflush_r+0x20>
 80123ae:	2000      	movs	r0, #0
 80123b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80123b6:	2e00      	cmp	r6, #0
 80123b8:	d0f9      	beq.n	80123ae <__sflush_r+0x1a>
 80123ba:	2300      	movs	r3, #0
 80123bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80123c0:	682f      	ldr	r7, [r5, #0]
 80123c2:	602b      	str	r3, [r5, #0]
 80123c4:	d032      	beq.n	801242c <__sflush_r+0x98>
 80123c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80123c8:	89a3      	ldrh	r3, [r4, #12]
 80123ca:	075a      	lsls	r2, r3, #29
 80123cc:	d505      	bpl.n	80123da <__sflush_r+0x46>
 80123ce:	6863      	ldr	r3, [r4, #4]
 80123d0:	1ac0      	subs	r0, r0, r3
 80123d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80123d4:	b10b      	cbz	r3, 80123da <__sflush_r+0x46>
 80123d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80123d8:	1ac0      	subs	r0, r0, r3
 80123da:	2300      	movs	r3, #0
 80123dc:	4602      	mov	r2, r0
 80123de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80123e0:	6a21      	ldr	r1, [r4, #32]
 80123e2:	4628      	mov	r0, r5
 80123e4:	47b0      	blx	r6
 80123e6:	1c43      	adds	r3, r0, #1
 80123e8:	89a3      	ldrh	r3, [r4, #12]
 80123ea:	d106      	bne.n	80123fa <__sflush_r+0x66>
 80123ec:	6829      	ldr	r1, [r5, #0]
 80123ee:	291d      	cmp	r1, #29
 80123f0:	d82c      	bhi.n	801244c <__sflush_r+0xb8>
 80123f2:	4a2a      	ldr	r2, [pc, #168]	; (801249c <__sflush_r+0x108>)
 80123f4:	40ca      	lsrs	r2, r1
 80123f6:	07d6      	lsls	r6, r2, #31
 80123f8:	d528      	bpl.n	801244c <__sflush_r+0xb8>
 80123fa:	2200      	movs	r2, #0
 80123fc:	6062      	str	r2, [r4, #4]
 80123fe:	04d9      	lsls	r1, r3, #19
 8012400:	6922      	ldr	r2, [r4, #16]
 8012402:	6022      	str	r2, [r4, #0]
 8012404:	d504      	bpl.n	8012410 <__sflush_r+0x7c>
 8012406:	1c42      	adds	r2, r0, #1
 8012408:	d101      	bne.n	801240e <__sflush_r+0x7a>
 801240a:	682b      	ldr	r3, [r5, #0]
 801240c:	b903      	cbnz	r3, 8012410 <__sflush_r+0x7c>
 801240e:	6560      	str	r0, [r4, #84]	; 0x54
 8012410:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012412:	602f      	str	r7, [r5, #0]
 8012414:	2900      	cmp	r1, #0
 8012416:	d0ca      	beq.n	80123ae <__sflush_r+0x1a>
 8012418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801241c:	4299      	cmp	r1, r3
 801241e:	d002      	beq.n	8012426 <__sflush_r+0x92>
 8012420:	4628      	mov	r0, r5
 8012422:	f7ff f94f 	bl	80116c4 <_free_r>
 8012426:	2000      	movs	r0, #0
 8012428:	6360      	str	r0, [r4, #52]	; 0x34
 801242a:	e7c1      	b.n	80123b0 <__sflush_r+0x1c>
 801242c:	6a21      	ldr	r1, [r4, #32]
 801242e:	2301      	movs	r3, #1
 8012430:	4628      	mov	r0, r5
 8012432:	47b0      	blx	r6
 8012434:	1c41      	adds	r1, r0, #1
 8012436:	d1c7      	bne.n	80123c8 <__sflush_r+0x34>
 8012438:	682b      	ldr	r3, [r5, #0]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d0c4      	beq.n	80123c8 <__sflush_r+0x34>
 801243e:	2b1d      	cmp	r3, #29
 8012440:	d001      	beq.n	8012446 <__sflush_r+0xb2>
 8012442:	2b16      	cmp	r3, #22
 8012444:	d101      	bne.n	801244a <__sflush_r+0xb6>
 8012446:	602f      	str	r7, [r5, #0]
 8012448:	e7b1      	b.n	80123ae <__sflush_r+0x1a>
 801244a:	89a3      	ldrh	r3, [r4, #12]
 801244c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012450:	81a3      	strh	r3, [r4, #12]
 8012452:	e7ad      	b.n	80123b0 <__sflush_r+0x1c>
 8012454:	690f      	ldr	r7, [r1, #16]
 8012456:	2f00      	cmp	r7, #0
 8012458:	d0a9      	beq.n	80123ae <__sflush_r+0x1a>
 801245a:	0793      	lsls	r3, r2, #30
 801245c:	680e      	ldr	r6, [r1, #0]
 801245e:	bf08      	it	eq
 8012460:	694b      	ldreq	r3, [r1, #20]
 8012462:	600f      	str	r7, [r1, #0]
 8012464:	bf18      	it	ne
 8012466:	2300      	movne	r3, #0
 8012468:	eba6 0807 	sub.w	r8, r6, r7
 801246c:	608b      	str	r3, [r1, #8]
 801246e:	f1b8 0f00 	cmp.w	r8, #0
 8012472:	dd9c      	ble.n	80123ae <__sflush_r+0x1a>
 8012474:	6a21      	ldr	r1, [r4, #32]
 8012476:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012478:	4643      	mov	r3, r8
 801247a:	463a      	mov	r2, r7
 801247c:	4628      	mov	r0, r5
 801247e:	47b0      	blx	r6
 8012480:	2800      	cmp	r0, #0
 8012482:	dc06      	bgt.n	8012492 <__sflush_r+0xfe>
 8012484:	89a3      	ldrh	r3, [r4, #12]
 8012486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801248a:	81a3      	strh	r3, [r4, #12]
 801248c:	f04f 30ff 	mov.w	r0, #4294967295
 8012490:	e78e      	b.n	80123b0 <__sflush_r+0x1c>
 8012492:	4407      	add	r7, r0
 8012494:	eba8 0800 	sub.w	r8, r8, r0
 8012498:	e7e9      	b.n	801246e <__sflush_r+0xda>
 801249a:	bf00      	nop
 801249c:	20400001 	.word	0x20400001

080124a0 <_fflush_r>:
 80124a0:	b538      	push	{r3, r4, r5, lr}
 80124a2:	690b      	ldr	r3, [r1, #16]
 80124a4:	4605      	mov	r5, r0
 80124a6:	460c      	mov	r4, r1
 80124a8:	b913      	cbnz	r3, 80124b0 <_fflush_r+0x10>
 80124aa:	2500      	movs	r5, #0
 80124ac:	4628      	mov	r0, r5
 80124ae:	bd38      	pop	{r3, r4, r5, pc}
 80124b0:	b118      	cbz	r0, 80124ba <_fflush_r+0x1a>
 80124b2:	6983      	ldr	r3, [r0, #24]
 80124b4:	b90b      	cbnz	r3, 80124ba <_fflush_r+0x1a>
 80124b6:	f7ff f84b 	bl	8011550 <__sinit>
 80124ba:	4b14      	ldr	r3, [pc, #80]	; (801250c <_fflush_r+0x6c>)
 80124bc:	429c      	cmp	r4, r3
 80124be:	d11b      	bne.n	80124f8 <_fflush_r+0x58>
 80124c0:	686c      	ldr	r4, [r5, #4]
 80124c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d0ef      	beq.n	80124aa <_fflush_r+0xa>
 80124ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80124cc:	07d0      	lsls	r0, r2, #31
 80124ce:	d404      	bmi.n	80124da <_fflush_r+0x3a>
 80124d0:	0599      	lsls	r1, r3, #22
 80124d2:	d402      	bmi.n	80124da <_fflush_r+0x3a>
 80124d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124d6:	f7ff f8eb 	bl	80116b0 <__retarget_lock_acquire_recursive>
 80124da:	4628      	mov	r0, r5
 80124dc:	4621      	mov	r1, r4
 80124de:	f7ff ff59 	bl	8012394 <__sflush_r>
 80124e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80124e4:	07da      	lsls	r2, r3, #31
 80124e6:	4605      	mov	r5, r0
 80124e8:	d4e0      	bmi.n	80124ac <_fflush_r+0xc>
 80124ea:	89a3      	ldrh	r3, [r4, #12]
 80124ec:	059b      	lsls	r3, r3, #22
 80124ee:	d4dd      	bmi.n	80124ac <_fflush_r+0xc>
 80124f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124f2:	f7ff f8de 	bl	80116b2 <__retarget_lock_release_recursive>
 80124f6:	e7d9      	b.n	80124ac <_fflush_r+0xc>
 80124f8:	4b05      	ldr	r3, [pc, #20]	; (8012510 <_fflush_r+0x70>)
 80124fa:	429c      	cmp	r4, r3
 80124fc:	d101      	bne.n	8012502 <_fflush_r+0x62>
 80124fe:	68ac      	ldr	r4, [r5, #8]
 8012500:	e7df      	b.n	80124c2 <_fflush_r+0x22>
 8012502:	4b04      	ldr	r3, [pc, #16]	; (8012514 <_fflush_r+0x74>)
 8012504:	429c      	cmp	r4, r3
 8012506:	bf08      	it	eq
 8012508:	68ec      	ldreq	r4, [r5, #12]
 801250a:	e7da      	b.n	80124c2 <_fflush_r+0x22>
 801250c:	08015428 	.word	0x08015428
 8012510:	08015448 	.word	0x08015448
 8012514:	08015408 	.word	0x08015408

08012518 <_lseek_r>:
 8012518:	b538      	push	{r3, r4, r5, lr}
 801251a:	4d07      	ldr	r5, [pc, #28]	; (8012538 <_lseek_r+0x20>)
 801251c:	4604      	mov	r4, r0
 801251e:	4608      	mov	r0, r1
 8012520:	4611      	mov	r1, r2
 8012522:	2200      	movs	r2, #0
 8012524:	602a      	str	r2, [r5, #0]
 8012526:	461a      	mov	r2, r3
 8012528:	f7ee fbf4 	bl	8000d14 <_lseek>
 801252c:	1c43      	adds	r3, r0, #1
 801252e:	d102      	bne.n	8012536 <_lseek_r+0x1e>
 8012530:	682b      	ldr	r3, [r5, #0]
 8012532:	b103      	cbz	r3, 8012536 <_lseek_r+0x1e>
 8012534:	6023      	str	r3, [r4, #0]
 8012536:	bd38      	pop	{r3, r4, r5, pc}
 8012538:	2000bd88 	.word	0x2000bd88

0801253c <__swhatbuf_r>:
 801253c:	b570      	push	{r4, r5, r6, lr}
 801253e:	460e      	mov	r6, r1
 8012540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012544:	2900      	cmp	r1, #0
 8012546:	b096      	sub	sp, #88	; 0x58
 8012548:	4614      	mov	r4, r2
 801254a:	461d      	mov	r5, r3
 801254c:	da08      	bge.n	8012560 <__swhatbuf_r+0x24>
 801254e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012552:	2200      	movs	r2, #0
 8012554:	602a      	str	r2, [r5, #0]
 8012556:	061a      	lsls	r2, r3, #24
 8012558:	d410      	bmi.n	801257c <__swhatbuf_r+0x40>
 801255a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801255e:	e00e      	b.n	801257e <__swhatbuf_r+0x42>
 8012560:	466a      	mov	r2, sp
 8012562:	f000 f8e3 	bl	801272c <_fstat_r>
 8012566:	2800      	cmp	r0, #0
 8012568:	dbf1      	blt.n	801254e <__swhatbuf_r+0x12>
 801256a:	9a01      	ldr	r2, [sp, #4]
 801256c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012570:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012574:	425a      	negs	r2, r3
 8012576:	415a      	adcs	r2, r3
 8012578:	602a      	str	r2, [r5, #0]
 801257a:	e7ee      	b.n	801255a <__swhatbuf_r+0x1e>
 801257c:	2340      	movs	r3, #64	; 0x40
 801257e:	2000      	movs	r0, #0
 8012580:	6023      	str	r3, [r4, #0]
 8012582:	b016      	add	sp, #88	; 0x58
 8012584:	bd70      	pop	{r4, r5, r6, pc}
	...

08012588 <__smakebuf_r>:
 8012588:	898b      	ldrh	r3, [r1, #12]
 801258a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801258c:	079d      	lsls	r5, r3, #30
 801258e:	4606      	mov	r6, r0
 8012590:	460c      	mov	r4, r1
 8012592:	d507      	bpl.n	80125a4 <__smakebuf_r+0x1c>
 8012594:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012598:	6023      	str	r3, [r4, #0]
 801259a:	6123      	str	r3, [r4, #16]
 801259c:	2301      	movs	r3, #1
 801259e:	6163      	str	r3, [r4, #20]
 80125a0:	b002      	add	sp, #8
 80125a2:	bd70      	pop	{r4, r5, r6, pc}
 80125a4:	ab01      	add	r3, sp, #4
 80125a6:	466a      	mov	r2, sp
 80125a8:	f7ff ffc8 	bl	801253c <__swhatbuf_r>
 80125ac:	9900      	ldr	r1, [sp, #0]
 80125ae:	4605      	mov	r5, r0
 80125b0:	4630      	mov	r0, r6
 80125b2:	f7ff f8f3 	bl	801179c <_malloc_r>
 80125b6:	b948      	cbnz	r0, 80125cc <__smakebuf_r+0x44>
 80125b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80125bc:	059a      	lsls	r2, r3, #22
 80125be:	d4ef      	bmi.n	80125a0 <__smakebuf_r+0x18>
 80125c0:	f023 0303 	bic.w	r3, r3, #3
 80125c4:	f043 0302 	orr.w	r3, r3, #2
 80125c8:	81a3      	strh	r3, [r4, #12]
 80125ca:	e7e3      	b.n	8012594 <__smakebuf_r+0xc>
 80125cc:	4b0d      	ldr	r3, [pc, #52]	; (8012604 <__smakebuf_r+0x7c>)
 80125ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80125d0:	89a3      	ldrh	r3, [r4, #12]
 80125d2:	6020      	str	r0, [r4, #0]
 80125d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125d8:	81a3      	strh	r3, [r4, #12]
 80125da:	9b00      	ldr	r3, [sp, #0]
 80125dc:	6163      	str	r3, [r4, #20]
 80125de:	9b01      	ldr	r3, [sp, #4]
 80125e0:	6120      	str	r0, [r4, #16]
 80125e2:	b15b      	cbz	r3, 80125fc <__smakebuf_r+0x74>
 80125e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125e8:	4630      	mov	r0, r6
 80125ea:	f000 f8b1 	bl	8012750 <_isatty_r>
 80125ee:	b128      	cbz	r0, 80125fc <__smakebuf_r+0x74>
 80125f0:	89a3      	ldrh	r3, [r4, #12]
 80125f2:	f023 0303 	bic.w	r3, r3, #3
 80125f6:	f043 0301 	orr.w	r3, r3, #1
 80125fa:	81a3      	strh	r3, [r4, #12]
 80125fc:	89a0      	ldrh	r0, [r4, #12]
 80125fe:	4305      	orrs	r5, r0
 8012600:	81a5      	strh	r5, [r4, #12]
 8012602:	e7cd      	b.n	80125a0 <__smakebuf_r+0x18>
 8012604:	080114e9 	.word	0x080114e9

08012608 <__malloc_lock>:
 8012608:	4801      	ldr	r0, [pc, #4]	; (8012610 <__malloc_lock+0x8>)
 801260a:	f7ff b851 	b.w	80116b0 <__retarget_lock_acquire_recursive>
 801260e:	bf00      	nop
 8012610:	2000bd8c 	.word	0x2000bd8c

08012614 <__malloc_unlock>:
 8012614:	4801      	ldr	r0, [pc, #4]	; (801261c <__malloc_unlock+0x8>)
 8012616:	f7ff b84c 	b.w	80116b2 <__retarget_lock_release_recursive>
 801261a:	bf00      	nop
 801261c:	2000bd8c 	.word	0x2000bd8c

08012620 <_realloc_r>:
 8012620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012624:	4680      	mov	r8, r0
 8012626:	4614      	mov	r4, r2
 8012628:	460e      	mov	r6, r1
 801262a:	b921      	cbnz	r1, 8012636 <_realloc_r+0x16>
 801262c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012630:	4611      	mov	r1, r2
 8012632:	f7ff b8b3 	b.w	801179c <_malloc_r>
 8012636:	b92a      	cbnz	r2, 8012644 <_realloc_r+0x24>
 8012638:	f7ff f844 	bl	80116c4 <_free_r>
 801263c:	4625      	mov	r5, r4
 801263e:	4628      	mov	r0, r5
 8012640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012644:	f000 f894 	bl	8012770 <_malloc_usable_size_r>
 8012648:	4284      	cmp	r4, r0
 801264a:	4607      	mov	r7, r0
 801264c:	d802      	bhi.n	8012654 <_realloc_r+0x34>
 801264e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012652:	d812      	bhi.n	801267a <_realloc_r+0x5a>
 8012654:	4621      	mov	r1, r4
 8012656:	4640      	mov	r0, r8
 8012658:	f7ff f8a0 	bl	801179c <_malloc_r>
 801265c:	4605      	mov	r5, r0
 801265e:	2800      	cmp	r0, #0
 8012660:	d0ed      	beq.n	801263e <_realloc_r+0x1e>
 8012662:	42bc      	cmp	r4, r7
 8012664:	4622      	mov	r2, r4
 8012666:	4631      	mov	r1, r6
 8012668:	bf28      	it	cs
 801266a:	463a      	movcs	r2, r7
 801266c:	f7fe fe54 	bl	8011318 <memcpy>
 8012670:	4631      	mov	r1, r6
 8012672:	4640      	mov	r0, r8
 8012674:	f7ff f826 	bl	80116c4 <_free_r>
 8012678:	e7e1      	b.n	801263e <_realloc_r+0x1e>
 801267a:	4635      	mov	r5, r6
 801267c:	e7df      	b.n	801263e <_realloc_r+0x1e>
	...

08012680 <_read_r>:
 8012680:	b538      	push	{r3, r4, r5, lr}
 8012682:	4d07      	ldr	r5, [pc, #28]	; (80126a0 <_read_r+0x20>)
 8012684:	4604      	mov	r4, r0
 8012686:	4608      	mov	r0, r1
 8012688:	4611      	mov	r1, r2
 801268a:	2200      	movs	r2, #0
 801268c:	602a      	str	r2, [r5, #0]
 801268e:	461a      	mov	r2, r3
 8012690:	f7ee fae0 	bl	8000c54 <_read>
 8012694:	1c43      	adds	r3, r0, #1
 8012696:	d102      	bne.n	801269e <_read_r+0x1e>
 8012698:	682b      	ldr	r3, [r5, #0]
 801269a:	b103      	cbz	r3, 801269e <_read_r+0x1e>
 801269c:	6023      	str	r3, [r4, #0]
 801269e:	bd38      	pop	{r3, r4, r5, pc}
 80126a0:	2000bd88 	.word	0x2000bd88

080126a4 <_raise_r>:
 80126a4:	291f      	cmp	r1, #31
 80126a6:	b538      	push	{r3, r4, r5, lr}
 80126a8:	4604      	mov	r4, r0
 80126aa:	460d      	mov	r5, r1
 80126ac:	d904      	bls.n	80126b8 <_raise_r+0x14>
 80126ae:	2316      	movs	r3, #22
 80126b0:	6003      	str	r3, [r0, #0]
 80126b2:	f04f 30ff 	mov.w	r0, #4294967295
 80126b6:	bd38      	pop	{r3, r4, r5, pc}
 80126b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80126ba:	b112      	cbz	r2, 80126c2 <_raise_r+0x1e>
 80126bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80126c0:	b94b      	cbnz	r3, 80126d6 <_raise_r+0x32>
 80126c2:	4620      	mov	r0, r4
 80126c4:	f000 f830 	bl	8012728 <_getpid_r>
 80126c8:	462a      	mov	r2, r5
 80126ca:	4601      	mov	r1, r0
 80126cc:	4620      	mov	r0, r4
 80126ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126d2:	f000 b817 	b.w	8012704 <_kill_r>
 80126d6:	2b01      	cmp	r3, #1
 80126d8:	d00a      	beq.n	80126f0 <_raise_r+0x4c>
 80126da:	1c59      	adds	r1, r3, #1
 80126dc:	d103      	bne.n	80126e6 <_raise_r+0x42>
 80126de:	2316      	movs	r3, #22
 80126e0:	6003      	str	r3, [r0, #0]
 80126e2:	2001      	movs	r0, #1
 80126e4:	e7e7      	b.n	80126b6 <_raise_r+0x12>
 80126e6:	2400      	movs	r4, #0
 80126e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80126ec:	4628      	mov	r0, r5
 80126ee:	4798      	blx	r3
 80126f0:	2000      	movs	r0, #0
 80126f2:	e7e0      	b.n	80126b6 <_raise_r+0x12>

080126f4 <raise>:
 80126f4:	4b02      	ldr	r3, [pc, #8]	; (8012700 <raise+0xc>)
 80126f6:	4601      	mov	r1, r0
 80126f8:	6818      	ldr	r0, [r3, #0]
 80126fa:	f7ff bfd3 	b.w	80126a4 <_raise_r>
 80126fe:	bf00      	nop
 8012700:	2000002c 	.word	0x2000002c

08012704 <_kill_r>:
 8012704:	b538      	push	{r3, r4, r5, lr}
 8012706:	4d07      	ldr	r5, [pc, #28]	; (8012724 <_kill_r+0x20>)
 8012708:	2300      	movs	r3, #0
 801270a:	4604      	mov	r4, r0
 801270c:	4608      	mov	r0, r1
 801270e:	4611      	mov	r1, r2
 8012710:	602b      	str	r3, [r5, #0]
 8012712:	f7ee fa83 	bl	8000c1c <_kill>
 8012716:	1c43      	adds	r3, r0, #1
 8012718:	d102      	bne.n	8012720 <_kill_r+0x1c>
 801271a:	682b      	ldr	r3, [r5, #0]
 801271c:	b103      	cbz	r3, 8012720 <_kill_r+0x1c>
 801271e:	6023      	str	r3, [r4, #0]
 8012720:	bd38      	pop	{r3, r4, r5, pc}
 8012722:	bf00      	nop
 8012724:	2000bd88 	.word	0x2000bd88

08012728 <_getpid_r>:
 8012728:	f7ee ba70 	b.w	8000c0c <_getpid>

0801272c <_fstat_r>:
 801272c:	b538      	push	{r3, r4, r5, lr}
 801272e:	4d07      	ldr	r5, [pc, #28]	; (801274c <_fstat_r+0x20>)
 8012730:	2300      	movs	r3, #0
 8012732:	4604      	mov	r4, r0
 8012734:	4608      	mov	r0, r1
 8012736:	4611      	mov	r1, r2
 8012738:	602b      	str	r3, [r5, #0]
 801273a:	f7ee fad0 	bl	8000cde <_fstat>
 801273e:	1c43      	adds	r3, r0, #1
 8012740:	d102      	bne.n	8012748 <_fstat_r+0x1c>
 8012742:	682b      	ldr	r3, [r5, #0]
 8012744:	b103      	cbz	r3, 8012748 <_fstat_r+0x1c>
 8012746:	6023      	str	r3, [r4, #0]
 8012748:	bd38      	pop	{r3, r4, r5, pc}
 801274a:	bf00      	nop
 801274c:	2000bd88 	.word	0x2000bd88

08012750 <_isatty_r>:
 8012750:	b538      	push	{r3, r4, r5, lr}
 8012752:	4d06      	ldr	r5, [pc, #24]	; (801276c <_isatty_r+0x1c>)
 8012754:	2300      	movs	r3, #0
 8012756:	4604      	mov	r4, r0
 8012758:	4608      	mov	r0, r1
 801275a:	602b      	str	r3, [r5, #0]
 801275c:	f7ee facf 	bl	8000cfe <_isatty>
 8012760:	1c43      	adds	r3, r0, #1
 8012762:	d102      	bne.n	801276a <_isatty_r+0x1a>
 8012764:	682b      	ldr	r3, [r5, #0]
 8012766:	b103      	cbz	r3, 801276a <_isatty_r+0x1a>
 8012768:	6023      	str	r3, [r4, #0]
 801276a:	bd38      	pop	{r3, r4, r5, pc}
 801276c:	2000bd88 	.word	0x2000bd88

08012770 <_malloc_usable_size_r>:
 8012770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012774:	1f18      	subs	r0, r3, #4
 8012776:	2b00      	cmp	r3, #0
 8012778:	bfbc      	itt	lt
 801277a:	580b      	ldrlt	r3, [r1, r0]
 801277c:	18c0      	addlt	r0, r0, r3
 801277e:	4770      	bx	lr

08012780 <_init>:
 8012780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012782:	bf00      	nop
 8012784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012786:	bc08      	pop	{r3}
 8012788:	469e      	mov	lr, r3
 801278a:	4770      	bx	lr

0801278c <_fini>:
 801278c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801278e:	bf00      	nop
 8012790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012792:	bc08      	pop	{r3}
 8012794:	469e      	mov	lr, r3
 8012796:	4770      	bx	lr
